{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#track-all-ringextm-communications-in-your-crm","title":"Track all RingEX\u2122 communications in your CRM","text":"<p>RingCentral App Connect, powered by Embeddable 2.0, is an all-in-one CRM integration solution. It embeds a full-featured communications client into almost any app, reliably logging all communications. If your CRM is not currently supported, developers can easily integrate with both SaaS products and proprietary CRMs using a simple framework.</p> <p> </p>"},{"location":"#connect-your-crm-with-ringcentral-using-app-connect","title":"Connect your CRM with RingCentral using App Connect","text":"<p>RingCentral's App Connect for RingEX is a browser extension for Google Chrome and Microsoft Edge that helps connect your RingCentral RingEX account to a number of different CRM services. It embeds a fully functional web phone into your CRM and supports key user flows unique to CRMs to better track communications and engage with customers.</p>"},{"location":"#supported-crms","title":"Supported CRMs","text":""},{"location":"#highlighted-features","title":"Highlighted Features","text":"<ul> <li> <p> Embedded dailer/CTI</p> <p>A fully functional phone is built into your CRM, allowing you to place and receive calls with features tailored for CRM users.</p> <p> Learn more</p> </li> <li> <p> Click-to-dial</p> <p>Instantly call or text any phone number in your CRM by clicking it, streamlining communication.</p> <p> Learn more</p> </li> <li> <p> Call logging</p> <p>Automatically log calls in your CRM to keep track of important conversations with minimal effort.</p> <p> Learn more</p> </li> <li> <p> Automated logging</p> <p>Ensure every inbound and outbound call is recorded in your CRM, with an \"Unlogged\" tab for quick fixes.</p> <p> Learn more</p> </li> <li> <p> Call pop</p> <p>When a call comes in, the caller's contact page opens automatically, giving you full context before answering.</p> <p> Learn more</p> </li> <li> <p> Send/receive SMS</p> <p>Use the CTI to send and receive SMS messages directly from your CRM.</p> <p> Learn more</p> </li> <li> <p> SMS templates</p> <p>Save time by using pre-written SMS templates for common responses.</p> <p> Learn more</p> </li> <li> <p> AI Assistant (BETA)</p> <p>Get live call transcripts, auto-generated summaries, action items, reminders, and more.</p> <p> Learn more</p> </li> <li> <p> Server-side call logging (BETA)</p> <p>Log every company call, even for employees who haven\u2019t installed App Connect.</p> <p> Learn more</p> </li> </ul>"},{"location":"#are-you-a-developer-build-support-for-your-own-crm","title":"Are you a developer? Build support for your own CRM","text":"<p>App Connect is itself an open source framework that can be used by developers to create a custom CRM integration more easily than building one from scratch. </p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>App Connect requires the following:</p> <ul> <li>RingEX account (Core, Advanced or Ultimate)</li> <li>Google Chrome or Microsoft Edge</li> </ul>"},{"location":"build/","title":"Build support for a new app or CRM","text":"<p>App Connect is not only a product used by RingCentral customers to connect our communications system to their applications, it is also a developer framework that helps companies integrate a full-featured phone and communication client into new CRMs, or proprietary CRMs into RingCentral quickly, efficiently and at a fraction of the cost. </p> <p>If your CRM is not supported by App Connect, you have three general options.</p>"},{"location":"build/#build-an-app-connect-adapter-yourself","title":"Build an App Connect adapter yourself","text":"<p>App Connect is an open source framework that you are welcome to use to build support for your CRM of choice on your own. Our developer documentation will help you get started. </p>"},{"location":"build/#contact-ringcentral-professional-services","title":"Contact RingCentral Professional Services","text":"<p>RingCentral Professional Services offers a package in which RingCentral will build support for your CRM. Professional Services' package comes with the following:</p> <ul> <li>Experts. RingCentral Professional Services' team are experts in App Connect, with a proven track record of building for App Connect. </li> <li>Single billing relationship. RingCentral can build support for your CRM all through a single invoice and vendor.</li> <li>Rapid implementation times. Development time takes 1-3 weeks depending upon your CRM, and whether or not its APIs are compatible with App Connect. </li> <li>Maintenance and support. Rest easy knowing that Professional Services will help keep your integration current with the latest App Connect has to offer.</li> </ul> <p>Book a free consultation</p>"},{"location":"build/#work-with-a-trusted-third-party-vendor","title":"Work with a trusted third-party vendor","text":"<p>The following vendors not only operate their own App Connect adapters, but they also welcome customers to talk to them about building adapters for CRMs not yet supported by App Connect. </p>"},{"location":"build/#gate6","title":"Gate6","text":"<p>Gate6 specializes in connecting your business applications, platforms, and data sources into cohesive Enterprise Solutions. Their dedicated System Integration Services team ensures seamless integration across infrastructure, technology architecture, applications, and data. With a focus on preserving legacy investments while embracing future innovations, they deliver end-to-end solutions tailored to your needs.</p>"},{"location":"build/#adapters","title":"Adapters","text":"<p>Gate6 offers an adapter for ServiceNow, developed in partnership with RingCentral. Licenses start at $10/month/user. </p> <ul> <li> <p></p> </li> <li></li> </ul> <p>Contact Gate6</p>"},{"location":"build/#loyally","title":"Loyally","text":"<p>Loyally's mission \"is to support customer service worldwide by giving them the right data at the right time. The help desk employee can help any customer quickly and easily because all systems and data are linked. We combine the strengths of the customer service systems by presenting customer information with one click in one screen. Easy, time-saving and cost-effective.\" \u2014 Jan Smulders, CEO</p> <p>Loyally supports a number of CRMs through App Connect. All adapters come with a free 30-day trial, and cost $12/user/month after.</p>"},{"location":"build/#adapters_1","title":"Adapters","text":"<p>Contact Loyally</p>"},{"location":"collect-logs/","title":"Tips for submitting bug reports and requesting help from the App Connect team","text":"<p>The most effective way for us to fix bugs is to reproduce them first. Error logs are essential for this process. If you're reading this page, thank you for helping us improve the application!</p> <p>To help us diagnose issues quickly, we need three types of information: console logs, network logs, and screen recordings.</p>"},{"location":"collect-logs/#console-logs","title":"Console Logs","text":"<p>Console logs contain detailed error messages and debugging information that help us identify the root cause of issues.</p> <p>Steps to collect console logs:</p> <ol> <li>If possible, manually trigger the error (if you can reproduce it consistently)</li> <li>Right-click on the App Connect extension and select \"Inspect\"</li> <li>Switch to the \"Console\" tab and copy all content</li> </ol> <p>Make sure to scroll up in the console to capture any earlier error messages that might be related to the issue.</p>"},{"location":"collect-logs/#network-logs","title":"Network Logs","text":"<p>Network logs show all HTTP requests and responses, helping us identify API-related issues or connectivity problems.</p> <p>Steps to collect network logs:</p> <ol> <li>Right-click on the App Connect extension and select \"Inspect\"</li> <li>Switch to the \"Network\" tab</li> <li>Trigger the error while recording is active</li> <li>Save the network log as a HAR file</li> </ol> <p></p>"},{"location":"collect-logs/#screen-recordings","title":"Screen Recordings","text":"<p>Screen recordings provide visual context and show exactly what happens on your screen when the error occurs. This helps us understand the user experience and identify UI-related issues.</p> <p>Recommended tools for screen recording:</p> <ul> <li>Loom - Creates shareable links automatically after recording</li> </ul> <p>What to include in your recording:</p> <ol> <li>Start recording before reproducing the issue</li> <li>Show the steps that lead to the error</li> <li>Include any error messages or unexpected behavior</li> <li>Keep the recording focused and concise (2-3 minutes is usually sufficient)</li> </ol> <p>If the issue is intermittent, try to record multiple attempts to show the inconsistent behavior.</p>"},{"location":"collect-logs/#submitting-your-logs","title":"Submitting Your Logs","text":"<p>Once you've collected the necessary information:</p> <ol> <li>Console logs - Copy and paste into your support ticket or bug report</li> <li>Network logs - Attach the HAR file to your report</li> <li>Screen recording - Share the video file or link (if using Loom)</li> </ol> <p>Additional helpful information:</p> <ul> <li>Browser version and operating system</li> <li>App Connect extension version</li> <li>CRM system being used</li> <li>Steps to reproduce the issue</li> <li>When the issue first started occurring</li> </ul> <p>The more details you provide, the faster we can identify and fix the problem. Thank you for your help!</p>"},{"location":"getting-started/","title":"Setup and installation","text":"<p>RingCentral's App Connect is a browser extension for Google Chrome and Microsoft Edge that is available in their respective stores. Installation is quick and easy if you are accustom to installing browser extensions. Click the web store button below to get started. </p> <p> </p> Install the extension now"},{"location":"getting-started/#installing-the-browser-plugin","title":"Installing the browser plugin","text":""},{"location":"getting-started/#google-chrome","title":"Google Chrome","text":"<p>App Connect is installed easily from the Google Chrome web store. Click the \"Add to Chrome\" button to install the extension instantly. Then, consult the instructions specific to your CRM.</p> <p></p>"},{"location":"getting-started/#microsoft-edge","title":"Microsoft Edge","text":"<p>App Connect is installed easily from the Microsoft Edge store as well. Click the \"Get\" button to install the extension instantly. Then, consult the instructions specific to your CRM.</p> <p></p>"},{"location":"getting-started/#connecting-to-your-crm","title":"Connecting to your CRM","text":"<p>The process of connecting App Connect to your CRM is more or less the same at a high-level. </p> <ol> <li>First, navigate to and login to your CRM. </li> <li> <p>While viewing a page in your CRM, open up the extension by clicking the App Connect badge.</p> <p></p> </li> <li> <p>Open the \"More\" tab and select \"Settings.\"</p> </li> <li>Scroll down to find your CRM, and click the \"Connect\" button. </li> <li>Follow the on-screen instructions for your CRM. </li> </ol> <p>Each CRM may have a slightly different approach in order to install the extension fully. Consult the CRM-specific documentation to setup and configure your CRM below.</p> <ul> <li>Connect and setup Bullhorn</li> <li>Connect and setup Clio</li> <li>Connect and setup Freshdesk</li> <li>Connect and setup Insightly</li> <li>Connect and setup GoHighLevel</li> <li>Connect and setup Google Sheets</li> <li>Connect and setup NetSuite</li> <li>Connect and setup Pipedrive</li> <li>Connect and setup Redtail CRM</li> <li>Connect and setup ServiceNow</li> </ul>"},{"location":"release-notes/","title":"Release notes","text":""},{"location":"release-notes/#169","title":"1.6.9","text":"<ul> <li>New: Server-side logging now supports multiple RingCentral users to be mapped under one CRM user</li> <li>Fix: Google Sheets cannot select existing sheet</li> <li>Fix: Server-side logging user mapping not working properly when running under multi-site scenarios</li> </ul>"},{"location":"release-notes/#168","title":"1.6.8:","text":"<ul> <li>New: For Clio, Insightly and NetSuite, a new link on number formatter setting page to its working logic explanation in user guide  </li> <li>Fix: Bullhorn server-side logging now returns warning message if api user password is wrong</li> <li>Fix: Server-side logging, if it's created by one admin, the other admin will be able to see its status</li> <li>Fix: Conference calls show wrong warning message</li> </ul>"},{"location":"release-notes/#167","title":"1.6.7:","text":"<ul> <li>New: Clio now supports image/video media link in message logs</li> <li>New: NetSuite salesOrder/opportunity association with native transaction field in phone call</li> <li>New: NetSuite now supports Vendor as new contact type</li> <li>Fix: Wrong default microphone device in some cases</li> <li>Fix: Bullhorn user mapping now gets the full user list</li> </ul>"},{"location":"release-notes/#166","title":"1.6.6:","text":"<ul> <li>New: Server-side call logging now supports user mapping configuration in the admin tab, allowing admin users to log calls on behalf of other users</li> <li>Fix: Redtail now properly displays middle names</li> <li>Fix: Server-side call logging now displays RingCentral user names in the correct order within log details</li> <li>Fix: Server-side call logging now shows the correct RingCentral user name instead of displaying the Caller ID</li> </ul>"},{"location":"release-notes/#165","title":"1.6.5:","text":"<ul> <li>New: Support call journey in call logging details with server side logging</li> <li>Better: Tabs orders updated</li> <li>Fix: Date/Time display issue</li> </ul>"},{"location":"release-notes/#164","title":"1.6.4:","text":"<ul> <li>New Add RingCentral user name and phone number in call details settings</li> <li>Better: Server-side call logging can now upload agent notes from the Chrome extension immediately after the call</li> <li>Better: More intuitive date time user setting format</li> <li>Fix: Return error message if server-side call logging is already created</li> </ul>"},{"location":"release-notes/#163","title":"1.6.3:","text":"<ul> <li>New: Date time format in call details settings</li> <li>Better: When doing server-side call logging, agent notes input from Chrome extension won't be overwritten by system</li> <li>Better: When doing server-side call logging, agent notes input from Chrome extension will be auto uploaded</li> <li>Fix: User report tab can now be toggled ON/OFF</li> <li>Fix: Time format now follows operating system setting </li> <li>Bullhorn: Server-side call logging will only use API user session if it's configured with username and password</li> </ul>"},{"location":"release-notes/#162","title":"1.6.2:","text":"<ul> <li>Fix: User session auth button now shows correct state</li> <li>Fix: Auto log is not disabled by admin-only server side logging anymore</li> <li>Fix: Playload too large issue</li> </ul>"},{"location":"release-notes/#161","title":"1.6.1:","text":"<ul> <li>New: Support to logging AI notes for no admin users in server side logging</li> <li>Fix: User report not showing number under dark theme</li> <li>Fix: User setting shows '(admin)' for all users</li> <li>Fix: User session refresh issue</li> </ul>"},{"location":"release-notes/#160","title":"1.6.0:","text":"<ul> <li>New: User report tab to see calls and SMS messages made within selected date range</li> <li>New: Clio option to see CLOSED matters (enable in User settings -&gt; Clio options)</li> <li>Fix: Pipedrive &amp; Netsuite user session issue</li> <li>Fix: Server side logging call duration stuck in 'pending' state</li> </ul>"},{"location":"release-notes/#158","title":"1.5.8:","text":"<ul> <li>Fix: Error on showing a window-size warning message</li> <li>Fix: Disconnected users shown as connected</li> <li>Fix: Redtail disposition issue</li> <li>Better: Every 5min, retroatively check recording links at pending state and update them to call logs</li> <li>Better: More stable user session</li> <li>Better: User settings sync message suppressed</li> <li>Better: Webpage embed (Click-to-dial and Quick-access-button) urls setting is renamed to 'Enabled domains' under General -&gt; Appearance</li> </ul>"},{"location":"release-notes/#157","title":"1.5.7:","text":"<ul> <li>New: Bullhorn admin users can submit API username and password to avoid Bullhorn session expired in server side logging</li> <li>New: Bullhorn server side logging supports to assign call notes to bullhorn user by RingCentral users' email mapping</li> <li>Better: Message logs within the CRM are now consistently displayed in chronological order</li> <li>Better: Added functionality to log Sales Orders and Opportunities in NetSuite with individual contacts in addition to customers.</li> <li>Fix: wrong alert message when user click enter button in contact searching page</li> <li>Fix: PipeDrive server side auto logging has 2 minutes delay</li> </ul>"},{"location":"release-notes/#156","title":"1.5.6:","text":"<ul> <li>New: Users can now log messages in Google Sheets. A new sheet titled \"Message Logs\" will be created for that.</li> <li>New: Ringtone can now be set up in Audio settings</li> <li>Better: Improve user settings presentation</li> <li>Fix: Bullhorn retroactive call log mistakenly putting 'pending note...' in Note Action</li> <li>Fix: AI notes are now attached when doing retroactive call logging</li> </ul>"},{"location":"release-notes/#155","title":"1.5.5:","text":"<ul> <li>New: Add Freskdesk and Gohighlevel </li> <li>New: Insightly has new setting in Insightly options to input custom phone field names</li> <li>Better: Google Sheets users will get notified with clearer information to set up the sheet</li> <li>Better: Click-to-dial enablement is now controled by user settings with 4 modes. (previous whitelist is deprecated)</li> <li>Fix: Google Sheets issue on undefined values in fields</li> <li>Fix: A bug on GoogleSheet getting call log if no note provide while editing call log</li> </ul>"},{"location":"release-notes/#154","title":"1.5.4","text":"<ul> <li>New: Clio now supports EU and CA</li> <li>New: Notification-level setting to control what types of notification would be shown</li> <li>Better: DisableRetroCallLogging in user setting is changed to EnableRetroCallLogging</li> <li>Better: Clio view log will go to contact communication tab</li> <li>Better: Contacts are shown with source icon</li> <li>Better: When Netsuite users log calls against contacts that have no company, a placeholder company will be assigned so to be able to associate the log with the contact</li> <li>Fix: An issue when opening contact page</li> <li>Fix: An issue when getting user settings</li> </ul>"},{"location":"release-notes/#153","title":"1.5.3","text":"<ul> <li>New: Quick access button and click-to-dial can be configured to be shown on other pages rather than CRM page. Set it up in user settings -&gt; general -&gt; allowed pages</li> <li>Better: Bullhorn Server-side call logging will use admin's role and try to find user role to assign Note to if user's Bullhorn name matches with user's RingCentral profile name </li> <li>Better: Clio and Insightly users can use # or * in alternative number formats</li> <li>Better: Bullhorn authorization is more stable now</li> <li>Better: NetSuite improved error message when attempting to log calls for contacts without an associated company. A clearer guidance is now provided when a contact is not linked to a company</li> <li>Fix: Bullhorn issue when creating a new Contact/Candidate/Lead</li> </ul>"},{"location":"release-notes/#152","title":"1.5.2","text":"<ul> <li>New: Contact search in call/message log page to add contact searched by name</li> <li>New: Pipedrive now supports Lead (need to log out and log back in to activate)</li> <li>New: Bullhorn users can now create Contact/Candidate/Lead with Status field</li> <li>New: Include tab visibility control in Admin settings</li> <li>New: NetSuite now supports selecting Opportunity in call/message log page</li> <li>Better: Bullhorn server-side logging will now try to create Note from admin role and assign to users (require users to connect to Bullhorn first)</li> <li>Better: If Bullhorn session becomes invalid, the extension will try to re-connect automatically</li> <li>Fix: Netsuite now truncates AI transcript if it's over 4000 words</li> </ul>"},{"location":"release-notes/#151","title":"1.5.1","text":"<ul> <li>New: Redtail now supports categories for notes. Default value can be set up in user/admin settings</li> <li>New: Clio now supports Australia region</li> <li>New: Call session id can now be included in call log notes. This can be turned ON in user settings</li> <li>Fix: Developer mode can be turned ON before connecting to CRM</li> <li>Fix: User setting now shows correct connect status right after open</li> <li>Fix: Bullhorn. If Note Action is empty, it'll now show 'pending note'</li> <li>Fix: Clio now won't show duplicated contacts</li> <li>Fix: User settings are not applied immediately after connecting to CRM</li> <li>Fix: Bullhorn now won't show converted Leads</li> <li>Fix: Call queue calls cannot be logged in a few cases</li> </ul>"},{"location":"release-notes/#150","title":"1.5.0","text":"<ul> <li>New: Fax log support</li> <li>New: If user is admin, '(Admin)' will be shown after user name on user setting page</li> <li>New: Clio now supports upload fax document files</li> <li>Fix: Redtail AI transcript setting turned OFF but still logging transcript</li> <li>Fix: Netsuite log failure when local computer time is ahead</li> <li>Fix: Pipedrive SMS logging not associated with deal</li> </ul>"},{"location":"release-notes/#142","title":"1.4.2","text":"<ul> <li>Fix: Show \"Cannot find call log\" and \"Cannot find contact\" even when contact is known</li> <li>Fix: Contact call-pop for known contact</li> </ul>"},{"location":"release-notes/#141","title":"1.4.1","text":"<ul> <li>New: Netsuite now supports contact match customization</li> <li>New: Server-side call logging support using user credentials if possbile</li> <li>New: Server-side call logging new selection for logging by Agent/user (if possible) OR Admin</li> <li>Change: \"Tabs\" setting is renamed as \"Customize tabs\" and is moved under \"General\" setting</li> <li>Change: Netsuite, Clio and Insightly -&gt; Number formats are moved to options setting</li> <li>Change: Relocate active call auto logging to call log event</li> <li>Change: Google Sheet file picker now has more polished UI</li> <li>Fix: Call queue not answered cannot be logged</li> <li>Fix: Authorization error and Note Action missing. If user does not have EDIT permission, instead of creating Note then update Note Action, one-time logging setting should be turned ON</li> </ul>"},{"location":"release-notes/#140","title":"1.4.0","text":"<ul> <li>New: One-time log in user setting to reduce Rate Limit issue and make logging more stable</li> <li>New: Server side call logging for all platforms</li> <li>New: Hide or show tabs in user settings</li> <li>New: Call queue presence setting</li> <li>New: Display voicemail transcript</li> <li>New: Google Sheets is now supported</li> <li>Better: Auto-logging happens right after call is connected (unless one-time log is ON)</li> <li>Better: Bullhorn authorization management</li> <li>Better: Multiple matched contact handling</li> <li>Fix: Clio should not return closed matters</li> <li>New: Matter description for Clio</li> </ul>"},{"location":"release-notes/#1310","title":"1.3.10","text":"<ul> <li>Fix: New users cannot save auto log setting</li> <li>Fix: Randomly dial previous number</li> </ul>"},{"location":"release-notes/#139","title":"1.3.9","text":"<ul> <li>New: User settings for ai related features (applicable accounts only)</li> <li>Better: Token refresh lock to reduce issues of invalid authorization</li> <li>Fix: Clio not able to log message issue</li> <li>Fix: Bullhorn log page bug of not having NoteAction field in a few cases</li> <li>Fix: Agent note title inserted in log description when there's no note</li> <li>Fix: Fix spamming of contact not found warning notification</li> <li>Fix: Fix contact match issue on multiple contact case</li> <li>Better: Clearer sign on case where auto call log setting disabled by Server Side Call Logging</li> <li>Better: User settings are kept after logout and auto-loaded after re-connect</li> <li>Better: Redtail timezone in user setting</li> </ul>"},{"location":"release-notes/#138","title":"1.3.8","text":"<ul> <li>Fix: Contact match timeout issue</li> <li>Fix: Auto log in user setting isn't set unless reloaded</li> <li>Bullhorn: User authorization validation issue</li> <li>Bullhorn: Server side logging now has AI summary and transcript</li> </ul>"},{"location":"release-notes/#137","title":"1.3.7","text":"<ul> <li>Fix: Timeout issue (mostly affecting call logging)</li> <li>Fix: Admin users now get admin setting right after login</li> <li>New: A new setting to turn ON/OFF retroactive call logging</li> </ul>"},{"location":"release-notes/#136","title":"1.3.6","text":"<ul> <li>Fix: Retro call logging now has recording link if applicable, instead of showing \"(pending...)\"</li> <li>Better: User settings are synced more frequently and stably</li> <li>Better: Some settings now have additional explanations of how it works</li> <li>Change: \"Call log details\" setting is now under \"Call and SMS logging\" </li> <li>New: Server side logging (BETA) has a trial mode now which only works for admin user's extension only instead of across the whole account</li> <li>Clio: \"Time entry\" is now always TRUE, only \"non-billable\" is tickable</li> <li>Redtail: You can now define your timezone offset value in authorization page. Re-auth if you already logged in</li> <li>Bullhorn: Authorization checker is updated to be more reliable and check if user's current session is valid</li> <li>Bullhorn: Appointment draft page now won't attach unintended logo</li> <li>NetSuite: Fix empty note won't create sales order issue</li> </ul>"},{"location":"release-notes/#135","title":"1.3.5","text":"<ul> <li>Upgrade: Error messages are more accurate</li> <li>Clio: Support user setting customization with logging time entry and non-billable default values</li> </ul>"},{"location":"release-notes/#134","title":"1.3.4","text":"<ul> <li>Upgrade: More accurate call info, including better tracking on call recording link save status</li> <li>New: Call info details can be selectively logged based on new toggles in user settings</li> <li>New: (RingCentral AI license only) Smart Notes to be enabled in user advanced settings</li> <li>Bullhorn(Beta): Server side logging (not to be used with client side auto logging)</li> <li>Bullhorn: Heartbeat mechanism for auth check. It reminds you if auth becomes invalid</li> <li>Bullhron: Lead support</li> <li>Fix: Admin users can see admin tab on first login now</li> </ul>"},{"location":"release-notes/#133","title":"1.3.3","text":"<ul> <li>Update: This extension's name is now changed to RingCentral App Connect</li> <li>Fix: (for Clio and Insightly user only) Overriding phone number format missing issue</li> <li>Fix: Admin icon in dark theme</li> <li>Fix: Auto pop up log page after call setting not working</li> <li>Fix: Inbound call contact pop not working</li> </ul>"},{"location":"release-notes/#132","title":"1.3.2","text":"<ul> <li>New: User setting inside call pop to control behavior of multiple matched contacts (disabled, all open, prompt to select)</li> <li>Fix: SMS logging issue</li> <li>Fix: Auto open extension now only opens when main page is opened</li> </ul>"},{"location":"release-notes/#131","title":"1.3.1","text":"<ul> <li>New: (Only for admin users) Admin tools. Admins have an extra tab in the extension to control end users' settings</li> <li>Fix: SMS logging date format </li> </ul>"},{"location":"release-notes/#120","title":"1.2.0","text":"<ul> <li>Fix: SMS log issue</li> <li>Fix: Missing recording link when doing retroactive auto call logging</li> <li>Bullhorn: New user setting to allow custom action note</li> </ul>"},{"location":"release-notes/#114","title":"1.1.4","text":"<ul> <li>Bullhorn: Fix default SMS note action issue</li> <li>Bullhorn: Fix message log timezone issue</li> </ul>"},{"location":"release-notes/#113","title":"1.1.3","text":"<ul> <li>Fix: Auto log association</li> <li>New: User setting in advanced features to turn on \"Auto open extension\" to open itself when opening a CRM page</li> <li>Redtail: Fix domain matching</li> </ul>"},{"location":"release-notes/#112","title":"1.1.2","text":"<ul> <li>Change: Auto pop up log page is not dependent on auto log setting anymore</li> </ul>"},{"location":"release-notes/#111","title":"1.1.1","text":"<ul> <li>Fix: Call/SMS logging issue</li> </ul>"},{"location":"release-notes/#110","title":"1.1.0","text":"<ul> <li>New: Show error page when CRM initialization fails</li> <li>Better: Use local cached contact info to avoid rate limit issue</li> <li>Better: Auto call log now supports retrospectively logging up to 100 unlogged records upon extension open</li> <li>Bullhorn: Default note action matching ignores case and spaces</li> <li>Bullhorn: Fix issue on user id confusion</li> </ul>"},{"location":"release-notes/#1010","title":"1.0.10","text":"<ul> <li>Change: Unreolved tab is removed now. To check out unlogged calls, there's now a filter on call history page</li> <li>Change: Updated notification UI.</li> <li>Fix: Numbers can now be copied from call page and call history page</li> <li>Fix: Click-to-dial now supports detecting phone numbers in input fields</li> <li>Fix: Click-to-dial now supports detecting extension numbers with format as eg. +13334445555#134</li> </ul>"},{"location":"release-notes/#109","title":"1.0.9","text":"<ul> <li>New: Call history page now has a search bar with filters</li> <li>New: Contact pop settings now support both inbound and outbound calls on different timings</li> <li>New: RingCentral team message is added as a new tab</li> </ul>"},{"location":"release-notes/#108","title":"1.0.8","text":"<ul> <li>New: More historical call records can be viewed from call history page with 'Load more' button</li> </ul>"},{"location":"release-notes/#107","title":"1.0.7","text":"<ul> <li>Fix: Incoming call pop contact page fixed</li> </ul>"},{"location":"release-notes/#106","title":"1.0.6","text":"<ul> <li>Better: User settings are organized in a better way </li> <li>New: Support page is added to user settings</li> <li>New: Community forum is created, can be accessed via support page -&gt; 'Get support'</li> <li>Clio&amp;Insightly: Number formatters are in user setting contact page now</li> </ul>"},{"location":"release-notes/#105","title":"1.0.5","text":"<ul> <li>Better: Bullhorn now has Voicemail default note action</li> <li>Fix: SMS template remembers orders after close</li> </ul>"},{"location":"release-notes/#104","title":"1.0.4","text":"<ul> <li>New: An About page in user settings to show info and helper links</li> <li>Better: Factor reset now also cleans up unresolved conflicts</li> <li>Better: SMS template supports drag and drop to arrange item orders</li> </ul>"},{"location":"release-notes/#103","title":"1.0.3","text":"<ul> <li>Better: Use SMS template that syncs with RingCentral App's SMS template</li> <li>New: Show notification when a call recording link is uploaded. Typically, a call recording link won't be immediately ready upon hang up. If call is logged right after, call recording will be uploaded when it's ready</li> </ul>"},{"location":"release-notes/#102","title":"1.0.2","text":"<ul> <li>Fix: SMS template cannot apply issue</li> <li>New: Factor reset button in user settings</li> </ul>"},{"location":"release-notes/#101","title":"1.0.1","text":"<ul> <li>Fix: RingCentral sign in issue where pop up sign in window is stuck at loading screen</li> <li>Better: Auto log conflict messages now contain more meaningful info</li> </ul> <p>Bullhorn</p> <ul> <li>Better: Default Note Action is now moved to User Settings where you can setup default actions. Can also work for auto log.</li> </ul>"},{"location":"release-notes/#100","title":"1.0.0","text":"<ul> <li>New: Auto log with conflict resolver</li> <li>New: Manual refersh contact info with button</li> <li>New: Audio volume controls</li> <li>Better: SMS messages are now logged as in conversations per day</li> <li>Better: New UIs</li> <li>Fix: Fax view and logging</li> <li>Fix: Open contact page from call history now only opens selected one if there are multiple matched contacts</li> <li>Fix: Copy meeting info</li> <li>Remove: Auto log with countdown</li> </ul> <p>New features video demo:</p>"},{"location":"release-notes/#087","title":"0.8.7","text":"<ul> <li>Fix: Call disposition not cleared if opening under a contact without disposition options</li> </ul>"},{"location":"release-notes/#086","title":"0.8.6","text":"<ul> <li>Fix: Incoming call contact pop up called twice issue</li> <li>Fix: Log event mixed up issue</li> </ul>"},{"location":"release-notes/#085","title":"0.8.5","text":"<ul> <li>Fix: Bullhorn and Redtail SMS message log issue</li> </ul>"},{"location":"release-notes/#084","title":"0.8.4","text":"<ul> <li>Fix: Pipedrive deal mismatch issue</li> </ul>"},{"location":"release-notes/#083","title":"0.8.3","text":"<ul> <li>Change: Updated logo icon</li> <li>Fix: SMS log issue in multiple contacts matched case</li> <li>Fix: In-call note button will disappear if user opens message conversation so to not cover SMS send button</li> <li>Bullhorn: Clear user session info when log out</li> </ul>"},{"location":"release-notes/#082","title":"0.8.2","text":"<ul> <li>Fix: Message conversation log page open issue</li> <li>Feature: Clicking log button for a logged call will open corresponding contact/log page</li> </ul>"},{"location":"release-notes/#081","title":"0.8.1","text":"<ul> <li>Fix: Sign up button now opens RingCentral plan page</li> </ul>"},{"location":"release-notes/#080","title":"0.8.0","text":"<ul> <li>Feature: Now support logging calls for unknown contacts. Users will see extra fields on call log page to fill in placeholder contact info and click \"Save\" button to create a new placeholder contact and then log the call against it</li> <li>Feature: Now support multiple matched contacts in call logging. Users can select target contact if it's a multiple match case</li> <li>New setting - \"Open contact web page after creating it\": Auto open placeholder contact page so that users can do further editing more easily</li> <li>UI: Polished the looking of some UIs</li> </ul>"},{"location":"support/","title":"Getting help with App Connect","text":"<ul> <li> <p> Search the Community</p> <p>Search for answers from the community knowledge base.</p> </li> <li> <p> Ask a question</p> <p>Ask the community for help - you will find all of us very helpful.</p> </li> </ul>"},{"location":"support/#common-issues","title":"Common issues","text":"<p>Always make sure you are running the latest version</p> <p>App Connect is frequently updated with fixes and feature enhancements. While the extension is updated automatically, you may need to restart your browser in order for those updates to take effect. </p>"},{"location":"support/#i-dont-see-a-connect-button-to-login-to-my-crm","title":"I don't see a \"Connect\" button to login to my CRM","text":"<p>In order to determine which CRM to connect to, you need to launch the extension while visiting and logged into your CRM application. App Connect will detect from the domain you are visiting to determine which CRM to prompt you to connect to. If you launch App Connect from any other domain, you will not see an Authorize or Connect button. </p>"},{"location":"support/#unable-to-find-contact","title":"Unable to find contact","text":"<p>One of the most common challenges arises from phone calls for which a corresponding contact record in the CRM cannot be found. However, you know for sure the contact exists.</p> <p>When this happens it is almost certainly related to a failed lookup of the contact based on the given phone number. A lookup can fail in some CRMs:</p> <ol> <li>If the phone number stored in the CRM does not EXACTLY match the phone number as seen in App Connect. This is due to limitations in the connected CRMs' APIs. </li> <li>If you have just created it and the CRM server usually doesn't reflect the change immediately. Some CRMs have refresh clock to update all changes every X seconds/minutes. So if it's just created and can be seen on CRM webpages, please wait for a couple of minutes and it should then be fetched to the extension.</li> </ol> <p>There are two ways to fix the issue:</p> <ol> <li> <p>Update the contact record's phone number so that it conforms to the E.164 standard. This will be the most reliable solution and the most performant. However, reformatting the phone numbers across a huge contact database may not be feasible or practical. </p> </li> <li> <p>Update the advanced configuration settings of App Connect to add the phone number formats commonly used by your company. App Connect will then search for contacts using each of the phone number formats stored with us. This solution is easier to deploy, but can sometimes introduce latencies as multiple API calls are needed to successfully find a contact. </p> </li> </ol>"},{"location":"support/#managing-software-updates","title":"Managing software updates","text":"<p>Updates to App Connect are installed automatically by Chrome and Edge when you restart your browser. You can see what version of App Connect is currently installed by navigating to the \"Manage extensions\" area of your browser, finding App Connect in your list of installed browser extensions, and clicking \"Show details.\" On the resulting page you can see the currently installed version. </p> <p></p> <p>To ensure you are actively running the most recent version, please restart your browser. </p>"},{"location":"support/#last-resort","title":"Last resort","text":"<p>In rare circumstances, due to voodoo and other supernatural forces, uninstalling and reinstalling the extension has been known to fix some problems. </p>"},{"location":"2.0/","title":"What's new in App Connect 2.0?","text":"<p>App Connect 2.0 is a turning point for the product as not only does it make it easier for developers to connect RingCentral to more CRMs, it contains many new features that will bring greater value to App Connects thousands of users. </p> <p>Here are some of the features new to App Connect 2.0. </p> <ul> <li> <p> Company-wide metrics</p> <p>Easily view your entire company\u2019s collective performance or drill down into any individual agent to drive coaching and success.</p> </li> <li> <p> Call monitoring</p> <p>Monitor agent presence, see parked and queued calls, and answer them directly from your view.</p> </li> <li> <p> Improved call park</p> <p>Select the exact location to park a call and automatically notify a colleague via text to ensure a seamless pickup every time.</p> </li> <li> <p> Call logging policies</p> <p>Create custom rules to automatically log calls that previously failed, eliminating manual effort and capturing every interaction.</p> </li> <li> <p> Call-down lists</p> <p>Create and prioritize lists of contacts to call later, viewing and executing your daily schedule with precision.</p> </li> <li> <p> Voicemail drop</p> <p>Pre-record perfect, on-message voicemails, drop them instantly, and move immediately to your next call.</p> </li> <li> <p> Enhanced phone number privacy</p> <p>Mask full customer phone numbers on your agents' displays to comply with strict internal privacy and security controls.</p> </li> <li> <p> New developer console</p> <p>Use the intuitive new console for one-click deployment, personalized instructions, and simplified sharing of your custom connectors.</p> </li> </ul>"},{"location":"2.0/#newly-supported-crms","title":"Newly supported CRMs","text":"<p>We have commitments from developers to build adapters to the following CRMs using the new developer framework. </p> <ul> <li> <p> RecruiterPM by RecruiterPM</p> </li> <li> <p> Service Titan by Gate6</p> </li> <li> <p> Smokeball by ion8</p> </li> <li> <p> Zoho by RingClone</p> </li> </ul> <p>RingCentral cannot make guarantees the services above will be supported. We are dependent upon third-party developers.</p>"},{"location":"2.0/#download-the-beta","title":"Download the beta","text":"<p>The App Connect 2.0 beta is being distributed as \"App Connect 1.7\" via an unlisted and private Chrome Store extension. </p> <p></p> <p>Things you should know</p> <ul> <li>Version 2.0 is completely backwards compatible with App Connect 1.6.x. If you experience a problem and wish to revert, you can do so safely without loss of data. </li> <li>We will continue to maintain App Connect 1.6.x, but only with bug fixes.</li> </ul>"},{"location":"2.0/#future-costs","title":"Future costs","text":"<p>We are committed to providing App Connect for free so that users can take advantage of its core functionality to connect RingCentral to popular CRMs. These features include:</p> <ul> <li>Contact lookups and matching</li> <li>Call-pop or \"Screen-pop\"</li> <li>Client-side call logging, both automated and manual</li> </ul> <p>Some third-party adapters may come at an additional cost</p> <p>App Connect is able to connect RingCentral to so many CRMs thanks to our developer community. Some developers have chosen to charge a fee to use their adapter to help fund their support and maintenance costs. RingCentral customers must establish an independent billing relationship with App Connect connector providers. </p>"},{"location":"2.0/download/","title":"Download App Connect 2.0 beta","text":"<p>The App Connect 2.0 beta is being distributed as \"App Connect 1.7\" via an unlisted and private Chrome Store extension. </p> <p></p> <p>Things you should know</p> <ul> <li>Version 2.0 is completely backwards compatible with App Connect 1.6.x. If you experience a problem and wish to revert, you can do so safely without loss of data. </li> <li>We will continue to maintain App Connect 1.6.x, but only with bug fixes.</li> </ul>"},{"location":"2.0/migration/","title":"Migration Guide","text":"<p>This guide covers migrating from version 1.6.x to 1.7.x, which introduces a new way to manage manifests. The primary changes are on the manifest management side - there is NO change required for server adapter (connector). </p> <p>New features can be found in this post.</p> <p>It's recommended to use a local test instance to try the migration process before applying changes on your production environment.</p> <p>The beta extension is not available on Chrome Web Store yet. Please contact Da Kong (da.kong@ringcentral.com) for a beta build.</p>"},{"location":"2.0/migration/#1-migrate-your-connector-manifest","title":"1. Migrate your connector manifest","text":"<ul> <li>Navigate to Developer Console and log in with your RingCentral account</li> <li>Enter the basic information for your developer profile</li> <li>Create a new connector</li> </ul> <p>While creating a connector, you can reuse your existing <code>manifest.json</code> file by following these steps:</p> <p>Switch to JSON Editor</p> <p></p> <p>Click the \"JSON\" button in the developer console to switch to the JSON editor mode.</p> <p>Copy Your Manifest</p> <p></p> <p>Copy the <code>CRM object</code> from your existing <code>manifest.json</code> file and paste it into the JSON editor.</p> <ul> <li>Click button on top right corner to switch back to form view - most fields will be automatically populated and let's resolve the remaining ones</li> <li>Copy your server URL to the <code>Connector server URL</code> field</li> </ul>"},{"location":"2.0/migration/#2-setup-page","title":"2. Setup Page","text":"<p>New connect flow</p> <p>In App Connect 2.0, users don't need to open extension from the CRM page to set it up. Instead, they can open the extension directly and choose an app profile to finish the setup. App profiles are fetched from Developer Console automatically based on your permissions.</p> <p>Configuring the CRM hostname in your connector profile</p> <p>There are 3 types of hostname configurations (using <code>mycrm.com</code> as an example):</p> <ul> <li>Fixed: For static URLs (e.g., <code>mycrm.com</code> for all requests)</li> <li>Selectable: For regional servers or predefined options (e.g., <code>mycrm.com/us</code>, <code>mycrm.com/au</code>)</li> <li>Tenant-specific: For user-provided URLs (e.g., <code>mySubDomain.mycrm.com</code>)</li> </ul> <p>To improve the user experience, you can add setup instructions on the configuration page to guide end users through the process.</p> <p>After you have made the changes to connector profile, save it and reload the extension, and you should be able to see the changes.</p> <p>To clear current CRM info, you can either go to extension option or do it in extension UIs under user settings -&gt; developer settings</p>"},{"location":"2.0/migration/#3-create-app-profile","title":"3. Create app profile","text":"<p>Scroll down and click <code>Create</code>. You now have a private connector that is only visible within your organization.</p>"},{"location":"2.0/migration/#4-database-changes","title":"4. Database changes","text":"<p>If you are using a new local test instance, this step can be skipped because database will be created from scratch which would automatically use the latest schema.</p> <p>Please run following command to add new columns in your database tables:</p> <pre><code>ALTER TABLE \"adminConfigs\"\n    ADD COLUMN \"adminAccessToken\" VARCHAR(512),\n    ADD COLUMN \"adminRefreshToken\" VARCHAR(512),\n    ADD COLUMN \"adminTokenExpiry\" DATE;\n</code></pre> <p>There's also a new table to create, but starting your server should automatically do that for you.</p>"},{"location":"2.0/migration/#5-use-npm-package","title":"5. Use npm package","text":"<ul> <li>Go to app profile in Developer Portal. Go to <code>Overview</code> tab, <code>Quick setup</code> section.</li> <li>Follow instructions to create a new project</li> <li>Find the latest beta version here: https://www.npmjs.com/package/@app-connect/core?activeTab=versions</li> <li>Run <code>npm i @app-connect/core@1.7.0-beta.2</code> (if there's newer one, use it instead)</li> <li>Copy your adapter code over to the new project. Install necessary npm packages that are used in your adapter</li> <li>Spin up your server (make sure Developer Portal connector profile server url is the same as your server's)</li> </ul>"},{"location":"2.0/migration/#6-install-the-beta-extension","title":"6. Install the beta extension","text":"<p>Install the extension from Chrome Web Store. This will be used as a completely different extension from the existing one but talking to the same server.</p> <p>To connect with the new client:</p> <ol> <li>Logout from the old extension and disable it in chrome://extensions/</li> <li>Open the new extension</li> <li>Log in with your RingCentral account</li> <li>You'll see a list of available connectors, including both public connectors and the private one you just created</li> </ol> <p>1.7.x is backward compatible. If your users are using 1.6.x extension client, they can still talk to your 1.7.x server.</p>"},{"location":"2.0/migration/#7-test-your-setup","title":"7. Test Your Setup","text":"<p>That's it! Congratulations on completing the migration. </p> <p>For backward compatibility, please make sure if anything is changed on your manifest, sync that change from online to local (OR local to online). Because online manifest is served for BETA (1.7.x) users while server local manifest file is served for non-BETA (1.6.x) users</p> <p>Give your connector a try and feel free to contact da.kong@ringcentral.com if you encounter any issues.</p>"},{"location":"2.0/migration/#extra","title":"Extra","text":""},{"location":"2.0/migration/#release-note","title":"Release note","text":"<p>If you are using <code>releaseNotes.json</code> to deliver information to end users, please note that it's been taken care of. Here's how:</p> <ol> <li>Users with 1.6.x extension would only get release notes of 1.6.y (y &gt; x).</li> <li>Users with 1.7.x extension would get the latest release notes, which would be 1.7.y (y &gt; x)</li> </ol> <p>Therefore you'll be able to add releate notes separatedly.</p>"},{"location":"crm/","title":"CRMs supported by App Connect","text":"<p>RingCentral's App Connect for RingEX provides support for a number of different CRMs including the list below. It is also a developer framework that allows companies to quickly and easily build integrations with more niche or proprietary CRMs at a fraction of the cost. </p>"},{"location":"crm/#supported-crms","title":"Supported CRMs","text":"<ul> <li> Bullhorn</li> <li> Clio</li> <li> Freshdesk by Loyally</li> <li> Google Sheets</li> <li> HighLevel by Loyally</li> <li> Insightly</li> <li> NetSuite</li> <li> Pipedrive</li> <li> Redtail CRM</li> <li> ServiceNow by Gate6</li> </ul>"},{"location":"crm/#dont-see-your-crm-listed","title":"Don't see your CRM listed?","text":"<p>If you don't see your CRM listed, contact us via our community and we can help get you in touch with qualified vendors or RingCentral Professional Services to help you build a solution that fits your needs.</p>"},{"location":"crm/#are-you-a-developer-build-support-for-your-own-crm","title":"Are you a developer? Build support for your own CRM","text":"<p>App Connect is itself an open source framework that can be used by developers to create a custom CRM integration more easily than building one from scratch. </p>"},{"location":"crm/bullhorn/","title":"Setting up App Connect for Bullhorn","text":"<p>Bullhorn is the global leader in software for the staffing industry. More than 10,000 companies rely on Bullhorn\u2019s cloud-based platform to power their staffing processes from start to finish. </p> <p>RingCentral's integration with Bullhorn helps streamline communications with candidates, and helps staffing agents better support candidates through the entire recruitment pipeline by helping to manage and store communication history for all candidates. </p>"},{"location":"crm/bullhorn/#install-the-extension","title":"Install the extension","text":"<p>If you have not already done so, begin by installing App Connect from the Chrome web store. </p>"},{"location":"crm/bullhorn/#setup-the-extension","title":"Setup the extension","text":"<p>Once the extension has been installed, follow these steps to setup and configure the extension for Bullhorn. </p> <ol> <li> <p>Login to Bullhorn.</p> </li> <li> <p>While visiting a Bullhorn application page, click the quick access badge to open or bring the dialer to the foreground. </p> </li> <li> <p>Navigate to the Settings screen in App Connect, and find the option labeled \"Bullhorn.\"</p> <p></p> </li> <li> <p>Click the \"Connect\" button. </p> </li> <li> <p>A window will be opened prompting you to enter your Bullhorn username and password. Login to Bullhorn. </p> </li> </ol> <p>When you login successfully, the Chrome extension will automatically update to show you are connected to Bullhorn. If you are connected, the button next to Bullhorn will say, \"logout\".</p> <p>And with that, you will be connected to Bullhorn and ready to begin using the integration. </p>"},{"location":"crm/bullhorn/#auto-log-with-default-note-action-preference-setup","title":"Auto log with default Note Action preference setup","text":"<p>In Settings, there's a \"Bullhorn options\" entry button.</p> <p></p> <p>We provide four options to choose from, corresponding to the different communications that can be logged in Bullhorn via App Connect. The values you enter here will be used in two different ways:</p> <ol> <li>When logging calls automatically, these note actions will be used when creating the associated notes. </li> <li>When logging calls manually, these note actions will determine which action is selected by default in the logging screen. </li> </ol> <p></p>"},{"location":"crm/bullhorn/#editing-the-enumerated-list-of-possible-note-actions","title":"Editing the enumerated list of possible note actions","text":"<p>As an admin, navigate inside of Bullhorn to Admin &gt; System Settings. Then filter the list of settings for \"commentActionList.\" There you should fine a comma-delimited list of values that determine the possible/allowed note actions. </p> <p></p>"},{"location":"crm/bullhorn/#placeholder-companies-when-creating-contacts","title":"Placeholder companies when creating contacts","text":"<p>Bullhorn requires that every contact be associated with a company. When logging calls for new contacts, App Connect will first look for a company called, \"Placeholder company.\" If a company with that name is not found, one will be created. Then the contact will be associated with that company record. It is the intent that once the call is complete that an agent do one of the following:</p> <ol> <li>Edit the company called \"Placeholder Company\" with a more appropriate name and with additional details.</li> <li>Edit the contact to associate it with a more appropriate company stored in Bullhorn. </li> </ol> <p>In this way, App Connect ensures that all contacts created by it conform to the requirements of Bullhorn so that all contact records are complete. </p>"},{"location":"crm/bullhorn/#screen-pop-for-multiple-contacts","title":"Screen-pop for multiple contacts","text":"<p>A feature of App Connect is to allow a user to open all matched contacts when they receive a phone call. However, Bullhorn's API does not support this feature. Therefore in App Connect, we can only support the option \"Prompt to select\" under Call-pop settings. </p>"},{"location":"crm/bullhorn/#bullhorn-and-server-side-call-logging","title":"Bullhorn and server-side call logging","text":"<p>Coming in App Connect 1.5.7</p> <p>To ensure seamless and continuous server-side logging within the application, even if your direct Bullhorn login session expires, it is essential to configure the appropriate Bullhorn API username and password.</p> <p>These API credentials serve a critical role in allowing the application to authenticate with Bullhorn's services programmatically. This enables the system to maintain a persistent connection for logging purposes, independent of your interactive user session.</p>"},{"location":"crm/bullhorn/#required-permissions-for-the-api-user","title":"Required Permissions for the API User","text":"<p>The Bullhorn API user associated with these credentials must be granted specific permissions to ensure all necessary data can be accessed and logged. These permissions include:</p> <ul> <li>Access to all contacts: This allows the application to retrieve and log information related to all contact records within your Bullhorn instance.</li> <li>Create/Update/Assign notes: This permission is vital for logging activities related to notes, including their creation, any modifications, and assignments.</li> </ul> <p>Without these permissions, the server-side logging functionality may be incomplete or fail to capture critical event data. It is recommended to create a dedicated API user in Bullhorn with only the necessary permissions to adhere to the principle of least privilege.</p> <p></p> <p>Important: Password Changes</p> <p>Note that Bullhorn may require users to update their passwords periodically for security purposes. If you change the password for your Bullhorn API user, you must also update the password in the App Connect extension settings.</p>"},{"location":"crm/clio/","title":"Setting up App Connect for Clio","text":"<p>Clio provides legal client relationship management software to help law firms manage business development functions such as client intake, client scheduling and follow-up, revenue tracking, and more. In short, Clio addresses the client intake process of turning potential new clients into retained clients.</p> <p>RingCentral's integration with Clio helps streamline communications with clients, and helps staff servicing clients to better support them through the entire intake process by helping to manage and store communication history with clients, report on billable time and more.</p>"},{"location":"crm/clio/#install-the-extension","title":"Install the extension","text":"<p>If you have not already done so, begin by installing App Connect from the Chrome web store. </p>"},{"location":"crm/clio/#setup-the-extension","title":"Setup the extension","text":"<p>Once the extension has been installed, follow these steps to setup and configure the extension for Clio. </p> <ol> <li> <p>Login to Clio.</p> </li> <li> <p>While visiting a Clio application page, click the quick access button to bring the dialer to the foreground. </p> </li> <li> <p>Navigate to the Settings screen in App Connect, and find the option labeled \"Clio.\"</p> <p></p> </li> <li> <p>Click the \"Connect\" button. </p> </li> <li> <p>A window will be opened prompting you to enter your Clio username and password. Login to Clio. </p> </li> </ol> <p>When you login successfully, the Chrome extension will automatically update to show you are connected to Clio. If you are connected, the button next to Clio will say, \"logout\".</p> <p>And with that, you will be connected to Clio and ready to begin using the integration. </p>"},{"location":"crm/clio/#setting-up-phone-number-matching-to-properly-match-contacts","title":"Setting up phone number matching to properly match contacts","text":"<p>Clio's contact lookup method is very strict. As a result, if the phone numbers in Clio are not stored using the E.164 standard, e.g. <code>+1##########</code>, then App Connect will fail to find the contact record for call logging and call pop. </p> <p>To address this, short of reformatting every phone number stored in Clio, is to go to Phone number format alternatives under the \"Call pop\" settings and set the phone number formats to conform with the conventions used by your practice. </p> <p></p> <p>Navigate to App Connect's Contacts settings page and enter in the phone formats used by your practice. Define a format by using an asterix \"*\" in place of any digit/number. Any other character used in the format string will be interpretted literally. </p> <p>Let's look at a few examples. First, consider the following format string:</p> <pre><code>(***) ***-****\n</code></pre> Phone number Does it match? (555) 123-2334 Yes (555)123-2334 No 1 (555) 123-2334 No 555-123-2334 No <p>Now, let's look at one more example. Consider the format string:</p> <pre><code>1 (***) ***-****\n</code></pre> Phone number Does it match? 1 (555) 123-2334 Yes +1 (555) 123-2334 No (555) 123-2334 No 555-123-2334 No <p>We have found the following formats are commonly used among customers (feel free to copy and paste them into advanced settings):</p> <ul> <li><code>(***) ***-****</code></li> <li><code>***-***-****</code></li> <li><code>***.***.****</code></li> <li><code>1 (***) ***-****</code></li> </ul> <p>Select or enter up to three different formats used by your practice and click \"Save.\" </p> <p> </p> Phone number formats after being properly filled in. <p>The E.164 format is used by default. You do not need to specify the format <code>1**********</code>.</p> <p>Making this change will improve your experience with the extension considerably. Here are a few things to bear in mind:</p> <ul> <li>Every phone number format you add results in another search request to Clio, which could lead to performance issues.</li> <li>Searches are performed using each of the formats in order. The first phone number that is found will stop the search process. So place the formats that are most likely to yield results first in order. </li> </ul>"},{"location":"crm/clio/#improving-contact-lookup-speeds","title":"Improving contact lookup speeds","text":"<p>Ideally, phone numbers in Clio would all be stored using the E.164 format standard. This would eliminate the need to resort to searching using different formats. Therefore, one thing you can do within your company is socialise with Clio users the value of storing phone numbers in a specific format. </p> <p>Use Zapier to automatically format phone numbers</p> <p>Zapier is a great automation tool that can help your organization reformat phone numbers to E.164 for all new contacts moving forward. </p> <p>Finally, you can improve performance by going back to existing contacts and updating their phone numbers. This can be a laborious process, but will yield the best results in the long term. </p>"},{"location":"crm/freshdesk/","title":"App Connect and Freshdesk","text":"<p>Freshdesk, the online customer engagement solution from Freshworks, lets you streamline your company's customer support using the customer service software and helps you to efficiently manage your customers as you scale. </p> <p>RingCentral supports Freshdesk via a trusted third-party vendor and Premium Partner Loyally, whose experience with Freshdesk began with their popular custom-built Freshdesk integration. </p> <p>As a third-party integration, the Freshdesk integration comes at an additional cost</p>"},{"location":"crm/freshdesk/#install-the-extension","title":"Install the extension","text":"<p>If you have not already done so, begin by installing App Connect from the Chrome web store. </p>"},{"location":"crm/freshdesk/#setup-the-extension","title":"Setup the extension","text":"<p>Once the App Connect extension has been installed, follow these steps to setup and configure the extension for Freshdesk. </p> <ol> <li> <p>Login to Freshdesk.</p> </li> <li> <p>While visiting a Freshdesk application page, click the quick access button to bring the dialer to the foreground. </p> </li> <li> <p>Navigate to the Settings screen in App Connect, and find the option labeled \"Freshdesk.\"</p> <p></p> </li> <li> <p>Click the \"Connect\" button. </p> </li> <li> <p>A window will be opened prompting you to enter your Freshdesk username and password. Login to Freshdesk. </p> </li> </ol> <p>When you login successfully, the extension will automatically update to show you are connected to Freshdesk. If you are connected, the button next to Freshdesk will say, \"logout\".</p> <p>And with that, you will be connected to Freshdesk and ready to begin using the integration. </p>"},{"location":"crm/gohighlevel/","title":"App Connect and HighLevel","text":"<p>HighLevel is the all-in-one sales &amp; marketing platform that agencies can white-label and resell to their clients. RingCentral supports HighLevel via a trusted third-party vendor and Premium Partner Loyally.</p> <p>As a third-party integration, the HighLevel integration comes at an additional cost</p> <p>The HighLevel adapter is currently in beta. If you experience any diffculty, please reach out via the App Connect community</p>"},{"location":"crm/gohighlevel/#sign-up-for-the-beta","title":"Sign-up for the Beta","text":"<p>The GoHighLevel integration will be a paid integration. For that reason, access to the beta currently requires people to sign-up with Loyally. Please contact Loyally to join the beta now. </p> <p>Sign-up for HighLevel Beta</p>"},{"location":"crm/gohighlevel/#install-the-extension","title":"Install the extension","text":"<p>If you have not already done so, begin by installing App Connect from the Chrome web store. </p>"},{"location":"crm/gohighlevel/#setup-the-extension","title":"Setup the extension","text":"<p>Once the App Connect extension has been installed, follow these steps to setup and configure the extension for Freshdesk. </p> <ol> <li> <p>Login to HighLevel.</p> </li> <li> <p>While visiting a HighLevel application page, click the quick access button to bring the dialer to the foreground. </p> </li> <li> <p>Navigate to the Settings screen in App Connect, and find the option labeled \"Freshdesk.\"</p> <p></p> </li> <li> <p>Click the \"Connect\" button. </p> </li> <li> <p>A window will be opened to initiate the login and authorization process. Conplete the authorization process.</p> </li> </ol> <p>Multi-step authorization flow</p> <p>HighLevel's authorization flow for App Connect is a multi-step process in which a number of windows are opened. This can lead to other browser windows being hidden on your desktop. Some of these windows are required for authorization. Make sure you complete each step until you see a positive indication from HighLevel that you have completed the process. </p> <p>When you login successfully, the extension will automatically update to show you are connected to HighLevel. If you are connected, the button next to Freshdesk will say, \"logout\".</p> <p>And with that, you will be connected to HighLevel and ready to begin using the integration. </p>"},{"location":"crm/gohighlevel/#using-the-gohighlevel-integration","title":"Using the GoHighLevel integration","text":""},{"location":"crm/gohighlevel/#manual-call-logging","title":"Manual call logging","text":""},{"location":"crm/gohighlevel/#automated-call-logging","title":"Automated call logging","text":""},{"location":"crm/google-sheets/","title":"Setting up App Connect for Google Sheets","text":"<p>Google Sheets is the CRM everyone in the world has access to. Is it a highly specialized CRM? No. But it is free, and in the right hands can be a flexible and invaluable tool. </p> <p>RingCentral's integration with Google Sheets track selected communications and contacts with whom you do business with.</p>"},{"location":"crm/google-sheets/#install-the-extension","title":"Install the extension","text":"<p>If you have not already done so, begin by installing App Connect from the Chrome web store or Microsoft Edge store. </p>"},{"location":"crm/google-sheets/#setup-the-extension","title":"Setup the extension","text":"<p>Once the extension has been installed, follow these steps to setup and configure the extension for Google Sheets. </p> <ol> <li> <p>Connect to Google.</p> </li> <li> <p>While visiting a Google Docs application page, click the quick access badge to open or bring the dialer to the foreground. </p> </li> <li> <p>Navigate to the Settings screen in App Connect, and find the option labeled \"Google Sheets.\"</p> <p></p> </li> <li> <p>Click the \"Connect\" button. </p> </li> <li> <p>A window will be opened prompting you to enter your Google username and password. Login to Google. </p> </li> </ol> <p>When you login successfully, App Connect will automatically update to show you are connected to Google Sheets. If you are connected, the button next to Google Sheets will say, \"logout\".</p> <ol> <li>Finally, you need to navigate to \"Google Sheets options\" and create a Google Sheet into which calls and contacts will be logged. Navigate to \"Google Sheets options\" and click \"Create Google Sheet.\"</li> </ol> <p>And with that, you will be connected to Google Sheets and ready to begin using the integration. </p>"},{"location":"crm/google-sheets/#creating-a-google-sheet-to-log-to","title":"Creating a Google Sheet to log to","text":"<p>To begin logging, you need to create or select a Google sheet to log communications and contacts to. Navigate to \"Google Sheets options\" under Settings, enter a name for the file, and click \"Create new sheet.\"</p> <p>You are then welcome to share the Google Sheet created by App Connect with your co-workers. Your co-workers then would link to an existing sheet rather than create their own. </p> <p> </p> How to create a Google Sheet to log to"},{"location":"crm/google-sheets/#linking-to-an-existing-google-sheet","title":"Linking to an existing Google Sheet","text":"<p>You may also select a Google sheet to log communications to. This is especially helpful if you have multiple people within the company all logging calls to a shared sheet. To link to an existing sheet, users should click the button \"Select existing sheet.\" Doing so will launch the Google sheet selector modal dialog. Select the sheet and click Continue. </p> <p> </p> Selecting the Google Sheet to log communications to"},{"location":"crm/insightly/","title":"Setting up App Connect for Insightly","text":"<p>Growing businesses across the globe rely on Insightly to help them build lasting customer relationships. Insightly delivers a platform that can take businesses to the next level: a powerful CRM, plus marketing automation, a customer service app, and an integration tool.</p> <p>RingCentral's integration with Insightly helps streamline communications between customers, and helps sales staff to better support them through their entire lifecycle by helping to manage and store communication history with customers, capture important communication metadata and more.</p>"},{"location":"crm/insightly/#install-the-extension","title":"Install the extension","text":"<p>If you have not already done so, begin by installing App Connect from the Chrome web store. </p>"},{"location":"crm/insightly/#setup-the-extension","title":"Setup the extension","text":"<p>Once the extension has been installed, follow these steps to setup and configure the extension for Insightly. </p> <ol> <li> <p>Login to Insightly.</p> </li> <li> <p>While visiting an Insightly application page, click the quick access button to bring the dialer to the foreground. </p> </li> <li> <p>Navigate to the Settings screen in App Connect, and find the option labeled \"Insightly.\"</p> <p></p> </li> <li> <p>Click the \"Connect\" button. </p> </li> <li> <p>A window will be opened prompting you to enter numerous attributes from Insightly, including:</p> <ul> <li>API key</li> <li>API URL</li> </ul> <p></p> </li> <li> <p>Click the \"Get API Key\" button and the extension will attempt to retrieve these values for you. You may also enter these values manually. In Insightly, navigate to User Settings from the pull down menu in the upper-righthand corner. Scroll down until you see a section labeled \"API.\" Copy and paste your API key and API URL into the corresponding fields. </p> <p></p> </li> </ol> <p>When you login successfully, the Chrome extension will automatically update to show you are connected to Insightly. If you are connected, the button next to Insightly will say, \"logout\".</p> <p>And with that, you will be connected to Insightly and ready to begin using the integration. </p>"},{"location":"crm/insightly/#setting-up-phone-number-matching-to-properly-match-contacts","title":"Setting up phone number matching to properly match contacts","text":"<p>Insightly's contact lookup method is very strict. As a result, if the phone numbers in Insightly are not stored using the E.164 standard, e.g. <code>+1##########</code>, then App Connect will fail to find the contact record for call logging and call pop. </p> <p>To address this, short of reformatting every phone number stored in Insightly, is to go to Phone number format alternatives under the \"Contacts\" settings and set the phone number formats to conform with the conventions used by your company. </p> <p></p> <p>Navigate to App Connect's Contacts settings page and enter in the phone formats used by your company. Define a format by using an asterix \"*\" in place of any digit/number. Any other character used in the format string will be interpretted literally. </p> <p>Let's look at a few examples. First, consider the following format string:</p> <pre><code>(***) ***-****\n</code></pre> Phone number Does it match? (555) 123-2334 Yes (555)123-2334 No 1 (555) 123-2334 No 555-123-2334 No <p>Now, let's look at one more example. Consider the format string:</p> <pre><code>1 (***) ***-****\n</code></pre> Phone number Does it match? 1 (555) 123-2334 Yes +1 (555) 123-2334 No (555) 123-2334 No 555-123-2334 No <p>We have found the following formats are commonly used among customers (feel free to copy and paste them into advanced settings):</p> <ul> <li><code>(***) ***-****</code></li> <li><code>***-***-****</code></li> <li><code>***.***.****</code></li> <li><code>1 (***) ***-****</code></li> </ul> <p>Select or enter up to three different formats used by your company and click \"Save.\" </p> <p> </p> Phone number formats after being properly filled in. <p>The E.164 format is used by default. You do not need to specify the format <code>1**********</code>.</p> <p>Making this change will improve your experience with the extension considerably. Here are a few things to bear in mind:</p> <ul> <li>Every phone number format you add results in another search request to Insightly, which could lead to performance issues.</li> <li>Searches are performed using each of the formats in order. The first phone number that is found will stop the search process. So place the formats that are most likely to yield results first in order. </li> </ul>"},{"location":"crm/netsuite/","title":"Setting up App Connect for NetSuite","text":"<p>NetSuite is a cloud-based business management software that helps organizations manage their financials, operations, and customer relationships.</p> <p>RingCentral's integration with NetSuite helps streamline communications with contacts, and helps staffing agents better support contacts through the entire sales order pipeline by helping to manage and store communication history for all contacts. </p> <p>Prerequisites</p> <ul> <li>The current version of the NetSuite integration requires NetSuite version 2024.1 or later. </li> <li>NetSuite users must have REST Web Services enabled. </li> <li>NetSuite OneWorld license holders will need to manually add the \"Subsidiaries\" permission to the role they use to connect to NetSuite. </li> </ul>"},{"location":"crm/netsuite/#install-the-suiteapp","title":"Install the SuiteApp","text":"<p>To begin using the NetSuite integration, users will first need to do the following:</p> <ul> <li>Login to NetSuite, then visit the RingCentral Suite App page, or:</li> <li>Click on the \"SuiteApps\" tab if your role gives you access to it</li> <li>Search for \"RingCentral\" in the directory</li> <li>Click \"RingCentral App Connect\" in the search results</li> <li>Click the \"Install\" button found in the upper right hand corner of the page</li> </ul> <p>If you see, \"Not compatible\" in place of an \"Install\" button, then you must be running an older version of NetSuite. You will need to upgrade to 2024.2 or later. </p> <p>Installing the app from the SuiteApp marketplace is a necessary step prior to installing the Chrome extension discussed below. </p>"},{"location":"crm/netsuite/#setup-roles-and-permissions-in-netsuite","title":"Setup roles and permissions in NetSuite","text":"<p>Upon installation of the SuiteApp, a role will be created automatically within your account called \"RingCentral App Connect.\" This role has been specially tuned to contain the bare minimum number access level to fully operate the Chrome extension. You can see a detailed list of permissions below if you would like to incorporate these permissions into a custom role of your own. </p>"},{"location":"crm/netsuite/#netsuite-oneworld-instructions","title":"NetSuite OneWorld instructions","text":"<p>Upon installing the SuiteApp from the Marketplace, a new custom role named \"RingCentral App Connect\" will be automatically created in your account. If you are a OneWorld license holder, you will need to take these additional steps.</p> <ol> <li>Clone the \"RingCentral App Connect\" role by selecting the \"Customize\" option.</li> <li>While cloning, add the permission \"List -&gt; Subsidiaries\" to the cloned role.</li> </ol> <p>Use this cloned role when logging into and connecting App Connect to NetSuite.</p> <p>The role is created by SuiteApp locked by default and cannot be edited. If you wish to make modifications, you may duplicate the role by clicking on 'Customize.'</p>"},{"location":"crm/netsuite/#turn-on-rest-web-services","title":"Turn on REST web services","text":"<p>REST Web Services is default to be invisible. We'll need to turn on the feature so to make it selectable for roles. Here's how to do it:</p> <ol> <li>From NetSuite homepage, go to Setup -&gt; Company -&gt; Enable Features</li> <li>Go to sub-tab, \"SuiteCloud\"</li> <li>Tick on \"REST Web Services\" and save</li> </ol>"},{"location":"crm/netsuite/#create-role-with-required-permissions","title":"Create role with required permissions","text":"<p>We recommend using the \"RingCentral App Connect\" role created for you when you install the SuiteApp. However, if you would like to create a custom role that includes the permissions necessary to allow this extension to operate fully, consult the table below. </p> Category Permission Level Lists Contacts Full Lists Customers Full Lists Phone Calls Full Lists Subsidiaries View  (OneWorld users only) Lists Notes Tab Full Lists Documents and Files Full Reports SuiteAnalytics Workbook Edit Setup Log in using OAuth 2.0 Access Tokens Full Setup REST Web Services Full Setup User Access Tokens Full Transactions Sales Order Full Transactions Opportunity Full Transactions Find Transaction View"},{"location":"crm/netsuite/#install-the-chromeedge-extension","title":"Install the Chrome/Edge extension","text":"<p>If you have not already done so, begin by installing App Connect from the Chrome web store. </p>"},{"location":"crm/netsuite/#setup-the-extension","title":"Setup the extension","text":"<p>Once the extension has been installed, follow these steps to setup and configure the extension for NetSuite. </p> <ol> <li> <p>Login to NetSuite.</p> </li> <li> <p>While visiting a NetSuite web page, click the quick access button to bring the dialer to the foreground. </p> </li> <li> <p>Navigate to the Settings screen in App Connect, and find the option labeled \"Netsuite\".</p> <p></p> </li> <li> <p>Click the \"Connect\" button. </p> </li> <li> <p>A window will be opened prompting you to allow OAuth scopes. Allow it.</p> </li> </ol> <p>When you login successfully, the Chrome extension will automatically update to show you are connected to NetSuite. If you are connected, the button next to NetSuite will say, \"logout\".</p> <p>And with that, you will be connected to NetSuite and ready to begin using the integration. </p>"},{"location":"crm/netsuite/#placeholder-companies-when-creating-contacts","title":"Placeholder companies when creating contacts","text":"<p>NetSuite requires that every contact be associated with a company. When logging calls for new contacts, App Connect will first look for a company called, \"Placeholder company.\" If a company with that name is not found, one will be created. Then the contact will be associated with that company record. It is the intent that once the call is complete that an agent do one of the following:</p> <ol> <li>Edit the company called \"Placeholder Company\" with a more appropriate name and with additional details.</li> <li>Edit the contact to associate it with a more appropriate company stored in NetSuite. </li> </ol> <p>In this way, App Connect ensures that all contacts created by it conform to the requirements of NetSuite so that all contact records are complete. </p>"},{"location":"crm/netsuite/#contact-matching-via-phone-numbers","title":"Contact matching via phone numbers","text":"<p>When attempting to find and match a phone call to a customer or contact record, the NetSuite integration searches the following fields:</p> <ul> <li>Main Phone</li> <li>Home Phone</li> <li>Mobile Phone</li> <li>Office Phone</li> </ul> <p>In addition, App Connect will search the \"Office Phone\" field for contacts, and the \"Alternate Phone\" field for customer entities. </p> <p>App Connect does not search custom phone fields.</p>"},{"location":"crm/netsuite/#optimizing-contact-matching-performance","title":"Optimizing contact matching performance","text":"<p>If you are experiencing a timeout issue during contact search, you can follow the steps below to optimize the search process. First navigate to Settings \u2192 NetSuite Options, then:</p> <ul> <li>Under \"Phone fields to search,\" limit your search to only the fields you use.</li> <li>Under \"Entities to search,\" limit your search to only those object types you want returned in your results.</li> <li>Disable  \"Sales Order logging\" to prevents calls from being logged against sales orders.</li> </ul> <p></p>"},{"location":"crm/netsuite/#concurrency-limits","title":"Concurrency limits","text":"<p>If you receive an error indicating, \"concurrency limit exceeded,\" then you may need to purchase SuiteCloud Plus add-on module. This is what NetSuite support shared:</p> <p>Depending on the customers\u2019 service tier level, the concurrency limit is from 5 (shared and tier 3) to 20 (tier 0). If additional processor/concurrency is required, the customer could purchase the SuiteCloud Plus add on module, which will include an additional 10 units per SuiteCloud plus license.</p> <p>Please refer to the Concurrency Governance Cheat Sheet found in the SDN SAFE Guide for more details.</p>"},{"location":"crm/pipedrive/","title":"Setting up App Connect for Pipedrive","text":"<p>Pipedrive is designed to help small businesses grow. For over ten years, Pipedrive has been committed to building the best CRM \u2013 a CRM by and for salespeople. The result is an easy-to-use, effective sales tool that centralizes your data, helping you visualize your entire sales process and win more deals.</p> <p>RingCentral's integration with Pipedrive helps streamline communications between customers, and helps sales staff to better support them through their entire lifecycle by helping to manage and store communication history with customers, capture important communication metadata and more.</p>"},{"location":"crm/pipedrive/#install-the-extension","title":"Install the extension","text":"<p>If you have not already done so, begin by installing App Connect from the Chrome web store. </p>"},{"location":"crm/pipedrive/#setup-the-extension","title":"Setup the extension","text":"<p>Once the extension has been installed, follow these steps to setup and configure the extension for Pipedrive. </p> <ol> <li> <p>Make sure you are logged in to Pipedrive.</p> </li> <li> <p>Navigate to the RingCentral App Connect in the Pipedrive Marketplace.</p> </li> <li> <p>From the marketplace listing, initiate the authorization process by clicking the \"Install Now\" button.</p> <p></p> </li> <li> <p>On the authorization screen, scroll to the bottom and click \"Allow and Install.\" App Connect should automatically come to the foreground and show that you are now connected to Pipedrive. </p> </li> </ol> <p>When you login successfully, the Chrome extension will automatically update to show you are connected to Pipedrive. If you are connected, the button next to Pipedrive will say, \"logout\".</p> <p> </p> Settings once you have connected to Pipedrive <p>And with that, you will be connected to Pipedrive and ready to begin using the integration. </p>"},{"location":"crm/pipedrive/#tailoring-your-configuration","title":"Tailoring your configuration","text":"<p>Pipedrive's system exhibits a relatively uncommon behavior that is the result of a perfectly normal function of the frameworks used by their engineers. However, this behavior is unfortunate because it causes the dialer to be removed from the page after it has loaded. You may see it appear briefly, and then POOF! It is gone. </p> <p>To address this, go our advanced settings and set the config option called \"Click-to-dial inject delay\" to <code>2</code> or <code>3</code>. Depending upon network latencies, you may need to increase this number, but usually a value of <code>2</code> is sufficient. </p>"},{"location":"crm/recruiterpm/","title":"Setting up App Connect for RecruiterPM","text":"<p>The Smokeball integration is a work in progress and not yet available.</p> <p>RecruiterPM is an all-in-one Applicant Tracking System (ATS) and Customer Relationship Management (CRM) platform designed for recruitment teams, offering features for candidate sourcing, applicant tracking, interview scheduling, and project management. It uses AI for candidate sourcing, automates administrative tasks, provides analytics, and includes tools for team collaboration and marketing campaigns to help companies hire faster. </p> <p>RecruiterPM built this integration to help streamline communications with candidates to place them faster and more efficiently, while also optimizing pipelines to onboard new customers with jobs to full. </p>"},{"location":"crm/recruiterpm/#install-the-extension","title":"Install the extension","text":"<p>If you have not already done so, begin by installing App Connect from the Chrome web store. </p>"},{"location":"crm/recruiterpm/#setup-the-extension","title":"Setup the extension","text":"<p>TBD</p>"},{"location":"crm/redtail/","title":"Setting up App Connect for Redtail CRM","text":"<p>Whether you are looking to strengthen your client relationships, improve your team\u2019s collaboration efforts and overall efficiency, increase your revenues and profitability, decrease client attrition, or engage in any number of other business-building activities, Redtail CRM offers tools to assist in your efforts.</p> <p>RingCentral's integration with Redtail CRM helps streamline communications between customers, and helps sales staff to better support them through their entire lifecycle by helping to manage and store communication history with customers, capture important communication metadata and more.</p>"},{"location":"crm/redtail/#install-the-extension","title":"Install the extension","text":"<p>If you have not already done so, begin by installing App Connect from the Chrome web store. </p>"},{"location":"crm/redtail/#setup-the-extension","title":"Setup the extension","text":"<p>Once the extension has been installed, follow these steps to setup and configure the extension for Redtail. </p> <ol> <li> <p>Login to Redtail.</p> </li> <li> <p>While visiting a Redtail application page, click the quick access button to bring the dialer to the foreground. </p> </li> <li> <p>Navigate to the Settings screen in App Connect, and find the option labeled \"Redtail.\"</p> <p></p> </li> <li> <p>Click the \"Connect\" button. </p> </li> <li> <p>A window will be opened prompting you to enter your Redtail username and password. Login to Redtail. </p> </li> </ol> <p>When you login successfully, the Chrome extension will automatically update to show you are connected to Redtail. If you are connected, the button next to Redtail will say, \"logout\".</p> <p>And with that, you will be connected to Redtail and ready to begin using the integration. </p>"},{"location":"crm/servicenow/","title":"App Connect and ServiceNow","text":"<p>ServiceNow is an IT service and operations management company that helps companies automate IT business processes. The ServiceNow integration powered by App Connect comes with these unique capabilities:</p> <ul> <li>Automatically log calls for external AND internal calls</li> <li>Archive call recordings directly in ServiceNow for enhanced compliance</li> <li>Supports both ServiceNow cloud and on-prem solutions</li> </ul> <p>RingCentral supports ServiceNow via a trusted third-party vendor Gate6.</p> <p>As a third-party integration, the ServiceNow integration comes at an additional cost</p>"},{"location":"crm/servicenow/#install-the-extension","title":"Install the extension","text":"<p>If you have not already done so, begin by installing App Connect from the Chrome web store. </p>"},{"location":"crm/servicenow/#setup-app-connect","title":"Setup App Connect","text":"<p> To get and running with ServiceNow using App Connect, please contact Gate6 directly to discuss pricing, licensing, and onboarding procedures. </p> <p>Contact Gate6</p>"},{"location":"crm/servicetitan/","title":"Setting up App Connect for Service Titan","text":"<p>The Smokeball integration is a work in progress and not yet available.</p> <p>Gate6's integration with Service Titan helps streamline communication-heavy workflows ubiquitous to the home service industry, and helps teams deliver a high-quality, high-touch user experience by tracking all communications with a client.</p>"},{"location":"crm/servicetitan/#install-the-extension","title":"Install the extension","text":"<p>If you have not already done so, begin by installing App Connect from the Chrome web store. </p>"},{"location":"crm/servicetitan/#setup-the-extension","title":"Setup the extension","text":"<p>TBD</p>"},{"location":"crm/smokeball/","title":"Setting up App Connect for Smokeball","text":"<p>The Smokeball integration is a work in progress and not yet available.</p> <p>Smokeball is a cloud-based legal practice management software designed for small law firms that automates administrative tasks, tracks time, and manages case files. Key features include automated document generation from legal forms, automatic time tracking, a client portal for secure communication, and integrations with programs like Microsoft Word and Outlook. It also incorporates an AI matter assistant to help with tasks like summarizing conversations and streamlining client intake.</p> <p>Ion8, a company specializing in legal industry integrations, built this integration to help streamline communications around legal matters and cases, making sure communications are properly stored, and analyzed so that firms can deliver a high-quality service. </p>"},{"location":"crm/smokeball/#install-the-extension","title":"Install the extension","text":"<p>If you have not already done so, begin by installing App Connect from the Chrome web store. </p>"},{"location":"crm/smokeball/#setup-the-extension","title":"Setup the extension","text":"<p>TBD</p>"},{"location":"crm/zoho/","title":"Setting up App Connect for Zoho","text":"<p>The Smokeball integration is a work in progress and not yet available.</p> <p>Zoho CRM is a cloud-based customer relationship management software that helps businesses manage sales, marketing, and customer support activities in a single platform. It allows companies to store customer information, track processes, automate tasks, and streamline communication across departments to improve customer engagement and drive sales. Zoho CRM offers a free edition for small teams and paid options with more features for businesses of all sizes.</p> <p>RingClone's integration with Zoho helps streamline communications with customers, and helps sales teams track communications so that they can have a full 360-view of their customers and deals in the pipeline.</p>"},{"location":"crm/zoho/#install-the-extension","title":"Install the extension","text":"<p>If you have not already done so, begin by installing App Connect from the Chrome web store. </p>"},{"location":"crm/zoho/#setup-the-extension","title":"Setup the extension","text":"<p>TBD</p>"},{"location":"developers/","title":"Integrating with CRMs using the App Connect framework","text":"<p>The developer framework is currently in BETA</p> <p>This framework is in beta. Please submit a Github issue if you encounter any problems or have a question.</p> <p>Welcome to RingCentral's App Connect integration framework. Using this framework, developers can integrate RingCentral into their web-based CRM more easily. The framework is centered around enabling the following features common to many CRM integrations:</p> <ul> <li>Embedded phone. Injecting a phone into the CRM for a fully-integrated communications experience.</li> <li>Call pop. Automatically opening up a contact record when a call is received.</li> <li>Logging calls. Capturing and storing call notes in an activity record linked to an associated contact in the CRM.</li> </ul> <p>Powered by RingCentral Embeddable</p> <p></p> <p>App Connect's integration framework is build on top of RingCentral Embeddable, which itself provides the following capabilities via its unified communications client:</p> <ul> <li>Make and receive phone calls.</li> <li>Send and receive SMS.</li> <li>Read and send team chat messages. </li> <li>Search your RingCentral address book.</li> <li>View a history of past calls.</li> <li>Listen to call recordings.</li> <li>Access and listen to voicemail. </li> </ul>"},{"location":"developers/#architectural-overview","title":"Architectural overview","text":"<p>Each CRM supported by this framework is required to implement what is referred to as an \"adapter.\" Adapters help broker communications between the client application (the dialer and primary user interface) and the CRM being integrated with. </p> <p></p> <p>Each adapter implements the following components:</p> <ul> <li>A configuration file, or manifest that defines basic metadata and provides a no-code interface for defining common user interactions. </li> <li>A server that implements a prescribed interface that is invoked by the front-end client to perform more complex interactions with the CRM. </li> </ul> <p>In this guide, you will learn how to build, package and distribute an adapter for a CRM.</p> <p>Get started using the framework</p>"},{"location":"developers/#advanced-topics","title":"Advanced topics","text":"<ul> <li>Custom Setting Fields - Learn how to add configurable settings specific to your CRM adapter</li> <li>Regional Services - Understand how to support CRMs with different regional deployments</li> </ul>"},{"location":"developers/adapter/","title":"Implementing your CRM adapter","text":"<p>The developer framework is currently in BETA</p> <p>This framework is in beta. Please submit a Github issue if you encounter any problems or have a question.</p> <p>App Connect's developer framework comes with everything you need to build an adapter for virtually any target CRM platform. While the sample adapter that is provided through this framework is implemented in Javascript, you are free to implement your server in whatever language you prefer -- provided that it implements the interface properly. However, we recommend most developers utilize this framework directly, as it will dramatically decrease your time to market. </p> <p>Every adapter contains two key files or elements:</p> <ol> <li>A manifest file that defines and governs app behaviors</li> <li>A server that the Unfied Chrome extension interfaces with to communicate with the target CRM</li> </ol>"},{"location":"developers/adapter/#how-the-chrome-extension-interfaces-with-an-adapter-to-talk-to-a-crm","title":"How the Chrome extension interfaces with an adapter to talk to a CRM","text":"<p>One can think of an adapter as nothing more than an intermediary service that is responsible for translating actions performed by a user of the Chrome extension, into API calls made to a target CRM that fulfill a user's intent. Take for example when a user logs a call:</p> <ol> <li>A user clicks \"Log call\" from the call history page. </li> <li>The user fills out a form in which they enter notes and other data related to the call. </li> <li>The user clicks \"Save.\" </li> <li>The Chrome extension then packages up the user's input, and sends it to the adapter.</li> <li>The adapter's server receives a request stating, \"a user wants to log a call.\"</li> <li>The adapter's server then calls the target CRM's API to log a call. </li> </ol> <p>This basic pattern is repeated for every action the framework enables. For those who want to nerd-out on this pattern, the following sequence diagram will describe the process more thoroughly. </p>"},{"location":"developers/adapter/#sequence-diagram","title":"Sequence diagram","text":""},{"location":"developers/adapter/#working-examples","title":"Working examples","text":"<p>The framework currently contains a total of five natively supported CRMs. These adapters are useful reference implementations for developers to learn from. The following table lists these adapters and what sets them apart from one another technically:</p> CRM Auth type Contact type Note Clio OAuth Contact Clio API only supports exact match for contact match by phone number, so users need to use overriding formats Pipedrive OAuth Contact Pipedrive has unique auth process behind OAuth, it's not recommended to be used as OAuth reference Insightly api key Lead and Contact Insightly API only supports exact match for contact match by phone number, so users need to use overriding formats Bullhorn OAuth Lead, Candidate and Contact Bullhorn has unique auth process behind OAuth, it's not recommended to be used as OAuth reference Redtail api key (username &amp; password) Contact None NetSuite OAuth Contact and Customer None"},{"location":"developers/adapter/#development-process","title":"Development process","text":"<p>This guide will walk you through the process of creating an adapter step-by-step. At a high-level however, developers will be expected to do the following:</p> <ul> <li>Create a manifest file</li> <li>Implement each of the required adapter interfaces:<ul> <li>Authorization</li> <li>Contact lookup and matching</li> <li>Logging, updating and looking up call logs</li> <li>Logging SMS messages</li> <li>Creating placeholder contacts</li> <li>Opening contact and activity pages in the CRM</li> </ul> </li> <li>Deploy your server</li> <li>Configure the App Connect Chrome extension to load your custom adapter</li> </ul> <p>Let's get started.</p>"},{"location":"developers/auth/","title":"Authorization and authenticating users with their CRM","text":"<p>App Connect's framework currently supports two different authentication modalities:</p> <ul> <li>OAuth. This is the most common form of authentication and authorization supported by most CRMs. </li> <li>API keys. This less common method typically requires a CRM user to retrieve an auth string, often called an \"API key,\" and saving it within the framework. This key is then transmitted with each API request to the CRM. </li> </ul> <p>Start by editing the <code>platforms</code> object within your adapter's manifest, and setting the <code>type</code> property under <code>auth</code> to either:</p> <ul> <li><code>oauth</code></li> <li><code>apiKey</code></li> </ul>"},{"location":"developers/auth/#connecting-to-a-crm-via-oauth","title":"Connecting to a CRM via OAuth","text":"<p>When implementing OAuth, you will need to login to the target CRM as a developer to retrieve a client ID and client secret. Every CRM is different, so please consult the CRM's API documentation to learn how to generate these two values to uniquely identify your application that will be calling the CRM's APIs. </p> <p>Once you have obtained these values, you will need to set the following values in your adapter's manifest:</p> Name Type Description <code>platforms.{crmName}.auth.oauth.authUrl</code> string The auth URL to initiate the OAuth process with the CRM. Eg. https://app.clio.com/oauth/authorize <code>platforms.{crmName}.auth.oauth.clientId</code> string Only used with <code>authType</code> equal to <code>oauth</code>. The client ID of the application registered with the CRM to access it's API. <code>platforms.{crmName}.auth.oauth.redirectUri</code> string You can use your own uri, but the default one <code>https://ringcentral.github.io/ringcentral-embeddable/redirect.html</code> should work in most cases. <code>platforms.{crmName}.auth.oauth.scope</code> string (Optional) Only if you want to specify scopes in OAuth url. eg. \"scope\":\"scopes=write,read\" <code>platforms.{crmName}.auth.oauth.customState</code> string (Optional) Only if you want to override state query string in OAuth url. The state query string will be <code>state={customState}</code> instead."},{"location":"developers/auth/#generating-an-auth-url","title":"Generating an Auth URL","text":"<p>The framework will compose an OAuth compliant auth URL for you by appending to the <code>authUrl</code> the following query string:</p> <pre><code>{authUrl}?responseType=code&amp;client_id={clientId}&amp;{scope}&amp;state=platform={name}\n    &amp;redirect_uri=https://ringcentral.github.io/ringcentral-embeddable/redirect.html\n</code></pre>"},{"location":"developers/auth/#setting-the-redirect-uri","title":"Setting the redirect URI","text":"<p>App Connect's framework utilizes a a fixed redirect URI for OAuth. This redirect URI is: </p> <pre><code>https://ringcentral.github.io/ringcentral-embeddable/redirect.html\n</code></pre> <p>It should suffice standard OAuth use cases. If there's any special case, please contact us.</p>"},{"location":"developers/auth/#implement-server-endpoints","title":"Implement server endpoints","text":"<p>Within your adapter's <code>index.js</code> file, implement the following methods.</p> <ul> <li><code>getAuthType</code></li> <li><code>getOauthInfo</code></li> <li><code>getUserInfo</code></li> </ul>"},{"location":"developers/auth/#connecting-to-a-crm-using-an-api-key","title":"Connecting to a CRM using an API key","text":"<p>Some CRMs provide developers access to their API via an API key. An API key is a slightly more cumbersome connection process for users, in that they must go into a technical part of the CRM to retrieve an obscure text string. But, the App Connect framework does what it can to make the process as easy as possible for users. </p> <p>To auth a user via an API key, you need to present them with a form in which they will enter all needed credentials. The user will save those values and the framework will stash them a secure database for you. </p>"},{"location":"developers/auth/#setup-the-auth-page-in-the-extension","title":"Setup the auth page in the extension","text":"<p>Sample CRM adapter</p> manifest.jsonRendered page <pre><code>      \"useLicense\": true,\n      \"enableExtensionNumberLoggingSetting\": true,\n      \"requestConfig\": {\n        \"timeout\": 30\n      },\n      \"auth\": {\n        \"type\": \"apiKey\",\n        \"apiKey\": {\n          \"page\": {\n            \"title\": \"test CRM\",\n            \"content\": [\n              {\n                \"const\": \"apiKey\",\n                \"title\": \"apiKey\",\n                \"type\": \"string\",\n</code></pre> <p></p> <p>Insightly adapter</p> manifest.jsonRendered page <pre><code>              \"title\": \"Organisation\",\n              \"type\": \"selection\",\n              \"contactDependent\": true\n            },\n            {\n              \"const\": \"opportunity\",\n              \"title\": \"Opportunity\",\n              \"type\": \"selection\",\n              \"contactDependent\": true\n            },\n            {\n              \"const\": \"project\",\n              \"title\": \"Project\",\n              \"type\": \"selection\",\n              \"contactDependent\": true\n            }\n          ]\n        },\n        \"messageLog\": {\n          \"additionalFields\": [\n            {\n              \"const\": \"organization\",\n              \"title\": \"Organisation\",\n              \"type\": \"selection\",\n              \"contactDependent\": true\n            },\n            {\n              \"const\": \"opportunity\",\n              \"title\": \"Opportunity\",\n              \"type\": \"selection\",\n              \"contactDependent\": true\n            },\n            {\n</code></pre> <p></p>"},{"location":"developers/auth/#implement-server-endpoints_1","title":"Implement server endpoints","text":"<p>Within your adapter's <code>index.js</code> file, implement the following methods.</p> <ul> <li><code>getAuthType</code></li> <li><code>getOauthInfo</code></li> <li><code>getUserInfo</code></li> </ul>"},{"location":"developers/auth/#deauthorizing-users","title":"Deauthorizing users","text":"<p>Just as one needs to log someone in, they need to log someone out. </p>"},{"location":"developers/auth/#implement-server-endpoints_2","title":"Implement server endpoints","text":"<p>Within your adapter's <code>index.js</code> file, implement the following methods.</p> <ul> <li><code>unAuthorize</code></li> </ul>"},{"location":"developers/auth/#testing-your-authorization-implementation","title":"Testing your authorization implementation","text":"<p>Now that the necessary server endpoints have been implemented, and the manifest updated, let's test authorization. </p> <ol> <li>Refresh and or save the Custom CRM config url setting under the extension's options. </li> <li>Access the Chrome extension. </li> <li>Log out and log back into your CRM using the \"Connect\" button under the Settings tab, or by going through the appropriate CRM login and authorization flow for your adapter.</li> <li>Finally, check to see if any user info was saved in the database (<code>CHECK.1</code>)</li> </ol>"},{"location":"developers/call-log-composer/","title":"CallLogComposer","text":"<p>The CallLogComposer is a centralized utility module that provides consistent call log formatting and composition across all CRM adapters. It supports multiple output formats (plain text, HTML, and Markdown) and handles intelligent updating of existing log entries.</p>"},{"location":"developers/call-log-composer/#overview","title":"Overview","text":"<p>The CallLogComposer handles the complex task of:</p> <ul> <li>Format standardization: Ensures consistent call log formatting across different CRMs</li> <li>Multi-format support: Generates logs in plain text, HTML, or Markdown formats  </li> <li>Intelligent upserts: Updates existing log entries without duplicating information</li> <li>User preference compliance: Respects user settings to include/exclude specific log components</li> <li>Timezone handling: Properly formats dates and times based on user timezone preferences</li> </ul>"},{"location":"developers/call-log-composer/#core-function","title":"Core Function","text":""},{"location":"developers/call-log-composer/#composecalllogparams","title":"<code>composeCallLog(params)</code>","text":"<p>The main function that composes a complete call log based on user settings and provided parameters.</p>"},{"location":"developers/call-log-composer/#parameters","title":"Parameters","text":"Parameter Type Description <code>logFormat</code> <code>string</code> Format type: <code>'text/plain'</code>, <code>'text/html'</code>, or <code>'text/markdown'</code> (defaults to plain text) <code>existingBody</code> <code>string</code> Existing log body content (for updates) <code>callLog</code> <code>Object</code> Call log information from RingCentral API <code>contactInfo</code> <code>Object</code> Contact information associated with the call <code>user</code> <code>Object</code> User information including settings and timezone preferences <code>note</code> <code>string</code> User-entered notes during or after the call <code>aiNote</code> <code>string</code> AI-generated call summary or notes <code>transcript</code> <code>string</code> Full call transcript text <code>recordingLink</code> <code>string</code> URL link to call recording <code>subject</code> <code>string</code> Call subject or summary line <code>startTime</code> <code>Date</code> Call start time <code>duration</code> <code>number</code> Call duration in seconds <code>result</code> <code>string</code> Call result (e.g., \"Call connected\", \"Hang Up\", \"Missed\") <code>platform</code> <code>string</code> CRM platform identifier"},{"location":"developers/call-log-composer/#return-value","title":"Return Value","text":"<p>Returns a <code>Promise&lt;string&gt;</code> containing the formatted call log body.</p>"},{"location":"developers/call-log-composer/#example-usage","title":"Example Usage","text":"<pre><code>const { composeCallLog } = require('@ringcentral/integration-core/lib/callLogComposer');\n\nconst logBody = await composeCallLog({\n    logFormat: 'text/html',\n    existingBody: '',\n    callLog: {\n        sessionId: '4503991004',\n        startTime: '2024-01-15T10:30:00.000Z',\n        duration: 120,\n        direction: 'Inbound',\n        result: 'Answered'\n    },\n    contactInfo: {\n        phoneNumber: '+1234567890',\n        name: 'John Smith'\n    },\n    user: {\n        userSettings: {\n            addCallLogNote: { value: true },\n            addCallLogDateTime: { value: true },\n            addCallLogDuration: { value: true }\n        },\n        timezoneOffset: '-05:00'\n    },\n    note: 'Discussed quarterly sales projections',\n    subject: 'Q1 Sales Review Call'\n});\n</code></pre>"},{"location":"developers/call-log-composer/#user-settings-integration","title":"User Settings Integration","text":"<p>The CallLogComposer respects the following user settings to control which components are included in the log:</p> Setting Default Description <code>addCallLogNote</code> <code>true</code> Include user notes in the log <code>addCallSessionId</code> <code>false</code> Include RingCentral session ID <code>addCallLogSubject</code> <code>true</code> Include call subject/summary <code>addCallLogContactNumber</code> <code>false</code> Include contact phone number <code>addCallLogDateTime</code> <code>true</code> Include call date and time <code>addCallLogDuration</code> <code>true</code> Include call duration <code>addCallLogResult</code> <code>true</code> Include call result <code>addCallLogRecording</code> <code>true</code> Include recording link <code>addCallLogAINote</code> <code>true</code> Include AI-generated notes <code>addCallLogTranscript</code> <code>true</code> Include call transcript"},{"location":"developers/call-log-composer/#output-formats","title":"Output Formats","text":""},{"location":"developers/call-log-composer/#plain-text-format","title":"Plain Text Format","text":"<pre><code>- Note: Discussed quarterly sales projections\n- Summary: Q1 Sales Review Call\n- Date/Time: 2024-01-15 05:30:00 AM\n- Duration: 00:02:00\n- Result: Answered\n- Call recording link: https://example.com/recording\n- AI Note:\nCustomer expressed interest in expanding their service plan.\n--- END\n</code></pre>"},{"location":"developers/call-log-composer/#html-format","title":"HTML Format","text":"<pre><code>&lt;b&gt;Agent notes&lt;/b&gt;&lt;br&gt;Discussed quarterly sales projections&lt;br&gt;&lt;br&gt;&lt;b&gt;Call details&lt;/b&gt;&lt;br&gt;\n&lt;li&gt;&lt;b&gt;Summary&lt;/b&gt;: Q1 Sales Review Call&lt;/li&gt;\n&lt;li&gt;&lt;b&gt;Date/time&lt;/b&gt;: 2024-01-15 05:30:00 AM&lt;/li&gt;\n&lt;li&gt;&lt;b&gt;Duration&lt;/b&gt;: 00:02:00&lt;/li&gt;\n&lt;li&gt;&lt;b&gt;Result&lt;/b&gt;: Answered&lt;/li&gt;\n&lt;li&gt;&lt;b&gt;Call recording link&lt;/b&gt;: &lt;a target=\"_blank\" href=\"https://example.com/recording\"&gt;open&lt;/a&gt;&lt;/li&gt;\n&lt;div&gt;&lt;b&gt;AI Note&lt;/b&gt;&lt;br&gt;Customer expressed interest in expanding their service plan.&lt;/div&gt;&lt;br&gt;\n</code></pre>"},{"location":"developers/call-log-composer/#markdown-format","title":"Markdown Format","text":"<pre><code>## Agent notes\nDiscussed quarterly sales projections\n\n## Call details\n**Summary**: Q1 Sales Review Call\n**Date/Time**: 2024-01-15 05:30:00 AM\n**Duration**: 00:02:00\n**Result**: Answered\n**Call recording link**: https://example.com/recording\n\n### AI Note\nCustomer expressed interest in expanding their service plan.\n</code></pre>"},{"location":"developers/call-log-composer/#individual-upsert-functions","title":"Individual Upsert Functions","text":"<p>The CallLogComposer also exports individual upsert functions for granular control:</p>"},{"location":"developers/call-log-composer/#available-functions","title":"Available Functions","text":"<ul> <li><code>upsertCallAgentNote({ body, note, logFormat })</code></li> <li><code>upsertCallSessionId({ body, id, logFormat })</code></li> <li><code>upsertRingCentralUserName({ body, userName, logFormat })</code></li> <li><code>upsertRingCentralNumber({ body, number, extension, logFormat })</code></li> <li><code>upsertCallSubject({ body, subject, logFormat })</code></li> <li><code>upsertContactPhoneNumber({ body, phoneNumber, direction, logFormat })</code></li> <li><code>upsertCallDateTime({ body, startTime, timezoneOffset, logFormat })</code></li> <li><code>upsertCallDuration({ body, duration, logFormat })</code></li> <li><code>upsertCallResult({ body, result, logFormat })</code></li> <li><code>upsertCallRecording({ body, recordingLink, logFormat })</code></li> <li><code>upsertAiNote({ body, aiNote, logFormat })</code></li> <li><code>upsertTranscript({ body, transcript, logFormat })</code></li> </ul>"},{"location":"developers/call-log-composer/#example-individual-function-usage","title":"Example: Individual Function Usage","text":"<pre><code>const { upsertCallAgentNote } = require('@ringcentral/integration-core/lib/callLogComposer');\n\nlet logBody = '- Date/Time: 2024-01-15 05:30:00 AM\\n- Duration: 00:02:00\\n';\n\n// Add or update agent note\nlogBody = upsertCallAgentNote({\n    body: logBody,\n    note: 'Customer requested follow-up call next week',\n    logFormat: 'text/plain'\n});\n\n// Result: \"- Note: Customer requested follow-up call next week\\n- Date/Time: 2024-01-15 05:30:00 AM\\n- Duration: 00:02:00\\n\"\n</code></pre>"},{"location":"developers/call-log-composer/#timezone-handling","title":"Timezone Handling","text":"<p>The CallLogComposer handles timezone conversion automatically:</p> <ul> <li>String offsets: Accepts formats like <code>'+05:30'</code> or <code>'-08:00'</code></li> <li>Numeric offsets: Supports minute-based offsets (e.g., <code>330</code> for +5:30)</li> <li>Default format: Outputs dates as <code>'YYYY-MM-DD hh:mm:ss A'</code></li> </ul>"},{"location":"developers/call-log-composer/#best-practices","title":"Best Practices","text":""},{"location":"developers/call-log-composer/#for-adapter-developers","title":"For Adapter Developers","text":"<ol> <li>Use the main function: Always prefer <code>composeCallLog()</code> over individual upsert functions for complete logs</li> <li>Respect user settings: Pass the complete user object to ensure settings are honored</li> <li>Handle existing content: Always pass <code>existingBody</code> when updating existing logs</li> <li>Format consistency: Use <code>getLogFormatType()</code> to determine the correct format for your platform</li> </ol>"},{"location":"developers/call-log-composer/#example-complete-integration","title":"Example: Complete Integration","text":"<pre><code>const { composeCallLog, getLogFormatType } = require('@ringcentral/integration-core/lib/callLogComposer');\n\nasync function createCallLog({ user, contactInfo, callLog, note, platform }) {\n    try {\n        // Determine format from platform manifest\n        const logFormat = getLogFormatType(platform);\n\n        // Compose the complete log\n        const logBody = await composeCallLog({\n            logFormat,\n            callLog,\n            contactInfo,\n            user,\n            note,\n            startTime: callLog.startTime,\n            duration: callLog.duration,\n            result: callLog.result,\n            platform\n        });\n\n        // Create log entry in CRM using formatted body\n        const result = await crmApi.createActivity({\n            contactId: contactInfo.id,\n            subject: `Call with ${contactInfo.name}`,\n            body: logBody,\n            type: 'call'\n        });\n\n        return {\n            logId: result.id,\n            returnMessage: {\n                message: 'Call logged successfully',\n                messageType: 'success',\n                ttl: 3000\n            }\n        };\n    } catch (error) {\n        console.error('Error creating call log:', error);\n        throw error;\n    }\n}\n</code></pre>"},{"location":"developers/call-log-composer/#error-handling","title":"Error Handling","text":"<p>The CallLogComposer functions are designed to be resilient:</p> <ul> <li>Missing parameters: Functions gracefully handle undefined or null values</li> <li>Invalid formats: Defaults to plain text format if an invalid format is specified</li> <li>Malformed data: Safely processes partial or incomplete call log data</li> </ul>"},{"location":"developers/call-log-composer/#dependencies","title":"Dependencies","text":"<p>The CallLogComposer relies on:</p> <ul> <li><code>moment-timezone</code>: For date/time formatting and timezone conversion</li> <li><code>@ringcentral/integration-core/lib/util</code>: For duration formatting utilities</li> <li><code>@ringcentral/integration-core/adapter/registry</code>: For platform manifest access</li> <li><code>@ringcentral/integration-core/lib/constants</code>: For format type constants</li> </ul>"},{"location":"developers/contact-matching/","title":"Loading a contact record","text":"<p>The developer framework is currently in BETA</p> <p>This framework is in beta. Please submit a Github issue if you encounter any problems or have a question.</p> <p>A critical function performed by the server is looking up a contact record in the target CRM given a phone number, and returning a list of matches for that phone number. In addition, the framework will transmit a list of alternative phone number formats to search for. </p> <p>Alternative phone number formats</p> <p>Some CRMs expose a contact search API that is very strict with regards to phone number lookup. For example, if a CRM only supports an EXACT MATCH then searching for an E.164 phone number may not yield any results if the phone number is stored in any other format.</p> <p>As a workaround, the CRM framework allows users to specify additional phone number formats that they typically store phone numbers in. This list of phone numbers is transmitted to the adapter's server, so that the associated adapter can search for a contact using multiple phone number formats until one is found.</p>"},{"location":"developers/contact-matching/#searching-for-a-contact-by-name","title":"Searching for a contact by name","text":"<p>When a contact cannot be found via a phone number, users are given the option to search for a contact manually - typically by name. </p> <p> </p> Searching contacts in a CRM via App Connect <p>When a user elects to do this, the App Connect adapter will be engaged to search for a name and return a list of possible matches. The user will then select the preferred user, and the call will then be logged against the selected user. </p> <p>As a last resort, users will also have the option to create a new contact record. </p> <p> </p> Creating a contact in a CRM via App Connect <p>When a user selects this option, they will be prompted for a name, and App Connect will engage the adapter to create a contact with that name. The call will then be associated with this newly created contact.</p>"},{"location":"developers/contact-matching/#implement-server-endpoints","title":"Implement server endpoints","text":"<p>Within your adapter's <code>index.js</code> file, implement the following methods.</p> <ul> <li><code>createContact</code></li> <li><code>findContact</code></li> <li><code>findContactWithName</code></li> </ul>"},{"location":"developers/contact-matching/#test","title":"Test","text":"<ol> <li>Create a new contact on CRM platform and make a call to it</li> <li>In extension, near call record, click <code>Refresh contact</code> to check if console prints correct results (<code>CHECK.3</code>)</li> </ol>"},{"location":"developers/contact-matching/#multiple-contact-types","title":"Multiple contact types","text":"<p>The framework supports multiple contact types at basic levels. Please refer to existing <code>bullhorn</code> or <code>insightly</code> code implementation and manifest for more details. </p>"},{"location":"developers/custom-settings/","title":"Custom Setting Fields","text":"<p>Custom fields allow developers to add configurable settings specific to their CRM adapter. These settings are grouped under one or more sections in the App Connect extension user settings page.</p> <p>Custom settings defined in the manifest will automatically appear in the managed settings area, allowing administrators to control these values across the entire organization.</p>"},{"location":"developers/custom-settings/#location","title":"Location","text":"<p>Custom fields are defined in the manifest file under the <code>platforms.{crmName}.settings</code> section. Each setting group is defined as an object with the following structure:</p> <pre><code>{\n    \"settings\": [\n        {\n            \"id\": \"uniqueGroupId\",\n            \"type\": \"section\",\n            \"name\": \"Group Name\",\n            \"items\": [\n                // Field items go here\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"developers/custom-settings/#field-types","title":"Field Types","text":"<p>The framework supports several types of custom fields:</p>"},{"location":"developers/custom-settings/#input-field","title":"Input Field","text":"<pre><code>{\n    \"id\": \"uniqueFieldId\",\n    \"type\": \"inputField\",\n    \"name\": \"Field Name\",\n    \"description\": \"Field description\",\n    \"placeholder\": \"Placeholder text\",\n    \"defaultValue\": \"Default value\"\n}\n</code></pre>"},{"location":"developers/custom-settings/#boolean","title":"Boolean","text":"<pre><code>{\n    \"id\": \"uniqueFieldId\",\n    \"type\": \"boolean\",\n    \"name\": \"Field Name\",\n    \"description\": \"Field description\",\n    \"defaultValue\": false\n}\n</code></pre>"},{"location":"developers/custom-settings/#warning","title":"Warning","text":"<pre><code>{\n    \"id\": \"uniqueFieldId\",\n    \"name\": \"Warning Title\",\n    \"type\": \"warning\",\n    \"value\": \"Warning message content\"\n}\n</code></pre>"},{"location":"developers/custom-settings/#option","title":"Option","text":"<pre><code>{\n    \"id\": \"uniqueFieldId\",\n    \"type\": \"option\",\n    \"name\": \"Field Name\",\n    \"description\": \"Field description\",\n    \"options\": [\"Option 1\", \"Option 2\"],\n    \"multiple\": false,\n    \"checkbox\": false,\n    \"required\": false,\n    \"defaultValue\": \"Option 1\"\n}\n</code></pre>"},{"location":"developers/custom-settings/#option-multiple","title":"Option - multiple","text":"<pre><code>{\n    \"id\": \"uniqueFieldId\",\n    \"type\": \"option\",\n    \"name\": \"Field Name\",\n    \"description\": \"Field description\",\n    \"options\": [\"Option 1\", \"Option 2\", \"Option 3\"],\n    \"multiple\": true,\n    \"checkbox\": true,\n    \"required\": false,\n    \"defaultValue\": \"Option 1,Option 2\"\n}\n</code></pre>"},{"location":"developers/custom-settings/#accessing-custom-settings","title":"Accessing Custom Settings","text":"<p>To access custom settings in your adapter implementation, you can find them under <code>user.userSettings.{customSettingId}</code>.</p>"},{"location":"developers/custom-settings/#example-manifest","title":"Example - manifest","text":"<p>Here's a complete example of a custom fields configuration:</p> <pre><code>{\n    \"settings\": [\n        {\n            \"id\": \"insightlyOptions\",\n            \"type\": \"section\",\n            \"name\": \"Insightly options\",\n            \"items\": [\n                {\n                    \"id\": \"extraPhoneFieldWarning\",\n                    \"name\": \"Extra phone field warning\",\n                    \"type\": \"warning\",\n                    \"value\": \"Warning: extra phone fields will slightly slow the contact match process\"\n                },\n                {\n                    \"id\": \"insightlyExtraPhoneFieldNameForContact\",\n                    \"type\": \"inputField\",\n                    \"name\": \"Extra phone field name for contact\",\n                    \"description\": \"The name of the extra phone field to search for contacts in Insightly. Separatmultiple fields with comma.\",\n                    \"defaultValue\": \"\"\n                },\n                {\n                    \"id\": \"insightlyExtraPhoneFieldNameForLead\",\n                    \"type\": \"inputField\",\n                    \"name\": \"Extra phone field name for lead\",\n                    \"description\": \"The name of the extra phone field to search for leads in Insightly. Separatmultiple fields with comma.\",\n                    \"defaultValue\": \"\"\n                }\n            ]\n        }\n    ]\n}\n</code></pre> <p>This configuration creates a section called \"Insightly options\" with a warning message and two input fields for configuring extra phone field name for contact matching cases.</p>"},{"location":"developers/custom-settings/#example-adapter","title":"Example - adapter","text":"<p>In Insightly adapter, the code goes like this:</p> <pre><code>        const extraPhoneFieldNamesForContact = user.userSettings?.insightlyExtraPhoneFieldNameForContact?.value ? user.userSettings?.insightlyExtraPhoneFieldNameForContact?.value?.split(',') : [];\n        // try Contact by extra phone fields\n        for (const extraPhoneFieldName of extraPhoneFieldNamesForContact) {\n            const contactExtraPhonePersonInfo = await axios.get(\n                `${user.platformAdditionalInfo.apiUrl}/${process.env.INSIGHTLY_API_VERSION}/contacts/search?field_name={extraPhoneFieldName}&amp;field_value=${numberToQuery}&amp;brief=false`,\n                {\n                    headers: { 'Authorization': authHeader }\n                });\n            for (let rawContactInfo of contactExtraPhonePersonInfo.data) {\n                rawContactInfo.contactType = 'contactExtraPhone';\n                rawContactInfo.extraPhoneFieldName = extraPhoneFieldName;\n                rawContactInfo.extraPhoneFieldNameValue = rawContactInfo.CUSTOMFIELDS.find(f =&gt; f.FIELD_NAME===extraPhoneFieldName)?.FIELD_VALUE;\n                rawContacts.push(rawContactInfo);\n            }\n        }\n</code></pre> <p>It takes <code>insightlyExtraPhoneFieldNameForContact</code> under user settings, and use it to make extra API calls to Insightly server to get contact by phoneNumber.</p>"},{"location":"developers/deploy/","title":"Build and deploy a CRM adapter","text":"<p>Once you have developed your adapter for a CRM, it is time to try it out. To do that, you will need to deploy your adapter's server to a publicly accessible server</p>"},{"location":"developers/deploy/#deploying-server-to-aws","title":"Deploying server to AWS","text":"<p>Technically your adapter's server could be deployed anywhere. You could host it yourself, or deploy it to a third-party like Heroku or AWS. To assist developers, we have provided a serverless config file for AWS deployment under the <code>serverless-deploy</code>. </p> <ol> <li> <p>Customize your environment</p> <pre><code>cd rc-unified-crm-extension/serverless-deploy\ncp sample.env.yml env.yml\n</code></pre> <p>Then edit <code>env.yml</code>.</p> </li> <li> <p>Customize your serverless deploy config</p> <pre><code>cp sample.serverless.yml serverless.yml\n</code></pre> <p>Then edit <code>serverless.yml</code></p> </li> <li> <p>Build and deploy the server</p> <pre><code>npm run serverless-build\nnpm run serverless-deploy\n</code></pre> </li> </ol> <p>Deploying to another platform</p> <p>If you want to deploy it to other platform. Run <code>npm run build-local</code> and a build folder will be created for you in the <code>build</code> folder. You can then deploy this build folder to any other hosting provider.</p>"},{"location":"developers/deploy/#server-environment-variables","title":"Server environment variables","text":"Variable Description <code>APP_SERVER</code> URL for your backend server <code>APP_SERVER_SECRET_KEY</code> Key to create secret toke between your server and client <code>TEST_CRM_CLIENT_ID</code> If CRM uses OAuth, it should be the client ID for OAuth <code>TEST_CRM_CLIENT_SECRET</code> If CRM uses OAuth, it should be the client secret for OAuth <code>TEST_CRM_ACCESS_TOKEN_URI</code> If CRM uses OAuth, it should access token url for OAuth <code>TEST_CRM_REDIRECT_URI</code> You can use the default redirect URI, or change it to yours <code>DATABASE_URL</code> URL for your database, the default one is for local sqlite database"},{"location":"developers/errors/","title":"Returning messages to client","text":"<p>When implementing your adapter, you will encounter the need to provide feedback to the end user interacting with the adapter. For example you may wish to display:</p> <ul> <li>an error message</li> <li>a confirmation message</li> <li>a warning</li> </ul> <p>Within your adapter, you can cause App Connect to display a message to a user by returning a <code>returnMessage</code> construct in an given interface. Here's a quick example for create call log return in <code>testCRM</code>:</p> <pre><code>return {\n    logId: addLogRes.data.id,\n    returnMessage: {\n        message: 'Call log added.',\n        messageType: 'success',\n        ttl: 3000\n    }\n};\n</code></pre>"},{"location":"developers/errors/#return-message-parameters","title":"Return message parameters","text":"Parameter Description <code>message</code> The message to display. <code>messageType</code> There are 3 message types: <code>success</code>, <code>warning</code> and <code>danger</code>. <code>ttl</code> The length of time to display the message (in milliseconds) before it disappears automatically."},{"location":"developers/getting-started/","title":"App Connect Connector developer quick start","text":"<p>The developer framework is currently in BETA</p> <p>This framework is in beta. Please submit a Github issue if you encounter any problems or have a question.</p> <p>Welcome to the App Connect developer quick start guide! This quick start guide will walk you through the essential steps for getting your first integration up and running with App Connect. By the end of this guide, you will have accomplished two main goals:</p> <ul> <li> <p>Register a Connector: You'll learn how to register a new connector within the Developer Console. This is the first step in defining how your external application will interact with the App Connect ecosystem.</p> </li> <li> <p>Set up a Default Mock Server: We'll deploy a simple mock server. While this server is intentionally basic\u2014it will only print to the console the events it receives from App Connect\u2014it serves a vital purpose.</p> </li> </ul>"},{"location":"developers/getting-started/#building-your-first-connector","title":"Building your first connector","text":"<p>By using this mock server, you'll gain a stronger understanding of the App Connect system's architecture and the lifecycle of events. This hands-on experience will clearly illustrate what events (or callbacks) your application will need to implement when you move to connecting to a real service in the future. Let's get started!</p>"},{"location":"developers/getting-started/#1-register-on-developer-portal","title":"1. Register on Developer Portal","text":"<p>Go to the App Connect Developer Console and login with your RingCentral account and fill in your developer profile.</p>"},{"location":"developers/getting-started/#2-create-a-new-connector","title":"2. Create a new connector","text":"<p>To create a connector, there are only a few mandatory fields you need to provide. In this quick start, our goal is to get you up and running as quickly as possible. You will be able to come back and edit your connector when you are ready to connect to a CRM. </p> <ul> <li>Click \"Create new connector\"</li> <li><code>Connector name</code>: Your connector name, normally it would be the name of the platform you want to connect to</li> <li><code>Connector server URL</code> and <code>CRM URL</code>: If you don't have an url, fill in a random test url. We'll come back and update it later</li> <li>Scroll to the bottom and click <code>Create</code></li> </ul>"},{"location":"developers/getting-started/#3-setup-your-project","title":"3. Setup your project","text":"<p>Upon creating the app profile, setup instrutions will be displayed in the Developer Console. These instructions will guide you through the process of installing the necessary App Connect libraries, initializing your project, and stubbing out your server's interfaces using a basic template. Follow these instructions. </p>"},{"location":"developers/getting-started/#4-build","title":"4. Build!","text":"<p>If you have successfully followed the instructions above, you should now have the following:</p> <ol> <li>The App Connect Chrome extension installed</li> <li>A local server hosting your connector</li> <li>A web tunnel that exposes your server via a public url</li> </ol> <p>Let's try and see it everything works:</p> <ul> <li>Open the Chrome extension and login with your RingCentral account</li> <li>Select the app profile you just created</li> <li>Input an arbitrary API key </li> <li>Conduct a test call to your RingCentral phone number and log it. When you make the first call, it will appear just as a phone in your call history. Click <code>+</code> button to log it. Since it's not matched to any contact yet (you are running under a mock server), you'll have to create this number as a new contact.</li> <li>After logging the call, next call from the same number will be recognized as the contact.</li> <li>There are a lot more features. Please check out our user guide &amp; developer guide to find out. Code implementation suggestions are commented inside template connector script as well.</li> </ul>"},{"location":"developers/getting-started/#notes-about-the-default-mock-server","title":"Notes about the default mock server","text":"<ul> <li> <p>The default auth type is API key, which is effectively ignored. Because this is just a mock server that doesn't actually connect to a CRM, you are free to use any arbitrary string as an API key. </p> </li> <li> <p>Contacts are transient in mock server mode. In this mock server, contact info only exists with current server run. If server is re-started, mock contact info will be lost.</p> </li> </ul>"},{"location":"developers/logging-calls/","title":"Working with call log records","text":"<p>The developer framework is currently in BETA</p> <p>This framework is in beta. Please submit a Github issue if you encounter any problems or have a question.</p> <p>One of the most used features across all of RingCentral's CRM integrations is the function of logging a phone call and recording a disposition associated with that phone call in the target CRM. There are three interfaces developers need to implement to support call logging through the entire call logging lifecycle (these interfaces are listed below). But first, let's take a closer look at the call logging sequence inside App Connect's system. </p> <pre><code>graph TD\n  A[**Call received** or **call placed**] --&gt; B{Automatically&lt;br&gt;log call?}\n  B --&gt;|Yes| OT{One-time log?}\n  OT --&gt;|Yes| C1([Call is connected])\n  C1 --&gt; C2([Call ends])\n  C2 --&gt; C3([Call log data finalized])\n  C3 --&gt; C4@{ shape: \"lean-r\", label: \"createCallLog called\" }\n  C4 --&gt; Z\n  OT --&gt;|No| C([Call is connected])\n  C --&gt; D@{ shape: \"lean-r\", label: \"createCallLog called\" }\n  D --&gt; E([Call ends])\n  E --&gt; F@{ shape: \"lean-r\", label: \"updateCallLog called\" }\n  F --&gt; G([Call recording becomes available])\n  G --&gt; G2([Call log data finalized])\n  G2 --&gt; G3@{ shape: \"lean-r\", label: \"updateCallLog called\" }\n  G3 --&gt; Z@{ shape: \"dbl-circ\", label: \"Call logged\"}\n\n  B --&gt;|No| OT1{One-time log?}\n  OT1 --&gt;|YES| J1([Call is connected])\n  J1 --&gt; J2([Call ends])\n  J2 --&gt; J3([Call recording becomes available])\n  J3 --&gt; J4([Call log data finalized])\n  J4--&gt; J5@{ shape: \"lean-r\", label: \"(optional)manually &lt;br&gt;create call log\" }\n  J5 --&gt; Z\n  OT1 --&gt;|No| J([Call is connected])\n  J --&gt; K([Call ends])\n  K--&gt; P@{ shape: \"lean-r\", label: \"(optional)manually &lt;br&gt;create call log\" }\n  P --&gt; L([Call recording becomes available])\n  L --&gt; O([Call log data finalized])\n  O--&gt; O1@{ shape: \"lean-r\", label: \"(optional)manually &lt;br&gt;create call log\" }\n  O1 --&gt; Z\n\n  Z --&gt; Z1@{ shape: \"lean-r\", label: \"user disposition call\" }\n</code></pre>"},{"location":"developers/logging-calls/#implement-server-endpoints","title":"Implement server endpoints","text":"<p>Ultimately, the key to logging calls successfully is in implementing the following interfaces within your adapter's <code>index.js</code> file. The order in which they are called depends upon the user's settings with regards to automatic call logging and server-side call logging. </p> <ul> <li><code>createCallLog</code></li> <li><code>updateCallLog</code></li> <li><code>getCallLog</code></li> </ul>"},{"location":"developers/logging-calls/#logging-data-to-structued-fields","title":"Logging data to structued fields","text":"<p>When implementing these endpoints, it's crucial to map call data to the appropriate structured fields within the CRM. This ensures that information is organized, searchable, and aligns with the CRM's data schema.</p> <p>Key Considerations</p> <ul> <li>Field Mapping: Identify corresponding fields in the CRM for each piece of call data (e.g., call duration, caller ID, notes).</li> <li>Data Validation: Ensure that the data conforms to the CRM's field requirements, such as data types and length constraints.</li> <li>Error Handling: Implement robust error handling to manage scenarios where data fails validation or the CRM API returns errors.</li> </ul>"},{"location":"developers/logging-calls/#updating-existing-call-log-records","title":"Updating existing call log records","text":"<p>Special attention should be paid by developers to the process of updating an existing call log record, as it is possible that users may have manually edited the call log record within the CRM prior to the <code>updateCallLog</code> request being received by the adapter. Consider the following scenario:</p> <ol> <li>A call is received, is recorded, and later ends. </li> <li>App Connect sends a <code>createCallLog</code> request.</li> <li>The user sees the newly created log file and decides to manually edit the record in the CRM. </li> <li>RingCentral makes available the recording of the call. </li> <li>App Connect sends an <code>updateCallLog</code> request with the recording. </li> </ol> <p>In the above scenario, if the developer is not careful, any edits the user may have made in step 3 might be overwritten by the adapter. Therefore, it is advisable that the <code>updateCallLog</code> operation update the existing call log record using text substitution, rather than re-composing the call log content and replacing the existing call log record. </p> <p>Tip: create placeholder text</p> <p>Given that you may receive multiple requests to update a call log record before the call log is finalized, the process of updating a record can be made easier by inserting placeholder text that can later easily by searched for and replaced. For example, when a call log is first created the call's duration may not yet be finalized. So initially you want to insert the following text:</p> <pre><code> * Call duration: 4 min 30 sec (pending)\n</code></pre> <p>Then in a subsequent call to <code>updateCallLog</code> you can do a regex replacement such as:</p> <pre><code> s/\\* Call duration: (.* (\\(pending\\))?)/Call duration: $final_duration/\n</code></pre> <p>Similarly, for a call recording you can create an initial call log record with the following text:</p> <pre><code> * Call recording: &lt;recording being processed by RingCentral&gt;\n</code></pre> <p>And then replace the text like so:</p> <pre><code> s/\\* Call recording: .*/Call recording: $recording_link/\n</code></pre>"},{"location":"developers/logging-calls/#logging-call-recordings","title":"Logging call recordings","text":"<p>If a <code>recordingLink</code> data element is transmitted to the adapter via the <code>updateCallLog</code> or <code>createCallLog</code> interfaces, then a recording exists for the associated phone call. The value of <code>recordingLink</code> is a URL that directs users to the <code>media.ringcentral.com</code> service where users can access and/or listen to or watch the associated media. RingCentral will enforce access controls to the associated file so that only those permitted to access the media do so. </p> <p>Call recordings take time to process</p> <p>Be aware that it may take some time for RingCentral's servers to process and upload recordings. The delay can range from seconds to minutes, depending on the call's duration and server load. </p>"},{"location":"developers/logging-calls/#downloading-the-call-recording","title":"Downloading the call recording","text":"<p>Some adapters may wish to download the media file to upload it, or archive it elsewhere. To download a media file, use the <code>callLog.recording.downloadUrl</code> element to do so. The value of this element contains an access token needed to access the file. Compose an HTTP GET request to the URL to begin downloading the file in <code>audio/mpeg</code> or <code>audio/wav</code> formats. </p>"},{"location":"developers/logging-calls/#logging-ai-artifacts-call-summaries-and-transcripts","title":"Logging AI artifacts: call summaries and transcripts","text":"<p>A RingSense license is required for a user to automatically log AI data in a remote system</p> <p>\" If a user is entitled to log AI artifacts in a CRM, then the AI data will be transmitted to the adapter via the <code>updateCallLog</code> or <code>createCallLog</code> interfaces. Consequently, if these data elements are not present, then it is safe to assume that the user is not permitted to log this data. </p> <p>AI artifacts can be found in the following properties:</p> Property Description <code>aiNote</code> The call recap object. This is a structured data element which may optionally contain action items, a call summary, decisions made, etc. <code>transcript</code> A diarized transcript of the call. <p>Transcripts are time coded to help systems known when words/phrases were uttered. Adapter developers may wish to encode transcripts in a more readable form when saving them to a CRM.</p>"},{"location":"developers/logging-calls/#test-your-adapter","title":"Test your adapter","text":"<ol> <li>Make a call to a known contact</li> <li>Click <code>+</code> button near a call record to log the call</li> <li>Check if call log is saved on CRM platform and database (<code>CHECK.4</code>)</li> <li>Click <code>Edit</code> button near the call record to update the log</li> <li>Check if call log's subject and note are pulled correctly (<code>CHECK.5</code>)</li> <li>Edit subject and note, then click <code>Update</code></li> <li>Check if call log is updated on CRM platform (<code>CHECK.6</code>)</li> </ol>"},{"location":"developers/logging-calls/#log-page-setup","title":"Log page setup","text":"<p>Please go to manifest.</p>"},{"location":"developers/logging-calls/#internal-call-logging","title":"Internal call logging","text":"<p>To enable internal call logging for extension numbers under your main number, please add <code>enableExtensionNumberLoggingSetting</code> under your manifest platform info. Users would need to turn on <code>Allow extension number logging</code> under <code>Contacts</code> settings. Then on server end, <code>isExtension</code> flag will be passed in as in <code>src/adapters/testCRM/index.js</code> - <code>findContact()</code>.</p>"},{"location":"developers/logging-sms/","title":"Logging an SMS message or conversation","text":"<p>The developer framework is currently in BETA</p> <p>This framework is in beta. Please submit a Github issue if you encounter any problems or have a question.</p> <p>App Connect allows users to log in their CRM all forms of communication with a customer, which includes SMS or text messages. This interface describes how to log an SMS conversation within the target CRM. </p>"},{"location":"developers/logging-sms/#important-note","title":"Important note","text":"<p>Message logging is slightly different from call logging. Message logs could become pretty messy. This framework applies an idea to group messages together, and here is how:</p> <p>Message logs are grouped per conversation per day, meaning there will be just one CRM activity for all messages that happen under the same conversation on the same day.</p> <p>Therefore, the first message during the day will be logged using <code>createMessageLog</code> to create a new CRM activity, while the following messages are added to the existing activity using <code>updateMessageLog</code>. And the framework already takes care of separating the 1st message and the rest.</p>"},{"location":"developers/logging-sms/#implement-server-endpoints","title":"Implement server endpoints","text":"<p>Within your adapter's <code>index.js</code> file, implement the following methods.</p> <ul> <li><code>createMessageLog</code> </li> <li><code>updateMessageLog</code></li> </ul>"},{"location":"developers/logging-sms/#test","title":"Test","text":"<ol> <li>Send a SMS message to a known contact</li> <li>Click <code>+</code> button near a conversation record to log all unlogged messages under this conversation</li> <li>Check if message log is saved on CRM platform and database (<code>CHECK.7</code>)</li> <li>Send another SMS message to the same contact</li> <li>Click <code>+</code> button near a conversation record to log all unlogged messages under this conversation</li> <li>Check if message log is added to previously created log on CRM platform and as a new record in database (<code>CHECK.8</code>)</li> </ol>"},{"location":"developers/logging-sms/#tips","title":"Tips","text":"<p>The framework checks database to see if there's existing message log on the day. If you want to setup a scenario to test 1st message, you could delete all message log records in database.</p>"},{"location":"developers/logging-sms/#log-page-setup","title":"Log page setup","text":"<p>Please go to manifest.</p>"},{"location":"developers/manifest-pages/","title":"Customizing pages","text":""},{"location":"developers/manifest-pages/#customizing-the-welcome-message","title":"Customizing the welcome message","text":"<p>When a user installs App Connect for the first time and accesses it from their CRM, a welcome page or splash screen appears to the user. This screen can be very effective in educating the end user about how to setup and connect to the associated CRM. </p> <p>Currently welcome pages are relatively simple, providing developers with the ability to direct users to two key resources under <code>embeddedOnCrmPage.welcomePage</code>:</p> <ul> <li><code>docLink</code>: A URL to read documentation</li> <li><code>videoLink</code>: A URL to watch a video</li> </ul>"},{"location":"developers/manifest-pages/#customizing-pages-within-the-client-application","title":"Customizing pages within the client application","text":"<p>There are a number of pages within the App Connect client application that often need to be customized in some way for the corresponding CRM. Those pages are:</p> <ul> <li>CRM authentication page (ONLY for <code>apiKey</code> auth)</li> <li>Call logging form</li> <li>Message logging form</li> </ul>"},{"location":"developers/manifest-pages/#adding-custom-fields-to-logging-forms","title":"Adding custom fields to logging forms","text":"<p>CRMs almost always have a set of fields associated with logging an activity that are relatively unique. Consider for example Clio, a CRM used by legal professionals, in which users link calls to \"matters\" (e.g. a \"legal matter\"). Where CRMs like Insightly link calls to opportunities. To account for this, the framework makes it easy to add new custom form fields to two key forms users interact with frequently:</p> <ul> <li>Call logging page</li> <li>Create contact page</li> </ul> <p>For each page, you will define an array of <code>additionalFields</code>. Each additional field element consists of the properties below.</p> Name Type Description <code>const</code> string A unique key identifying the field. <code>title</code> string The display name of the field. <code>type</code> string The data type associated with the field. <code>contactDependent</code> boolean Set to <code>true</code> if this field would change when the selected contact is changed, or <code>false</code> if the value is static."},{"location":"developers/manifest-pages/#custom-call-log-fields","title":"Custom call log fields","text":"<p>In the following example, a \"Deals\" pull-down menu with three options, and an \"Address\" text input is added to the call log form. </p> <pre><code>              \"defaultValue\": true\n            }\n          ]\n        }\n      ],\n      \"page\": {\n        \"callLog\": {\n          \"additionalFields\": [\n            {\n              \"const\": \"associatedDeal\",\n              \"title\": \"Deals\",\n              \"type\": \"selection\",\n              \"contactDependent\": true\n            },\n            {\n              \"const\": \"address\",\n              \"title\": \"Address\",\n</code></pre>"},{"location":"developers/manifest-pages/#custom-sms-log-fields","title":"Custom SMS log fields","text":"<p>Setup the same fields as above, but associated with the SMS logging page.</p> <pre><code>              \"type\": \"inputField\",\n              \"contactDependent\": false\n            }\n          ]\n        },\n        \"messageLog\": {\n          \"additionalFields\": [\n            {\n              \"const\": \"associatedDeal\",\n              \"title\": \"Deals\",\n              \"type\": \"selection\",\n              \"contactDependent\": true\n            },\n            {\n              \"const\": \"address\",\n              \"title\": \"Address\",\n</code></pre>"},{"location":"developers/manifest-pages/#feedback-page","title":"Feedback page","text":"<p>A feedback page allows you to facilitate the collection of feedback from users. When defined a feedback link will appear in App Connect for users to click. When clicked, a form will be displayed to the user prompting them for feedback. The structure and input elements of the form are configurable.</p> <p>To use feedback page, please create <code>feedback</code> object under <code>page</code>. The <code>feedback</code> object has the following properties:</p> Name Type Description <code>url</code> string A URL that the feedback form will post data to. Query parameters can be setup. Please refer to below <code>elements</code> array Page and input elements that will comprise the feedback form. Please refer to below"},{"location":"developers/manifest-pages/#page-elements-and-query-parameters","title":"Page elements and query parameters","text":"<p>Page elements are defined as similar to log page fields above:</p> Name Type Description <code>const</code> string A unique key identifying the field. <code>title</code> string The display name of the field. <code>type</code> string The input type associated with the field. <code>string</code>, <code>inputField</code> and <code>selection</code> <code>bold</code> boolean (Only applicable for <code>string</code>) <code>selections</code> array Each element has only <code>const</code> and <code>title</code> <code>required</code> boolean If true, the form cannot be submitted until a value has been entered. <code>placeholder</code> string A placeholder value to be replaced by the user. Only applicable for <code>inputField</code>."},{"location":"developers/manifest-pages/#submitting-feedback-forms","title":"Submitting feedback forms","text":"<p>When a user submits the feedback form, the feedback will be submitted to the designated <code>url</code>. The URL supports a number of tokens so that you can encode user submitted form data into the URL being posted to. These tokens are as follows:</p> Name Is native Description <code>crmName</code> true Your crm platform name <code>userName</code> true RingCentral user name <code>userEmail</code> true RingCentral user email Element const value false Any custom field that you define in your feedback page <p>Posting to a Google Form</p> <p>Posting feedback to a Google Form such that the user's input is pre-filled on the resulting Google Form page requires you to encode the Google Form URL with custom values. This is achieved through the use of tokens. For example, consider the need to construct the following URL:</p> <pre><code>https://docs.google.com/forms/d/e/:FORM_ID/viewform?\n   usp=pp_url&amp;entry.912199227={score}&amp;entry.912199228={crmName}\n</code></pre> <p>Prior to the form being posted to the URL, the <code>{score}</code> and <code>{crmName}</code> tokens will be replaced with their corresponding values, using user-provided data when present. </p>"},{"location":"developers/manifest-sample/","title":"Sample manifest file","text":"<p>Here is a sample manifest file that illustrates the full syntax and structure of the manifest file. </p> <pre><code>{\n  \"serverUrl\": \"https://xxxx.ngrok.app\",\n  \"redirectUri\": \"https://ringcentral.github.io/ringcentral-embeddable/redirect.html\",\n  \"author\": {\n    \"name\": \"Test Developer\",\n    \"websiteUrl\": \"\"\n  },\n  \"platforms\": {\n    \"testCRM\": {\n      \"logoUrl\": \"https://avatars.githubusercontent.com/u/6549285?s=200&amp;v=4\",\n      \"documentationUrl\": \"https://ringcentral.github.io/rc-unified-crm-extension\",\n      \"releaseNotesUrl\": \"https://ringcentral.github.io/rc-unified-crm-extension/release-notes/\",\n      \"getSupportUrl\": \"https://community.ringcentral.com/topic/new?fid=22\",\n      \"writeReviewUrl\": \"https://chromewebstore.google.com/detail/ringcentral-crm-extension/kkhkjhafgdlihndcbnebljipgkandkhh/reviews\",\n      \"urlIdentifier\": \"*.labs.ringcentral.com/*\",\n      \"name\": \"testCRM\",\n      \"displayName\": \"Test CRM\",\n      \"logFormat\": \"text/plain\",\n      \"embedUrls\": [\n        \"https://*.ringcentral.com/*\"\n      ],\n      \"useLicense\": true,\n      \"enableExtensionNumberLoggingSetting\": true,\n      \"requestConfig\": {\n        \"timeout\": 30\n      },\n      \"auth\": {\n        \"type\": \"apiKey\",\n        \"apiKey\": {\n          \"page\": {\n            \"title\": \"test CRM\",\n            \"content\": [\n              {\n                \"const\": \"apiKey\",\n                \"title\": \"apiKey\",\n                \"type\": \"string\",\n                \"required\": true\n              }\n            ]\n          }\n        },\n        \"oauth\": {\n          \"authUrl\": \"\",\n          \"clientId\": \"\",\n          \"redirectUri\": \"https://ringcentral.github.io/ringcentral-embeddable/redirect.html\",\n          \"customState\": \"\",\n          \"scope\": \"\"\n        }\n      },\n      \"canOpenLogPage\": false,\n      \"contactTypes\": [\n        {\n          \"display\": \"TestContactType\",\n          \"value\": \"testContact\"\n        },\n        {\n          \"display\": \"Contact\",\n          \"value\": \"cta\"\n        }\n      ],\n      \"embeddedOnCrmPage\": {\n        \"welcomePage\": {\n          \"docLink\": \"https://ringcentral.github.io/rc-unified-crm-extension/\",\n          \"videoLink\": \"https://youtu.be/pQgdsAR1UCI\"\n        }\n      },\n      \"settings\": [\n        {\n          \"id\": \"testCallLogDetails\",\n          \"type\": \"section\",\n          \"name\": \"Call log details\",\n          \"items\": [\n            {\n              \"id\": \"addCallLogNote\",\n              \"type\": \"boolean\",\n              \"name\": \"Add note to call log\",\n              \"defaultValue\": true\n            },\n            {\n              \"id\": \"addCallLogSubject\",\n              \"type\": \"boolean\",\n              \"name\": \"Add subject to call log\",\n              \"defaultValue\": true\n            },\n            {\n              \"id\": \"addCallLogContactNumber\",\n              \"type\": \"boolean\",\n              \"name\": \"Add contact phone number to call log\",\n              \"defaultValue\": true\n            },\n            {\n              \"id\": \"addCallLogDateTime\",\n              \"type\": \"boolean\",\n              \"name\": \"Add date and time to call log\",\n              \"defaultValue\": true\n            },\n            {\n              \"id\": \"addCallLogDuration\",\n              \"type\": \"boolean\",\n              \"name\": \"Add duration to call log\",\n              \"defaultValue\": true\n            },\n            {\n              \"id\": \"addCallLogResult\",\n              \"type\": \"boolean\",\n              \"name\": \"Add call result to call log\",\n              \"defaultValue\": true\n            },\n            {\n              \"id\": \"addCallLogRecording\",\n              \"type\": \"boolean\",\n              \"name\": \"Add recording link to call log\",\n              \"defaultValue\": true\n            }\n          ]\n        }\n      ],\n      \"page\": {\n        \"callLog\": {\n          \"additionalFields\": [\n            {\n              \"const\": \"associatedDeal\",\n              \"title\": \"Deals\",\n              \"type\": \"selection\",\n              \"contactDependent\": true\n            },\n            {\n              \"const\": \"address\",\n              \"title\": \"Address\",\n              \"type\": \"inputField\",\n              \"contactDependent\": false\n            }\n          ]\n        },\n        \"messageLog\": {\n          \"additionalFields\": [\n            {\n              \"const\": \"associatedDeal\",\n              \"title\": \"Deals\",\n              \"type\": \"selection\",\n              \"contactDependent\": true\n            },\n            {\n              \"const\": \"address\",\n              \"title\": \"Address\",\n              \"type\": \"inputField\",\n              \"contactDependent\": false\n            }\n          ]\n        }\n      },\n      \"rcAdditionalSubmission\": [\n        {\n          \"id\": \"departmentName\",\n          \"path\": \"cachedData.extensionInfo.contact.department\"\n        }\n      ]\n    }\n  },\n  \"version\": \"1.6.9\"\n}\n</code></pre>"},{"location":"developers/manifest/","title":"Configuring your adapter's manifest","text":"<p>The developer framework is currently in BETA</p> <p>This framework is in beta. Please submit a Github issue if you encounter any problems or have a question.</p> <p>An adapter's manifest file helps a developer to instruct the framework on how to interface with your adapter. It enables developers to customize the user interface within certain boundaries, enables authentication and connectivity with the target CRM and more. </p> <p>Below you will find an explanation of the many properties found within a manifest file. </p>"},{"location":"developers/manifest/#turn-on-developer-mode","title":"Turn on developer mode","text":"<p>To use a custom manifest, we'll need to turn on developer mode and assign a custom manifest url to the extension. Here's how:</p> <ol> <li>Open DevTools</li> <li>In console, execute <code>window.postMessage({type: 'toggle-developer-mode', toggle: true})</code> and reload the extension</li> <li>In user settings, there's a section for <code>Developer settings</code>. Input your custom manifest url and save</li> <li>Reload the extension to make it work</li> </ol>"},{"location":"developers/manifest/#basic-properties","title":"Basic properties","text":"<p>These basic properties </p> Name Type Description <code>author</code> string The author of the adapter. This is displayed to end users within the Chrome extension. <code>platforms</code> ARRAY of object An array of platforms being integrated with. Each element of this array defines a different CRM. <code>serverUrl</code> string The base URL the Chrome extension will used when composing requests to your adapter. The URL should utilize HTTPS and should omit the trailing slash (<code>/</code>). For example: <code>https://my-adapter.myserver.com</code> <code>version</code> string The version of your adapter. This is displayed to end users within the Chrome extension."},{"location":"developers/manifest/#platform-configuration","title":"Platform configuration","text":"<p>Each manifest file contains an array of <code>platform</code> objects. This is helpful for developers who manage multiple CRM adapters from the same server. </p> <p>The platforms property is an associative array. Each key should be a unique identifier for the crm. The value of each element is an object with the following properties. </p> Name Type Description <code>name</code> string The name of the CRM. <code>displayName</code> string The display name of the CRM. <code>urlIdentifier</code> string The URL for which this CRM will be enabled. When the CRM is enabled for a domain, the extension's orange quick access button will appear. (<code>*</code> for wildcard match is supported) <code>auth</code> object Contains all info for authorization. Details <code>canOpenLogPage</code> boolean Set to <code>true</code> if the corresponding CRM supports permalinks for a given activity/log. When set to <code>true</code> users will have the option view/open the activity log in the CRM from the call history page. When set to <code>false</code>, users will open the contact page instead. <code>contactTypes</code> ARRAY of object (Optional) CRMs often adopt unique vernaculars to describe contacts. Provide the enumerated list of contact types supported by the corresponding CRM. Each object has <code>display</code> and <code>value</code>. <code>contactPageUrl</code> string A format string to open a CRM's contact page, e.g.<code>https://{hostname}/person/{contactId}</code>. Supported parameters: <code>{hostname}</code>, <code>{contactId}</code>, <code>{contactType}</code> <code>embeddedOnCrmPage</code> object The rendering config for embedded page, explained here <code>logPageUrl</code> string A format string to open CRM log page. Eg.<code>https://{hostname}/activity/{logId}</code>. Supported parameters: <code>{hostname}</code>, <code>{logId}</code>, <code>{contactType}</code> <code>page</code> object The rendering config for all pages, explained here <code>requestConfig</code> object Contains http request config for client extension, including <code>timeout</code> (number in seconds) <p>The client-side authorization url that is opened by the extension will be: <code>{authUrl}?responseType=code&amp;client_id={clientId}&amp;{scope}&amp;state=platform={name}&amp;redirect_uri=https://ringcentral.github.io/ringcentral-embeddable/redirect.html</code></p>"},{"location":"developers/manifest/#authorization","title":"Authorization","text":"<p><code>platform</code> has <code>auth</code> object which has following parameters:</p> Name Type Description <code>type</code> string The authorization mode utilized by the target CRM. Only two values are supported: <code>oauth</code> and <code>apiKey</code>. Setting up auth is covered in more detail in the Authorization section. <code>oauth</code> object Only used with <code>type</code> equal to <code>oauth</code>. It contains <code>authUrl</code>, <code>clientId</code> and <code>redirectUri</code>. <code>apiKey</code> object Only used with <code>type</code> equal to <code>apiKey</code>. It contains <code>page</code>"},{"location":"developers/manifest/#oauth-parameters","title":"oauth parameters","text":"Name Type Description <code>authUrl</code> string Only used with <code>authType</code> equal to <code>oauth</code>. The auth URL to initiate the OAuth process with the CRM. <code>clientId</code> string Only used with <code>authType</code> equal to <code>oauth</code>. The client ID of the application registered with the CRM to access it's API. <code>redirectUri</code> string The Redirect URI used when logging into RingCentral (not the CRM). It's recommended to use the default value of <code>https://ringcentral.github.io/ringcentral-embeddable/redirect.html</code>. <code>customState</code> string (Optional) Only if you want to override state query string in OAuth url. The state query string will be <code>state={customState}</code> instead. <code>scope</code> string (Optional) Only if you want to specify scopes in OAuth url. eg. \"scope\":\"scopes=write,read\""},{"location":"developers/manifest/#customizing-pages-within-the-client-application","title":"Customizing pages within the client application","text":"<p>There are a number of pages within the App Connect client application that often need to be customized in some way for the corresponding CRM. Those pages are:</p> <ul> <li>CRM authentication page (ONLY for <code>apiKey</code> auth)</li> <li>Call logging form</li> <li>Message logging form</li> </ul>"},{"location":"developers/manifest/#apikey-auth-page","title":"apiKey auth page","text":"Sample adapterInsightly adapter <pre><code>      \"useLicense\": true,\n      \"enableExtensionNumberLoggingSetting\": true,\n      \"requestConfig\": {\n        \"timeout\": 30\n      },\n      \"auth\": {\n        \"type\": \"apiKey\",\n        \"apiKey\": {\n          \"page\": {\n            \"title\": \"test CRM\",\n            \"content\": [\n              {\n                \"const\": \"apiKey\",\n                \"title\": \"apiKey\",\n                \"type\": \"string\",\n</code></pre> <pre><code>              \"title\": \"Organisation\",\n              \"type\": \"selection\",\n              \"contactDependent\": true\n            },\n            {\n              \"const\": \"opportunity\",\n              \"title\": \"Opportunity\",\n              \"type\": \"selection\",\n              \"contactDependent\": true\n            },\n            {\n              \"const\": \"project\",\n              \"title\": \"Project\",\n              \"type\": \"selection\",\n              \"contactDependent\": true\n            }\n          ]\n        },\n        \"messageLog\": {\n          \"additionalFields\": [\n            {\n              \"const\": \"organization\",\n              \"title\": \"Organisation\",\n              \"type\": \"selection\",\n              \"contactDependent\": true\n            },\n            {\n              \"const\": \"opportunity\",\n              \"title\": \"Opportunity\",\n              \"type\": \"selection\",\n              \"contactDependent\": true\n            },\n            {\n</code></pre>"},{"location":"developers/manifest/#adding-custom-fields-to-logging-forms","title":"Adding custom fields to logging forms","text":"<p>CRMs almost always have a set of fields associated with logging an activity that are relatively unique. Consider for example Clio, a CRM used by legal professionals, in which users link calls to \"matters\" (e.g. a \"legal matter\"). Where CRMs like Insightly link calls to opportunities. To account for this, the framework makes it easy to add new custom form fields to two key forms users interact with frequently:</p> <ul> <li>Call logging page</li> <li>Create contact page</li> </ul> <p>For each page, you will define an array of <code>additionalFields</code>. Each additional field element consists of the properties below.</p> Name Type Description <code>const</code> string A unique key identifying the field. <code>title</code> string The display name of the field. <code>type</code> string The data type associated with the field. <code>contactDependent</code> boolean Set to <code>true</code> if this field would change when the selected contact is changed, or <code>false</code> if the value is static."},{"location":"developers/manifest/#custom-call-log-fields","title":"Custom call log fields","text":"<p>Set up associated deals as dropdown options:</p> <ol> <li>Christmas special A351</li> <li>Easter A22</li> <li>Anniversary C92</li> </ol> <p>And then setup \"Address\" as free input field.</p> <pre><code>              \"defaultValue\": true\n            }\n          ]\n        }\n      ],\n      \"page\": {\n        \"callLog\": {\n          \"additionalFields\": [\n            {\n              \"const\": \"associatedDeal\",\n              \"title\": \"Deals\",\n              \"type\": \"selection\",\n              \"contactDependent\": true\n            },\n            {\n              \"const\": \"address\",\n              \"title\": \"Address\",\n</code></pre>"},{"location":"developers/manifest/#custom-sms-log-fields","title":"Custom SMS log fields","text":"<p>Set up associated deals the same as call log</p> <pre><code>              \"type\": \"inputField\",\n              \"contactDependent\": false\n            }\n          ]\n        },\n        \"messageLog\": {\n          \"additionalFields\": [\n            {\n              \"const\": \"associatedDeal\",\n              \"title\": \"Deals\",\n              \"type\": \"selection\",\n              \"contactDependent\": true\n            },\n            {\n              \"const\": \"address\",\n              \"title\": \"Address\",\n</code></pre>"},{"location":"developers/manifest/#customizing-the-welcome-message","title":"Customizing the welcome message","text":"<p>When a user installs App Connect for the first time and accesses it from their CRM, a welcome page or splash screen appears to the user. This screen can be very effective in educating the end user about how to setup and connect to the associated CRM. </p> <p>Currently welcome pages are relatively simple, providing developers with the ability to direct users to two key resources under <code>embeddedOnCrmPage.welcomePage</code>:</p> <ul> <li><code>docLink</code>: A URL to read documentation</li> <li><code>videoLink</code>: A URL to watch a video</li> </ul>"},{"location":"developers/manifest/#user-settings-for-default-log-form-values","title":"User settings for default log form values","text":"<p>This topic is closely related to the use of auto log. For manual log cases, using Bullhorn as example, users would need to manually select one of the <code>Note action</code> codes. In auto log scenarios, the extension would refuse to auto log because it misses selection for <code>Note action</code> code value. Now, default log form values would be able to help. It has 4 cases: <code>inbound call</code>, <code>outbound call</code>, <code>message</code> and <code>voicemail</code> where we can predefine default values.</p> <p>Here's the example from Bullhorn. In <code>settings</code>, we want to add a new custom setting, and on log page render, we want to link the default values from user settings.</p> <p></p> <pre><code>{\n    \"settings\": \n        [\n            {\n                \"id\": \"bullhornDefaultNoteAction\",\n                \"type\": \"section\",\n                \"name\": \"Bullhorn options\",\n                \"items\": [\n                    {\n                        \"id\": \"noteActionMatchWarning\",\n                        \"name\": \"Info: note action matching warning\",\n                        \"type\": \"warning\",\n                        \"value\": \"Note action value match ignores cases and spaces\"\n                    },\n                    {\n                        \"id\": \"bullhornInboundCallNoteAction\",\n                        \"type\": \"inputField\",\n                        \"name\": \"Default action for inbound calls\",\n                        \"placeholder\": \"Enter action value\"\n                    },\n                    {\n                        \"id\": \"bullhornOutboundCallNoteAction\",\n                        \"type\": \"inputField\",\n                        \"name\": \"Default action for outbound calls\",\n                        \"placeholder\": \"Enter action value\"\n                    },\n                    {\n                        \"id\": \"bullhornMessageNoteAction\",\n                        \"type\": \"inputField\",\n                        \"name\": \"Default action for SMS\",\n                        \"placeholder\": \"Enter action value\"\n                    },\n                    {\n                        \"id\": \"bullhornVoicemailNoteAction\",\n                        \"type\": \"inputField\",\n                        \"name\": \"Default action for voicemails\",\n                        \"placeholder\": \"Enter action value\"\n                    }\n                ]\n            }\n        ]\n}\n</code></pre> <p>Page fields need to be set to use default values mapped from user settings. </p> <pre><code>{\n    \"page\": {\n        \"callLog\": {\n            \"additionalFields\": [\n                {\n                    \"const\": \"noteActions\",\n                    \"title\": \"Note action\",\n                    \"type\": \"selection\",\n                    \"contactDependent\": false,\n                    \"defaultSettingId\": \"bullhornDefaultNoteAction\",\n                    \"defaultSettingValues\": {\n                        \"inboundCall\": {\n                            \"settingId\": \"bullhornInboundCallNoteAction\"\n                        },\n                        \"outboundCall\": {\n                            \"settingId\": \"bullhornOutboundCallNoteAction\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"messageLog\": {\n            \"additionalFields\": [\n                {\n                    \"const\": \"noteActions\",\n                    \"title\": \"Note action\",\n                    \"type\": \"selection\",\n                    \"contactDependent\": false,\n                    \"defaultSettingId\": \"bullhornDefaultNoteAction\",\n                    \"defaultSettingValues\": {\n                        \"message\": {\n                            \"settingId\": \"bullhornMessageNoteAction\"\n                        },\n                        \"voicemail\": {\n                            \"settingId\": \"bullhornVoicemailNoteAction\"\n                        }\n                    }\n                }\n            ]\n        }\n    }\n}\n</code></pre>"},{"location":"developers/placeholder-contacts/","title":"Creating a placeholder contact","text":"<p>The developer framework is currently in BETA</p> <p>This framework is in beta. Please submit a Github issue if you encounter any problems or have a question.</p> <p>In the event that no contact could be found with an associated phone number, then the client application will prompt a user to create a placeholder contact.</p> <p>In the framework's logic, contact creation is coupled with call/message logging. It'll only be used in one case: logging a call/message against an unknown contact. Therefore, it can be described as:</p> <p>logging against an unknown contact = create a placeholder contact + logging against it</p>"},{"location":"developers/placeholder-contacts/#implement-server-endpoints","title":"Implement server endpoints","text":"<p>Within your adapter's <code>index.js</code> file, implement the following methods.</p> <ul> <li><code>createContact</code> </li> </ul>"},{"location":"developers/placeholder-contacts/#test","title":"Test","text":"<ol> <li>Make a call to an uknown contact</li> <li>Click <code>+</code> button near a call record to log the call</li> <li>Check if the contact is created on CRM platform (<code>CHECK.9</code>)</li> <li>Check if call log is saved on CRM platform and database (<code>CHECK.9</code>)</li> </ol>"},{"location":"developers/proprietary-crm/","title":"Is your CRM App Connect-ready?","text":"<p>The App Connect framework from RingCentral can be used to build an integration with any CRM, even a home-grown or proprietary one. If you are seeking to build an adapter for a commercial or home-grown CRM, here is a check list to see if the system you are integrating with is compatible with this framework. </p>"},{"location":"developers/proprietary-crm/#compatibility-checklist-for-crms","title":"Compatibility checklist for CRMs","text":"<p> OAuth 2.0 support</p> <p>Ideally, your CRM supports the OAuth 2.0 authorization protocol. From the perspective of building the adapter, this will by far be the easiest most turn-key way to connect the App Connect client application to your CRM. </p> <p>Technically, the framework can be made to work with alternative authentication mechanisms, like API keys and other tokenized methods. However, there is no guarantee such mechanisms will work out of the box. </p> <p>A similar API is needed to log a user out. This API would effectively invalidate an access key so that it cannot be used again. </p> <p> API to create a call log, note or activity record</p> <p>Every CRM has its own unique vernacular, but at the end of the day the core function of an adapter is to facilitate the process of recording communications in the CRM in question. To do that, the CRM needs an API that allows the adapter to store in the CRM's database a record of a phone call or SMS message.</p> <p>A similar API will be needed for fetching, and editing/updating call logs as well. </p> <p> API to lookup associations with a phone number</p> <p>To execute a call pop, which describes the process of opening a web page or fetching information about the person or contact one is calling or receiving a call from, the CRM needs an API that can receive as input a phone number, and return information about the person corresponding to that phone number. </p> <p>Ideally, that API will take as input a phone number in E.164 format but search the CRM for phone numbers stored in any other format. The stricter the search syntax is for phone numbers, the less reliably contacts/associations will be found when a search is conducted. </p> <p> API to create a contact</p> <p>When a call is received for which no association or contact exists, users are given the opportunity to create a contact record to associate the activity record with. To facilitate this user flow, an API must exist that allows a contact to be created and associated with a given phone number. </p> <p> API to fetch the name of the currently logged in user</p> <p>Finally, in order to show users that they have connected to the CRM successfully, an API needs to exist that returns the current user's name, and validates that the access key or API key used to authenticate with the CRM is valid. </p>"},{"location":"developers/proprietary-crm/#server-recommendations","title":"Server recommendations","text":"<p>Technically, an adapter's server could be implemented in any language. However, the fastest and easiest way to implement an adapter's server is using our pre-made Javascript adapter server framework.</p>"},{"location":"developers/regional-services/","title":"Regional Services","text":"<p>This document describes how the App Connect framework supports CRMs with different regional deployments.</p>"},{"location":"developers/regional-services/#overview","title":"Overview","text":"<p>Many CRM platforms maintain separate regional deployments to meet data residency requirements, reduce latency, or comply with local regulations. For example, some CRMs maintain separate US and EU servers, each with different URLs and potentially different authentication endpoints.</p> <p>The App Connect framework provides built-in support for regional services through a flexible configuration system.</p>"},{"location":"developers/regional-services/#implementation-with-manifest-override","title":"Implementation with Manifest Override","text":"<p>Regional services are supported through the <code>override</code> property in the manifest configuration. This powerful feature allows you to define conditions under which certain properties of your manifest should be replaced with alternative values.</p>"},{"location":"developers/regional-services/#example-clio-configuration","title":"Example: Clio Configuration","text":"<p>Clio provides a great example of regional configuration. They maintain different servers for different regions, each with unique authentication endpoints:</p> <pre><code>\"override\": [\n    {\n        \"triggerType\": \"hostname\",\n        \"triggerValue\": \"au.app.clio.com\",\n        \"overrideObjects\": [\n            {\n                \"path\": \"auth.oauth.authUrl\",\n                \"value\": \"https://au.app.clio.com/oauth/authorize\"\n            }\n        ]\n    }\n]\n</code></pre> <p>In this example: - The <code>triggerType</code> is set to \"hostname\"  - When the hostname matches \"au.app.clio.com\" (Australian region) - The framework overrides specific configuration values:   - The OAuth authorization URL is set to the Australian server</p>"},{"location":"developers/regional-services/#how-it-works","title":"How It Works","text":"<ol> <li>The client-side application monitors for trigger conditions (currently only hostname is supported as a trigger)</li> <li>When a trigger condition is met, the app locates the specified path in the manifest configuration</li> <li>It then replaces the default value with the region-specific value defined in the override</li> </ol> <p>This approach allows for seamless switching between regional deployments without requiring separate adapters or complex conditional logic in your code.</p>"},{"location":"developers/regional-services/#available-trigger-types","title":"Available Trigger Types","text":"<p>Currently, the only supported trigger type is <code>hostname</code>. If you need additional trigger types to better support your regional implementation, please create a GitHub issue requesting the specific trigger you require.</p>"},{"location":"developers/regional-services/#implementing-regional-services-in-your-adapter","title":"Implementing Regional Services in Your Adapter","text":"<p>When implementing support for regional services in your adapter:</p> <ol> <li> <p>Store Regional Information: Keep the regional API server URL in the user model in your database to maintain consistent connections with the correct region.</p> </li> <li> <p>Authentication Handling: Use environment variables and auth-related methods in your adapter to determine which server configuration to use.</p> </li> <li> <p>API Endpoint Selection: When making API calls, be mindful to use the correct regional server URLs if those are different.</p> </li> </ol>"},{"location":"developers/regional-services/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Comprehensive Testing: Test your adapter against all supported regional deployments to ensure consistent behavior.</p> </li> <li> <p>Clear Documentation: Document which regions are supported and any region-specific behavior or limitations.</p> </li> <li> <p>Default Region: Always provide a sensible default region configuration for new users.</p> </li> <li> <p>User Selection: Consider providing UI elements that allow users to select their region if it cannot be automatically detected.</p> </li> <li> <p>Error Handling: Implement robust error handling that accounts for regional differences in API responses or rate limits.</p> </li> </ol> <p>By following these guidelines, you can create a seamless experience for users regardless of which regional deployment of your CRM they are using.</p>"},{"location":"developers/view-details/","title":"View contact and log details","text":"<p>For a matched contact or a logged call, the extension supports to open the corresponding page on CRM.</p> <p></p> <p>To configure this feature, there are several fields to setup in <code>manifest.json</code>.</p> Name Type Description <code>canOpenLogPage</code> boolean Set to <code>true</code> if the corresponding CRM supports permalinks for a given activity/log. When set to <code>true</code> users will have the option view/open the activity log in the CRM from the call history page. When set to <code>false</code>, users will open the contact page instead. <code>contactPageUrl</code> string A format string to open CRM contact page. Eg.<code>https://{hostname}/person/{contactId}</code>. Supported parameters: <code>{hostname}</code>, <code>{contactId}</code>, <code>{contactType}</code> <code>logPageUrl</code> string A format string to open CRM log page. Eg.<code>https://{hostname}/activity/{logId}</code>. Supported parameters: <code>{hostname}</code>, <code>{logId}</code>, <code>{contactType}</code>"},{"location":"developers/interfaces/","title":"App Connect adapter interfaces","text":"<p>Each adapter exposes an API that the App Connect server connects and exchanges data with. Each endpoint or interface of this API corresponds to a function supported by App Connect, and is responsible for fulfilling that function within the context of the CRM being connected to. </p> <p>Every App Connect adapter needs to implement each of the following interfaces.</p> Interface Description <code>createCallLog</code> Creates a new call log or activity needs to be recorded in the CRM. <code>createMessageLog</code> Createa a new SMS conversation needs to be recorded in the CRM. <code>createContact</code> Creates a new contact, when a contact is not found for a phone number. <code>getAuthType</code> Returns the auth type specific to this CRM. <code>getCallLog</code> Loads the current state of the call log from the CRM in the event that the user may have edited the record directly. <code>findContact</code> Attempts to find and return one or more contacts associated with a phone number. <code>findContactWithName</code> Attempts to find and return one or more contacts associated with a name input by a user. <code>getOauthInfo</code> Returns key OAuth details to facilitate connect to a CRM. <code>unAuthorize</code> Logs a user out of the CRM, invalidates credentials, etc. <code>updateCallLog</code> Updates an existing call log record in the CRM. <code>updateMessageLog</code> Updates an existing message log in the CRM. <code>getLicenseStatus</code> Get license status for CRM user."},{"location":"developers/interfaces/checkAndRefreshAccessToken/","title":"checkAndRefreshAccessToken","text":"<p>For CRMs that don't follow standard OAuth 2.0 or API key authentication patterns, developers need to provide this method in their adapter to check and refresh tokens. This interface is particularly useful for CRMs like Bullhorn that have custom authentication flows or session management requirements.</p>"},{"location":"developers/interfaces/checkAndRefreshAccessToken/#when-to-implement","title":"When to implement","text":"<p>You should implement this interface when your CRM:</p> <ul> <li>Has custom session management (like Bullhorn's session tokens)</li> <li>Requires special token refresh logic beyond standard OAuth 2.0</li> <li>Uses non-standard authentication mechanisms</li> <li>Has platform-specific token validation requirements</li> </ul>"},{"location":"developers/interfaces/checkAndRefreshAccessToken/#input-parameters","title":"Input parameters","text":"Parameter Type Required Description <code>oauthApp</code> Object Yes The OAuth application instance created by <code>getOAuthApp()</code> <code>user</code> Object Yes The user object containing authentication tokens and platform-specific information <code>tokenLockTimeout</code> Number No Timeout in seconds for token refresh locks (default: 10)"},{"location":"developers/interfaces/checkAndRefreshAccessToken/#user-object-structure","title":"User object structure","text":"<p>The <code>user</code> object contains:</p> <pre><code>{\n  id: String,                    // User ID\n  accessToken: String,           // Current access token\n  refreshToken: String,          // Current refresh token  \n  tokenExpiry: Date,            // Token expiration timestamp\n  platform: String,             // Platform name (e.g., 'bullhorn')\n  platformAdditionalInfo: Object // Platform-specific data\n}\n</code></pre>"},{"location":"developers/interfaces/checkAndRefreshAccessToken/#return-values","title":"Return value(s)","text":"<p>This interface should return the updated <code>user</code> object with refreshed tokens if necessary.</p> <p>Return type: <code>Promise&lt;Object&gt;</code></p> <p>The returned user object should have updated: - <code>accessToken</code> - New access token if refreshed - <code>refreshToken</code> - New refresh token if refreshed - <code>tokenExpiry</code> - New expiration timestamp if refreshed - <code>platformAdditionalInfo</code> - Any platform-specific data that was updated</p>"},{"location":"developers/interfaces/checkAndRefreshAccessToken/#implementation-guidelines","title":"Implementation guidelines","text":"<ol> <li>Early return: If the user object is invalid or missing required tokens, return the user object as-is</li> <li>Token validation: Check if tokens are expired or about to expire (consider a buffer time)</li> <li>Refresh logic: Implement your CRM's specific token refresh mechanism</li> <li>Error handling: Handle authentication errors gracefully</li> <li>User persistence: Save the updated user object to the database</li> </ol>"},{"location":"developers/interfaces/checkAndRefreshAccessToken/#default-behavior","title":"Default behavior","text":"<p>If this interface is not implemented, the system will use the default OAuth 2.0 token refresh logic in <code>packages/core/lib/oauth.js</code>, which:</p> <ul> <li>Checks if tokens are expired (with 2-minute buffer)</li> <li>Uses standard OAuth 2.0 refresh token flow</li> <li>Supports token refresh locking via DynamoDB</li> <li>Handles concurrent refresh requests</li> </ul>"},{"location":"developers/interfaces/checkAndRefreshAccessToken/#reference","title":"Reference","text":"BullhornDefault OAuth Implementation <pre><code>                        }\n                        user = await UserModel.findByPk(user.id);\n                        console.log('Bullhron locked. bypass')\n                        return user;\n                    }\n                } else {\n                    throw e;\n                }\n            }\n        }\n        const startRefreshTime = moment();\n        console.log('Bullhorn token refreshing...')\n        let authData;\n        try {\n            const refreshTokenResponse = await axios.post(`${user.platformAdditionalInfo.tokenUrl}?grant_type=refresh_token&amp;refresh_token=${user.refreshToken}&amp;client_id=${process.env.BULLHORN_CLIENT_ID}&amp;client_secret=${process.env.BULLHORN_CLIENT_SECRET}`);\n            authData = refreshTokenResponse.data;\n        } catch (e) {\n            const serverLoggingSettings = await getServerLoggingSettings({ user });\n            if (serverLoggingSettings.apiUsername &amp;&amp; serverLoggingSettings.apiPassword) {\n                authData = await bullhornPasswordAuthorize(user, oauthApp, serverLoggingSettings);\n            } else {\n                throw e;\n            }\n        }\n        const { access_token: accessToken, refresh_token: refreshToken, expires_in: expires } = authData;\n        user.accessToken = accessToken;\n        user.refreshToken = refreshToken;\n        const userLoginResponse = await axios.post(`${user.platformAdditionalInfo.loginUrl}/login?version=2.0&amp;access_token=${user.accessToken}`);\n</code></pre> <pre><code>async function checkAndRefreshAccessToken(oauthApp, user, tokenLockTimeout = 20) {\n    const now = moment();\n    const tokenExpiry = moment(user.tokenExpiry);\n    const expiryBuffer = 2; // 2 minutes\n    // Special case: Bullhorn\n    if (user.platform) {\n        const platformModule = adapterRegistry.getAdapter(user.platform);\n        if (platformModule.checkAndRefreshAccessToken) {\n            return platformModule.checkAndRefreshAccessToken(oauthApp, user, tokenLockTimeout);\n        }\n    }\n    // Other CRMs - check if token will expire within the buffer time\n    if (user &amp;&amp; user.accessToken &amp;&amp; user.refreshToken &amp;&amp; tokenExpiry.isBefore(now.clone().add(expiryBuffer, 'minutes'))) {\n        // case: use dynamoDB to manage token refresh lock\n        if (adapterRegistry.getManifest('default')?.platforms?.[user.platform]?.auth?.useTokenRefreshLock) {\n            let newLock;\n            const { Lock } = require('../models/dynamo/lockSchema');\n            // Try to atomically create lock only if it doesn't exist\n            try {\n                newLock = await Lock.create(\n                    {\n                        userId: user.id,\n                        ttl: now.unix() + 30\n                    },\n                    {\n                        overwrite: false\n                    }\n                );\n                console.log('lock created')\n            } catch (e) {\n                // If creation failed due to condition, a lock exists\n                if (e.name === 'ConditionalCheckFailedException' || e.__type === 'com.amazonaws.dynamodb.v20120810#ConditionalCheckFailedException') {\n                    let lock = await Lock.get({ userId: user.id });\n                    if (!!lock?.ttl &amp;&amp; moment(lock.ttl).unix() &lt; now.unix()) {\n                        // Try to delete expired lock and create a new one atomically\n                        try {\n                            console.log('lock expired.')\n                            await lock.delete();\n                            newLock = await Lock.create(\n                                {\n                                    userId: user.id,\n                                    ttl: now.unix() + 30\n                                },\n                                {\n                                    overwrite: false\n                                }\n                            );\n                        } catch (e2) {\n                            if (e2.name === 'ConditionalCheckFailedException' || e2.__type === 'com.amazonaws.dynamodb.v20120810#ConditionalCheckFailedException') {\n                                // Another process created a lock between our delete and create\n                                lock = await Lock.get({ userId: user.id });\n                            } else {\n                                throw e2;\n                            }\n                        }\n                    }\n\n                    if (lock &amp;&amp; !newLock) {\n                        let processTime = 0;\n                        let delay = 500; // Start with 500ms\n                        const maxDelay = 8000; // Cap at 8 seconds\n                        while (!!lock &amp;&amp; processTime &lt; tokenLockTimeout) {\n</code></pre>"},{"location":"developers/interfaces/createCallLog/","title":"createCallLog","text":"<p>This interface is responsible for creating a new call log record in the associated CRM. The call must be associated with the contact passed in as a request parameter. Other associations may be made depending upon the CRM and the adapter. </p> <p>There is an underlying assumption of the framework that there is a one-to-one mapping between notes (or activities) and phone calls. Therefore, when logging a call in the target CRM only create a single log entry. </p>"},{"location":"developers/interfaces/createCallLog/#input-parameters","title":"Input parameters","text":"Parameter Description <code>user</code> An object describing the Chrome extension user associated with the action that triggered this interface. <code>contactInfo</code> An associative array describing the contact a call is associated with. <code>authHeader</code> The HTTP Authorization header to be transmitted with the API request to the target CRM. <code>callLog</code> All the metadata associated with the call to be logged. Call Log schema is described in our API Reference. <code>note</code> The notes saved by the user during and/or after the call. <code>additionalSubmission</code> All of the additional custom fields defined in the manifest and submitted by the user. <code>timezoneOffset</code> The timezone offset of the current user in the event you need to use UTC when calling the CRM's API."},{"location":"developers/interfaces/createCallLog/#contact-info","title":"Contact Info","text":"<pre><code>{ \n  id: \"&lt;string\"&gt;,\n  type: \"&lt;string&gt;\", \n  phoneNumber: \"&lt;E.164 Phone Number&gt;\",\n  name: \"&lt;string&gt;\"\n}\n</code></pre>"},{"location":"developers/interfaces/createCallLog/#return-values","title":"Return value(s)","text":"<p>An object with following properties:</p> Parameter Description <code>logId</code> ID of the log entry created within the CRM <code>returnMessage</code> <code>message</code>, <code>messageType</code> and <code>ttl</code> <p>Example <pre><code>  return {\n    logId: \"xxx-xxxxx\", // ID of log entity on CRM platform\n    returnMessage:{\n      message: 'Call logged',\n      messageType: 'success', // 'success', 'warning' or 'danger'\n      ttl: 30000 // in miliseconds\n    }\n  }\n</code></pre></p>"},{"location":"developers/interfaces/createCallLog/#reference","title":"Reference","text":"Example CRMPipedrive <pre><code>    //     body: `\\nContact Number: ${contactInfo.phoneNumber}\\nCall Result: ${callLog.result}\\nNote: ${note}${callLog.recording ? `\\n[Call recording link] ${callLog.recording.link}` : ''}\\n\\n--- Created via RingCentral App Connect`,\n    //     type: 'PhoneCommunication',\n    //     received_at: moment(callLog.startTime).toISOString()\n    // }\n    // const addLogRes = await axios.post(\n    //     `https://api.crm.com/activity`,\n    //     postBody,\n    //     {\n    //         headers: { 'Authorization': authHeader }\n    //     });\n    console.log(`adding call log... \\n${JSON.stringify(callLog, null, 2)}`);\n    console.log(`body... \\n${composedLogDetails}`);\n    console.log(`with additional info... \\n${JSON.stringify(additionalSubmission, null, 2)}`);\n    mockCallLog = {\n        id: 'testCallLogId',\n        subject: callLog.customSubject,\n        note: composedLogDetails,\n        contactName: contactInfo.name\n    }\n    const addLogRes = {\n        data: {\n            id: mockCallLog.id\n        }\n    }\n    //----------------------------------------------------------------------------\n    //---CHECK.4: Open db.sqlite and CRM website to check if call log is saved ---\n    //----------------------------------------------------------------------------\n    return {\n        logId: addLogRes.data.id,\n        returnMessage: {\n            message: 'Call logged',\n            messageType: 'success',\n            ttl: 2000\n        }\n    };\n}\n\nasync function upsertCallDisposition({ user, existingCallLog, authHeader, callDisposition }) {\n    const existingLogId = existingCallLog.thirdPartyLogId;\n    if (callDisposition?.dispositionItem) {\n        // If has disposition item, check existence. If existing, update it, otherwise create it.\n    }\n    return {\n        logId: existingLogId\n    }\n}\n\nasync function getCallLog({ user, callLogId, authHeader }) {\n    // -----------------------------------------\n    // ---TODO.5: Implement call log fetching---\n    // -----------------------------------------\n</code></pre> <pre><code>        postBody,\n        {\n            headers: { 'Authorization': authHeader }\n        });\n    extraDataTracking = {\n        ratelimitRemaining: createContactRes.headers['x-ratelimit-remaining'],\n        ratelimitAmount: createContactRes.headers['x-ratelimit-limit'],\n        ratelimitReset: createContactRes.headers['x-ratelimit-reset']\n    };\n    return {\n        contactInfo: {\n            id: createContactRes.data.data.id,\n            name: createContactRes.data.data.name\n        },\n        returnMessage: {\n            message: `Contact created.`,\n            messageType: 'success',\n            ttl: 2000\n        },\n        extraDataTracking\n    }\n}\n\nfunction secondsToHoursMinutesSecondsInPipedriveFormat(seconds) {\n    if (typeof seconds !== 'number') {\n        return '00:00';\n    }\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60) + 1;\n\n    if (hours &gt; 0) {\n        return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;\n    }\n    else {\n        return `00:${String(minutes).padStart(2, '0')}`;\n    }\n}\n\nasync function getUserList({ user, authHeader }) {\n    const userListResp = await axios.get(\n        `https://${user.hostname}/api/v1/users`,\n        {\n            headers: { 'Authorization': authHeader }\n        });\n    const userList = userListResp.data.data.filter(user =&gt; !user.is_deleted).map(user =&gt; ({\n        id: user.id,\n        name: user.name,\n        email: user.email\n    }));\n    return userList;\n}\n\nasync function createCallLog({ user, contactInfo, authHeader, callLog, note, additionalSubmission, aiNote, transcript, composedLogDetails, hashedAccountId }) {\n    const dealId = additionalSubmission ? additionalSubmission.deals : '';\n    const leadId = additionalSubmission ? additionalSubmission.leads : '';\n    const personResponse = await axios.get(`https://${user.hostname}/api/v2/persons/${contactInfo.id}`, { headers: { 'Authorization': authHeader } });\n    const orgId = personResponse.data.data.org_id ?? '';\n    const timeUtc = moment(callLog.startTime).utcOffset(0).format('HH:mm')\n    const dateUtc = moment(callLog.startTime).utcOffset(0).format('YYYY-MM-DD');\n\n    let extraDataTracking = {\n        withSmartNoteLog: !!aiNote &amp;&amp; (user.userSettings?.addCallLogAiNote?.value ?? true),\n        withTranscript: !!transcript &amp;&amp; (user.userSettings?.addCallLogTranscript?.value ?? true)\n    };\n\n    let assigneeId = null;\n    if (additionalSubmission?.isAssignedToUser) {\n</code></pre>"},{"location":"developers/interfaces/createCallLog/#example-call-log-schema","title":"Example Call Log Schema","text":"<pre><code>{\n  \"uri\" : \"https://platform.ringcentral.com/restapi/v1.0/account/1477535004/extension/1477535004/call-log/X2AvJPtwNQbNQA?view=Detailed\",\n  \"id\" : \"X2AvJPtwNQbNQA\",\n  \"sessionId\" : \"4503991004\",\n  \"telephonySessionId\": \"s-9a03590172ea4d39a7cf7d5b6dba6a3b\",\n  \"startTime\" : \"2018-09-11T13:24:09.000Z\",\n  \"duration\" : 7,\n  \"type\" : \"Voice\",\n  \"direction\" : \"Inbound\",\n  \"action\" : \"Phone Call\",\n  \"result\" : \"Accepted\",\n  \"to\" : {\n    \"phoneNumber\" : \"+18662019834\",\n    \"name\" : \"Jane Smith\"\n  },\n  \"from\" : {\n    \"phoneNumber\" : \"+16504445566\",\n    \"name\" : \"John Smith\",\n    \"location\" : \"Palo Alto, CA\"\n  },\n  \"extension\" : {\n    \"uri\" : \"https://platform.ringcentral.com/restapi/v1.0/account/1477535004/extension/1477535004\",\n    \"id\" : 1477535004\n  },\n  \"transport\" : \"PSTN\",\n  \"lastModifiedTime\" : \"2018-09-11T13:24:12.003Z\",\n  \"billing\" : {\n    \"costIncluded\" : 0.000,\n    \"costPurchased\" : 0.000\n  },\n  \"legs\" : [ {\n    \"startTime\" : \"2018-09-11T13:24:09.000Z\",\n    \"duration\" : 7,\n    \"type\" : \"Voice\",\n    \"direction\" : \"Inbound\",\n    \"action\" : \"Phone Call\",\n    \"result\" : \"Accepted\",\n    \"to\" : {\n      \"phoneNumber\" : \"+18662019834\",\n      \"name\" : \"Jane Smith\"\n    },\n    \"from\" : {\n      \"phoneNumber\" : \"+16504445566\",\n      \"name\" : \"John Smith\",\n      \"location\" : \"Palo Alto, CA\"\n    },\n    \"extension\" : {\n      \"uri\" : \"https://platform.ringcentral.com/restapi/v1.0/account/1477535004/extension/1477535004\",\n      \"id\" : 1477535004\n    },\n    \"transport\" : \"PSTN\",\n    \"legType\" : \"Accept\",\n    \"master\" : true\n  } ]\n}\n</code></pre>"},{"location":"developers/interfaces/createContact/","title":"createContact","text":"<p>This interface is invoked whenever a new contact needs to be created in the target CRM. This happens when a user of App Connect has elected to create a \"placeholder contact.\" </p> <p>This function is to create a placeholder contact, ONLY in the following case: * User adds a new call/message log against a number with no matched contact. In another words, create placeholder contact is tied to call/message logging action</p>"},{"location":"developers/interfaces/createContact/#manifest-elements","title":"Manifest elements","text":"<p>Every CRM can define a different set of contact types, or data elements that can be associated with an activity (call or SMS) log. Within the <code>platforms.[crm name]</code> section of your manifest, provide the list of contact types supported by the target CRM.</p> <pre><code>..snip..\n\"contactTypes\": [\n  {\n    \"display\": \"TestContactType\",\n    \"value\": \"testContact\"\n  },\n  {\n    \"display\": \"Contact\",\n    \"value\": \"cta\"\n  }\n],\n..snip..\n</code></pre>"},{"location":"developers/interfaces/createContact/#request-parameters","title":"Request parameters","text":"Parameter Description <code>user</code> An object describing the Chrome extension user associated with the action that triggered this interface. <code>authHeader</code> The HTTP Authorization header to be transmitted with the API request to the target CRM. <code>phoneNumber</code> The phone number of the contact in E.164 format, e.g. +1231231234. <code>newContactName</code> The name of the contact as entered by the user. <code>newContactType</code> The contact type the user selected to indicate what kind of contact to create."},{"location":"developers/interfaces/createContact/#return-values","title":"Return value(s)","text":"<p>This interface returns a single object. That object describes the contact that was created.  It has following properties:</p> Parameter Description <code>contactInfo</code> Contain <code>id</code> and <code>name</code> <code>returnMessage</code> <code>message</code>, <code>messageType</code> and <code>ttl</code> <p>Example</p> <pre><code>{\n  contactInfo:{\n    id: \"xxxx-xxxxx\", // ID of the contact in the target \n    name: \"John Doe\" // Display name of the contact. This name will appear and be associated with all users with the same `phoneNumber`.\n  },\n  returnMessage:{\n    message: 'Contact created',\n    messageType: 'success', // 'success', 'warning' or 'danger'\n    ttl: 30000 // in miliseconds\n  }\n}\n</code></pre>"},{"location":"developers/interfaces/createContact/#reference","title":"Reference","text":"Example CRMPipedrive <pre><code>        catch (e) { leadsResponse = null; }\n        const relatedLeads = leadsResponse?.data?.data ?\n            leadsResponse.data.data.map(l =&gt; { return { const: l.id, title: l.title } })\n            : null;\n        matchedContactInfo.push(formatContact({\n            person: person.item,\n            relatedDeals,\n            relatedLeads\n        }));\n    }\n    return {\n        successful: true,\n        matchedContactInfo,\n        extraDataTracking\n    };\n}\n\nfunction formatContact({ person, phoneNumber, relatedDeals, relatedLeads }) {\n    const additionalInfo = {};\n    if (relatedDeals &amp;&amp; relatedDeals.length &gt; 0) {\n        additionalInfo.deals = relatedDeals;\n    }\n    if (relatedLeads &amp;&amp; relatedLeads.length &gt; 0) {\n        additionalInfo.leads = relatedLeads;\n    }\n    return {\n        id: person.id,\n        name: person.name,\n        phone: phoneNumber,\n        organization: person.organization?.name ?? '',\n</code></pre>"},{"location":"developers/interfaces/createMessageLog/","title":"createMessageLog","text":"<p>This interface is responsible for creating a new messaging log record in the associated CRM. The message or messages must be associated with the contact passed in as a request parameter. Other associations may be made depending upon the CRM and the adapter. This interface is always invoked for a single SMS message.</p>"},{"location":"developers/interfaces/createMessageLog/#creating-daily-digests-of-an-sms-conversation","title":"Creating daily digests of an SMS conversation","text":"<p>To prevent SMS conversations with a customer from overwhelming the CRM with a multitude of log entries for each SMS message, App Connect creates a daily digest for each SMS conversation with a customer into which all SMS messages for a 24 hour period are aggregated. </p> <p>Therefore, this interface is only invoked when the daily digest is created. The <code>updateMessageLog</code> interface is invoked for all subsequent SMS messages in that 24 hour period. </p>"},{"location":"developers/interfaces/createMessageLog/#input-parameters","title":"Input parameters","text":"Parameter Description <code>user</code> An object describing the Chrome extension user associated with the action that triggered this interface. <code>contactInfo</code> An associative array describing the contact a call is associated with. <code>authHeader</code> The HTTP Authorization header to be transmitted with the API request to the target CRM. <code>message</code> All the metadata associated with the message to be logged.  SMS message schema is described in our API Reference. <code>additionalSubmission</code> All of the additional custom fields defined in the manifest and submitted by the user. <code>recordingLink</code> If the call was a voicemail, then this field will contain a link to the voicemail. <code>timezoneOffset</code> The timezone offset of the current user in the event you need to use UTC when calling the CRM's API."},{"location":"developers/interfaces/createMessageLog/#message","title":"message","text":"<pre><code>{\n  \"uri\" : \"https://platform.ringcentral.com/restapi/xxxxxxx/message-store/60279564004\",\n  \"id\" : 60279564004,\n  \"to\" : [ {\n    \"phoneNumber\" : \"+16505553204\",\n    \"location\" : \"San Mateo, CA\"\n  } ],\n  \"from\" : {\n    \"phoneNumber\" : \"+18885550052\"\n  },\n  \"type\" : \"SMS\",\n  \"creationTime\" : \"2015-02-18T13:24:50.000Z\",\n  \"readStatus\" : \"Read\",\n  \"priority\" : \"Normal\",\n  \"attachments\" : [ {\n    \"id\" : 60279564004,\n    \"uri\" : \"https://media.ringcentral.com/restapi/xxxxxxxxxxxx/content/60279564004\",\n    \"type\" : \"Text\",\n    \"contentType\" : \"text/plain\"\n  } ],\n  \"direction\" : \"Outbound\",\n  \"availability\" : \"Alive\",\n  \"subject\" : \"Flight information\",\n  \"messageStatus\" : \"Sent\",\n  \"smsSendingAttemptsCount\" : 1,\n  \"conversationId\" : 5578984350117917661,\n  \"lastModifiedTime\" : \"2015-02-18T13:24:50.300Z\"\n}\n</code></pre>"},{"location":"developers/interfaces/createMessageLog/#return-values","title":"Return value(s)","text":"<p>An object with following properties:</p> Parameter Description <code>logId</code> ID of the log entry created within the CRM <code>returnMessage</code> <code>message</code>, <code>messageType</code> and <code>ttl</code> <p>Example <pre><code>  return {\n    logId: \"xxxx-xxx\", // ID of log entity on CRM platform\n    returnMessage:{\n      message: 'Logged',\n      messageType: 'success', // 'success', 'warning' or 'danger'\n      ttl: 30000 // in miliseconds\n    }\n  }\n</code></pre></p>"},{"location":"developers/interfaces/createMessageLog/#reference","title":"Reference","text":"Example CRMPipedrive <pre><code>    //     postBody,\n    //     {\n    //         headers: { 'Authorization': authHeader }\n    //     }\n    // );\n    mockContact = {\n        id: 'testContactId',\n        name: newContactName,\n        type: newContactType,\n        phone: phoneNumber,\n        additionalInfo: {\n            associatedDeal: [\n                {\n                    const: 'csA351',\n                    title: 'Christmas special A351'\n                },\n                {\n                    const: 'eA22',\n                    title: 'Easter A22'\n                },\n                {\n                    const: 'aC92',\n                    title: 'Anniversary C92'\n                }\n            ],\n            address: ''\n        }\n    }\n\n    const contactInfoRes = {\n        data: {\n            id: mockContact.id,\n            name: mockContact.name\n        }\n    }\n\n    //--------------------------------------------------------------------------------\n    //---CHECK.9: In extension, try create a new contact against an unknown number ---\n    //--------------------------------------------------------------------------------\n    return {\n</code></pre> <pre><code>    let assigneeId = null;\n    if (additionalSubmission?.isAssignedToUser) {\n        const adminConfig = await AdminConfigModel.findByPk(hashedAccountId);\n        assigneeId = adminConfig.userMappings?.find(mapping =&gt; typeof (mapping.rcExtensionId) === 'string' ? mapping.rcExtensionId == additionalSubmission.adminAssignedUserRcId : mapping.rcExtensionId.includes(additionalSubmission.adminAssignedUserRcId))?.crmUserId;\n    }\n\n    let patchBody = {};\n    patchBody.note = composedLogDetails;\n\n    if (subject) {\n        patchBody.subject = subject;\n    }\n    if (duration) {\n        patchBody.duration = secondsToHoursMinutesSecondsInPipedriveFormat(duration);\n    }\n\n    if (assigneeId) {\n        patchBody.owner_id = Number(assigneeId);\n    }\n\n    const patchLogRes = await axios.patch(\n        `https://${user.hostname}/api/v2/activities/${existingPipedriveLogId}`,\n        patchBody,\n        {\n            headers: { 'Authorization': authHeader }\n        });\n    extraDataTracking = {\n        ratelimitRemaining: patchLogRes.headers['x-ratelimit-remaining'],\n        ratelimitAmount: patchLogRes.headers['x-ratelimit-limit'],\n        ratelimitReset: patchLogRes.headers['x-ratelimit-reset']\n    };\n    return {\n        updatedNote: patchBody.note,\n        returnMessage: {\n            message: 'Call log updated.',\n            messageType: 'success',\n            ttl: 2000\n        },\n        extraDataTracking\n    };\n}\n\nasync function upsertCallDisposition({ user, existingCallLog, authHeader, dispositions }) {\n    let extraDataTracking = {};\n    if (!dispositions.deals &amp;&amp; !dispositions.leads) {\n        return {\n            logId: null\n        };\n    }\n    const existingPipedriveLogId = existingCallLog.thirdPartyLogId;\n    const patchBody = {};\n    if (dispositions.deals) {\n        patchBody.deal_id = dispositions.deals;\n        patchBody.lead_id = null;\n    }\n    else if (dispositions.leads) {\n        patchBody.lead_id = dispositions.leads;\n        patchBody.deal_id = null;\n    }\n    const patchLogRes = await axios.patch(\n        `https://${user.hostname}/api/v2/activities/${existingPipedriveLogId}`,\n        patchBody,\n        {\n            headers: { 'Authorization': authHeader }\n        });\n    extraDataTracking = {\n        ratelimitRemaining: patchLogRes.headers['x-ratelimit-remaining'],\n        ratelimitAmount: patchLogRes.headers['x-ratelimit-limit'],\n        ratelimitReset: patchLogRes.headers['x-ratelimit-reset']\n    };\n    return {\n        logId: existingPipedriveLogId,\n        extraDataTracking\n    }\n}\n\nasync function createMessageLog({ user, contactInfo, authHeader, message, additionalSubmission, recordingLink, faxDocLink }) {\n    let extraDataTracking = {};\n    const userInfoResponse = await axios.get(`https://${user.hostname}/v1/users/me`, {\n        headers: {\n            'Authorization': authHeader\n        }\n    });\n    const personResponse = await axios.get(`https://${user.hostname}/api/v2/persons/${contactInfo.id}`, { headers: { 'Authorization': authHeader } });\n\n    const userName = userInfoResponse.data.data.name;\n    const dealId = additionalSubmission ? additionalSubmission.deals : '';\n    const leadId = additionalSubmission ? additionalSubmission.leads : '';\n    const orgId = personResponse.data.data.org_id ?? '';\n    const timeUtc = moment(message.creationTime).utcOffset(0).format('HH:mm')\n    const dateUtc = moment(message.creationTime).utcOffset(0).format('YYYY-MM-DD');\n    const activityTypesResponse = await axios.get(`https://${user.hostname}/v1/activityTypes`, { headers: { 'Authorization': authHeader } });\n    const smsType = activityTypesResponse.data.data.find(t =&gt; t.name === 'SMS' &amp;&amp; t.active_flag);\n</code></pre>"},{"location":"developers/interfaces/findContact/","title":"findContact (by Phone)","text":"<p>This interface is central to App Connect's framework as it is responsible for matching phone numbers with contacts in the target CRM. This interface powers the following key features:</p> <ul> <li>call pop</li> <li>call logging</li> <li>sms logging</li> </ul> <p>This interface can return zero, one or more contacts. If multiple contacts are returned, App Connect will prompt the end user to select the specific contact to be used when logging calls. </p> <p>If no contact is found, do not create a contact in its place. When logging calls, if no contacts are found associated with a phone number, then the framework to prompt the user to create a contact. The user will enter a name, and then call the createContact interface, and then call the createCallLog with the newly created contact ID. </p> <p>This interface is called in the following circumstances:</p> <ul> <li>When a call is received.</li> <li>When a user manually clicks the \"refresh contact\" action for a contact or phone call. </li> <li>When a user accesses App Connect the first time in an attempt to perform an initial contact match operation for recent phone calls. </li> </ul> <p> </p> The \"Refresh contact\" action in App Connect's contact list"},{"location":"developers/interfaces/findContact/#request-parameters","title":"Request parameters","text":"Parameter Description <code>user</code> An object describing the Chrome extension user associated with the action that triggered this interface. <code>authHeader</code> The HTTP Authorization header to be transmitted with the API request to the target CRM. <code>phoneNumber</code> The phone number to search for within the target CRM, provided in an E.164 format, e.g. +11231231234. <code>overridingFormat</code> (Optional) If defined by the user under advanced settings, this will contain alternative formats the user may wish to use when searching for the <code>phoneNumber</code> <p>Alternative formats</p> <p>Some CRM's have very restrictive APIs with regards to searching for phone numbers, meaning they require an exact match in order to find a contact with that phone number. To work around this restriction, users are allowed to specify a list of phone number formats which they often use when entering phone numbers into the CRM. It is the intention that each adapter when provided a list of <code>overridingFormat</code> values to convert the E.164 phone number into each of the overriding formats, and to search for each one until a contact is found.</p> <p>Remember: only a single call the <code>getContact</code> interface will be made. The developer is responsible for searching for each alternative format.</p>"},{"location":"developers/interfaces/findContact/#return-values","title":"Return value(s)","text":"<p>This interface returns a single object. That object describes the contacts that were found. It has following properties:</p> Parameter Description <code>matchedContactInfo</code> An array of objects containing <code>id</code>, <code>name</code> and optionally <code>additionalInfo</code> and <code>isNewContact</code>. <code>returnMessage</code> <code>message</code>, <code>messageType</code> and <code>ttl</code> <p>isNewContact is only used as an extra option in contact list for users to be able to create new contacts</p>"},{"location":"developers/interfaces/findContact/#returning-contact-specific-information","title":"Returning contact specific information","text":"<p>In some circumstances when a call is being logged you need to collect contact or account specific information from the agent logging the call. Consider for a moment a use case you can see implemented in our Clio adapter in which you want to link or associate a phone call with a specific legal matter. You don't know the list of possible matters until you have successfully matched the phone call with a contact. Then you want to present the agent with a easy-to-use pull-down menu showing the list of matters associated with the contact. </p> <p>To do this you need to do two things. First, in your manifest, you want to define the field you want to collect from the agent. On this field you will be sure to set <code>contactDependent</code> to <code>true</code>. </p> <pre><code>\"page\": {\n    \"callLog\": {\n        \"additionalFields\": [\n            {\n                \"const\": \"matters\",\n                \"title\": \"Matter\",\n                \"type\": \"selection\",\n                \"contactDependent\": true\n            }\n        ]\n    }\n}\n</code></pre> <p>Then in your adapter, when you return your list of contacts, for each contact you will return the <code>additionalInfo</code> property in which you provide the list of matters. </p> <pre><code>[{ \n    \"const\": m.matter.id, \n    \"title\": m.matter.display_number, \n    \"description\": m.matter.description, \n    \"status\": m.matter.status \n}]\n</code></pre> <p>The values returns are bound to the field via correlating the two <code>const</code> values found in the additional field and the contact record. </p>"},{"location":"developers/interfaces/findContact/#example-response","title":"Example response","text":"<pre><code>{\n  matchedContactInfo:[\n    {\n      id: 'contact id',\n      name: 'John Doe',\n      additionalInfo: null,\n      isNewContact: false\n    },\n    {\n        id: 'createNewContact',\n        name: 'Create new contact...',\n        additionalInfo: null,\n        isNewContact: true\n    }\n  ],\n  returnMessage:{\n    message: 'Found 1 contact',\n    messageType: 'warning', // 'success', 'warning' or 'danger'\n    ttl: 30000 // in miliseconds\n  }\n}\n</code></pre>"},{"location":"developers/interfaces/findContact/#reference","title":"Reference","text":"Example CRMPipedrive <pre><code>    const numberToQueryArray = [];\n    if (isExtension) {\n        numberToQueryArray.push(phoneNumber);\n    }\n    else {\n        numberToQueryArray.push(phoneNumber.replace(' ', '+'));\n    }\n    // You can use parsePhoneNumber functions to further parse the phone number\n    const matchedContactInfo = [];\n    // for (var numberToQuery of numberToQueryArray) {\n    //     const personInfo = await axios.get(\n    //         `https://api.crm.com/contacts?query=number:${numberToQuery}`,\n    //         {\n    //             headers: { 'Authorization': authHeader }\n    //         });\n    //     if (personInfo.data.length &gt; 0) {\n    //         for (var result of personInfo.data) {\n    //             foundContacts.push({\n    //                 id: result.id,\n    //                 name: result.name,\n    //                 type: result.type,\n    //                 phone: numberToQuery,\n    //                 additionalInfo: null\n    //             })\n    //         }\n    //     }\n    // }\n    if (mockContact != null) {\n        matchedContactInfo.push(mockContact);\n    }\n    console.log(`found contacts... \\n\\n${JSON.stringify(matchedContactInfo, null, 2)}`);\n\n    // If you want to support creating a new contact from the extension, below placeholder contact should be used\n    matchedContactInfo.push({\n        id: 'createNewContact',\n        name: 'Create new contact...',\n        additionalInfo: null,\n        isNewContact: true\n    });\n    //-----------------------------------------------------\n    //---CHECK.3: In console, if contact info is printed---\n    //-----------------------------------------------------\n    return {\n        successful: true,\n        matchedContactInfo,\n        returnMessage: {\n            messageType: 'success',\n            message: 'Successfully found contact.',\n            detaisl: [\n                {\n                    title: 'Details',\n                    items: [\n                        {\n                            id: '1',\n                            type: 'text',\n                            text: `Found ${matchedContactInfo.length} contacts`\n                        }\n                    ]\n                }\n            ],\n            ttl: 3000\n        }\n    };  //[{id, name, phone, additionalInfo}]\n}\n\n// - contactInfo: { id, type, phoneNumber, name }\n// - callLog: same as in https://developers.ringcentral.com/api-reference/Call-Log/readUserCallRecord\n// - note: note submitted by user\n// - additionalSubmission: all additional fields that are setup in manifest under call log page\nasync function createCallLog({ user, contactInfo, authHeader, callLog, note, additionalSubmission, aiNote, transcript, composedLogDetails }) {\n    // ------------------------------------\n</code></pre> <pre><code>}\n\nasync function findContact({ user, authHeader, phoneNumber, overridingFormat, isExtension }) {\n    if (isExtension === 'true') {\n        return {\n            successful: false,\n            matchedContactInfo: []\n        }\n    }\n    let extraDataTracking = {};\n    phoneNumber = phoneNumber.replace(' ', '+')\n    // without + is an extension, we don't want to search for that\n    if (!phoneNumber.includes('+')) {\n        return {\n            matchedContactInfo: null,\n            returnMessage: {\n                message: 'Logging against internal extension number is not supported.',\n                messageType: 'warning',\n                ttl: 3000\n            }\n        };\n    }\n    const phoneNumberObj = parsePhoneNumber(phoneNumber);\n    let phoneNumberWithoutCountryCode = phoneNumber;\n    if (phoneNumberObj.valid) {\n        phoneNumberWithoutCountryCode = phoneNumberObj.number.significant;\n    }\n    const personInfo = await axios.get(\n        `https://${user.hostname}/api/v2/persons/search?term=${phoneNumberWithoutCountryCode}&amp;fields=phone`,\n        {\n            headers: { 'Authorization': authHeader }\n        });\n    extraDataTracking = {\n        ratelimitRemaining: personInfo.headers['x-ratelimit-remaining'],\n        ratelimitAmount: personInfo.headers['x-ratelimit-limit'],\n        ratelimitReset: personInfo.headers['x-ratelimit-reset']\n    };\n    const matchedContactInfo = [];\n    for (const person of personInfo.data.data.items) {\n        const dealsResponse = await axios.get(\n            `https://${user.hostname}/api/v2/deals?person_id=${person.item.id}&amp;&amp;status=open`,\n            {\n                headers: { 'Authorization': authHeader }\n            });\n        extraDataTracking = {\n            ratelimitRemaining: dealsResponse.headers['x-ratelimit-remaining'],\n            ratelimitAmount: dealsResponse.headers['x-ratelimit-limit'],\n            ratelimitReset: dealsResponse.headers['x-ratelimit-reset']\n        };\n        const relatedDeals = dealsResponse.data.data ?\n            dealsResponse.data.data.map(d =&gt; { return { const: d.id, title: d.title } })\n            : null;\n        let leadsResponse = null;\n        try {\n            leadsResponse = await axios.get(\n                `https://${user.hostname}/v1/leads?person_id=${person.item.id}`,\n                {\n                    headers: { 'Authorization': authHeader }\n                });\n            extraDataTracking = {\n                ratelimitRemaining: leadsResponse.headers['x-ratelimit-remaining'],\n                ratelimitAmount: leadsResponse.headers['x-ratelimit-limit'],\n                ratelimitReset: leadsResponse.headers['x-ratelimit-reset']\n            };\n        }\n        catch (e) { leadsResponse = null; }\n        const relatedLeads = leadsResponse?.data?.data ?\n            leadsResponse.data.data.map(l =&gt; { return { const: l.id, title: l.title } })\n            : null;\n        matchedContactInfo.push(formatContact(\n            {\n                person: person.item,\n                phoneNumber,\n                relatedDeals,\n</code></pre>"},{"location":"developers/interfaces/findContactWithName/","title":"findContactWithName","text":"<p>It is not uncommon that when logging a call, a contact cannot be found using the findContact interface which attempts to lookup a contact into the target CRM via a phone number. Sometimes however, a contact cannot be found, but is in fact known to be in the CRM. This is when this interface comes into play. </p> <p> </p> Searching contacts in a CRM via App Connect <p>When a contact cannot be found, users are given the option to search the CRM for a contact by name. This allows users to associate calls with contacts in a more manual fashion when a contact is not found via a phone number. </p> <p>This interface is called to facilitate that search process. </p>"},{"location":"developers/interfaces/findContactWithName/#request-parameters","title":"Request parameters","text":"Parameter Description <code>user</code> An object describing the Chrome extension user associated with the action that triggered this interface. <code>authHeader</code> The HTTP Authorization header to be transmitted with the API request to the target CRM. <code>name</code> The text entered by the user that should be searched for within the CRM."},{"location":"developers/interfaces/findContactWithName/#return-values","title":"Return value(s)","text":"<p>This interface returns a single object. That object describes the contacts that were found. It has following properties:</p> Parameter Description <code>successful</code> True or false is a contact was found or not. <code>matchedContactInfo</code> An array of objects containing <code>id</code>, <code>name</code> and optionally <code>additionalInfo</code> and <code>isNewContact</code>. <p>Example</p> <pre><code>{\n  successful: true,\n  matchedContactInfo:[\n    {\n      id: 'contact id',\n      name: 'John Doe',\n      phone: '(123) 456-7890',\n      type: 'Lead',\n      additionalInfo: null,\n      isNewContact: false\n    }\n  ]\n}\n</code></pre>"},{"location":"developers/interfaces/findContactWithName/#reference","title":"Reference","text":"Clio <pre><code>                            logTimeEntry: user.userSettings?.clioDefaultTimeEntryTick ?? true\n                        }\n                })\n            }\n        }\n    }\n    matchedContactInfo.push({\n        id: 'createNewContact',\n        name: 'Create new contact...',\n        additionalInfo: { logTimeEntry: true },\n        isNewContact: true\n    });\n    return {\n        successful: true,\n        matchedContactInfo,\n        extraDataTracking\n    };\n}\n\nasync function findContactWithName({ user, authHeader, name }) {\n    const matchedContactInfo = [];\n    let extraDataTracking = {};\n    /*\n    Clio's contact search functionality works correctly with name-based queries, including first name, last name, and full name. \n    It handles all variations without requiring the query to be split\n    */\n    const personInfo = await axios.get(`https://${user.hostname}/api/v4/contacts.json?type=Person&amp;query=${name}&amp;fields=id,name,title,company,primary_phone_number`, {\n        headers: { 'Authorization': authHeader }\n    });\n    extraDataTracking = {\n        ratelimitRemaining: personInfo.headers['x-ratelimit-remaining'],\n        ratelimitAmount: personInfo.headers['x-ratelimit-limit'],\n        ratelimitReset: personInfo.headers['x-ratelimit-reset']\n    };\n    if (personInfo.data.data.length &gt; 0) {\n        for (var result of personInfo.data.data) {\n            const matterInfo = await axios.get(\n                `https://${user.hostname}/api/v4/matters.json?client_id=${result.id}&amp;fields=id,display_number,description,status`,\n                {\n                    headers: { 'Authorization': authHeader }\n                });\n            let matters = matterInfo.data.data.length &gt; 0 ? matterInfo.data.data.map(m =&gt; { return { const: m.id, title: m.display_number, description: m.description, status: m.status } }) : null;\n            matters = matters?.filter(m =&gt; m.status !== 'Closed');\n            let associatedMatterInfo = await axios.get(\n                `https://${user.hostname}/api/v4/relationships.json?contact_id=${result.id}&amp;fields=matter{id,display_number,description,status}`,\n                {\n                    headers: { 'Authorization': authHeader }\n                });\n            extraDataTracking = {\n                ratelimitRemaining: associatedMatterInfo.headers['x-ratelimit-remaining'],\n                ratelimitAmount: associatedMatterInfo.headers['x-ratelimit-limit'],\n                ratelimitReset: associatedMatterInfo.headers['x-ratelimit-reset']\n            };\n            let associatedMatters = associatedMatterInfo.data.data.length &gt; 0 ? associatedMatterInfo.data.data.map(m =&gt; { return { const: m.matter.id, title: m.matter.display_number, description: m.matter.description, status: m.matter.status } }) : null;\n            associatedMatters = associatedMatters?.filter(m =&gt; m.status !== 'Closed');\n            let returnedMatters = [];\n            returnedMatters = returnedMatters.concat(matters ?? []);\n            returnedMatters = returnedMatters.concat(associatedMatters ?? []);\n            matchedContactInfo.push({\n                id: result.id,\n                name: result.name,\n                title: result.title ?? \"\",\n                type: 'contact',\n                company: result.company?.name ?? \"\",\n                phone: result.primary_phone_number ?? \"\",\n</code></pre>"},{"location":"developers/interfaces/getAuthType/","title":"getAuthType","text":"<p>This method returns either <code>oauth</code> or <code>apiKey</code>. </p>"},{"location":"developers/interfaces/getAuthType/#request-parameters","title":"Request parameters","text":"<p>None.</p>"},{"location":"developers/interfaces/getAuthType/#return-values","title":"Return value(s)","text":"<p>This interface returns a single string, either <code>oauth</code> or <code>apiKey</code> to indicate what kind of auth is supported by the target CRM. </p>"},{"location":"developers/interfaces/getAuthType/#reference","title":"Reference","text":"Example CRMPipedrive <pre><code>function getBasicAuth({ apiKey }) {\n    return Buffer.from(`${apiKey}:`).toString('base64');\n}\n</code></pre> <pre><code>const { AdminConfigModel } = require('@app-connect/core/models/adminConfigModel');\n\nfunction getAuthType() {\n</code></pre>"},{"location":"developers/interfaces/getCallLog/","title":"getCallLog","text":"<p>This interface retrieves a previously logged call log record in the target CRM. This information is used to render a form to allow an end user to view or edit that record within the App Connect client.</p>"},{"location":"developers/interfaces/getCallLog/#request-parameters","title":"Request parameters","text":"Parameter Description <code>user</code> TODO <code>callLogId</code> The ID of the activity or call log record within the CRM. <code>authHeader</code> The HTTP Authorization header to be transmitted with the API request to the target CRM."},{"location":"developers/interfaces/getCallLog/#return-values","title":"Return value(s)","text":"<p>This interface should return the associated call log record in a prescribed format. </p> Parameter Description <code>callLogInfo</code> Contain <code>subject</code>, <code>note</code> and optionally <code>additionalSubmission</code> <code>returnMessage</code> <code>message</code>, <code>messageType</code> and <code>ttl</code> <p>Example</p> <pre><code>{\n  callLogInfo:{\n    subject: \"A new call from John Doe\",\n    note: \"Delivery location changed.\",\n    additionalSubmission: {\n      address: \"12 Some Street, CA\"\n    }\n  },\n  returnMessage:{\n    message: 'Log fetched',\n    messageType: 'success', // 'success', 'warning' or 'danger'\n    ttl: 30000 // in miliseconds\n  }\n}\n</code></pre>"},{"location":"developers/interfaces/getCallLog/#reference","title":"Reference","text":"Example CRMPipedrive <pre><code>        }\n    };\n}\n\n// - contactInfo: { id, type, phoneNumber, name }\n// - message : same as in https://developers.ringcentral.com/api-reference/Message-Store/readMessage\n// - recordingLink: recording link of voice mail\n// - additionalSubmission: all additional fields that are setup in manifest under call log page\nasync function createMessageLog({ user, contactInfo, authHeader, message, additionalSubmission, recordingLink, faxDocLink }) {\n    // ---------------------------------------\n    // ---TODO.7: Implement message logging---\n    // ---------------------------------------\n\n    // const postBody = {\n    //     data: {\n    //         subject: `[SMS] ${message.direction} SMS - ${message.from.name ?? ''}(${message.from.phoneNumber}) to ${message.to[0].name ?? ''}(${message.to[0].phoneNumber})`,\n    //         body: `${message.direction} SMS - ${message.direction == 'Inbound' ? `from ${message.from.name ?? ''}(${message.from.phoneNumber})` : `to ${message.to[0].name ?? ''}(${message.to[0].phoneNumber})`} \\n${!!message.subject ? `[Message] ${message.subject}` : ''} ${!!recordingLink ? `\\n[Recording link] ${recordingLink}` : ''}\\n\\n--- Created via RingCentral App Connect`,\n    //         type: 'Message'\n    //     }\n    // }\n    // const addLogRes = await axios.post(\n    //     `https://api.crm.com/activity`,\n    //     postBody,\n    //     {\n    //         headers: { 'Authorization': authHeader }\n    //     });\n    const messageType = recordingLink ? 'Voicemail' : (faxDocLink ? 'Fax' : 'SMS');\n    console.log(`adding message log... \\n\\n${JSON.stringify(message, null, 2)}`);\n    mockMessageLog = {\n        id: 'testMessageLogId'\n    }\n    const addLogRes = {\n        data: {\n            id: mockMessageLog.id\n        }\n    }\n</code></pre> <pre><code>    }\n    if (orgId) {\n        postBody.org_id = orgId;\n    }\n    const addLogRes = await axios.post(\n        `https://${user.hostname}/api/v2/activities`,\n        postBody,\n        {\n            headers: { 'Authorization': authHeader }\n        });\n    extraDataTracking = {\n        ratelimitRemaining: addLogRes.headers['x-ratelimit-remaining'],\n        ratelimitAmount: addLogRes.headers['x-ratelimit-limit'],\n        ratelimitReset: addLogRes.headers['x-ratelimit-reset']\n    };\n    return {\n        logId: addLogRes.data.data.id,\n        returnMessage: {\n            message: 'Message logged',\n            messageType: 'success',\n            ttl: 1000\n        },\n        extraDataTracking\n    };\n}\n\nasync function updateMessageLog({ user, contactInfo, existingMessageLog, message, authHeader, additionalSubmission }) {\n    const dealId = additionalSubmission ? additionalSubmission.deals : '';\n    const leadId = additionalSubmission ? additionalSubmission.leads : '';\n    let extraDataTracking = {};\n    const existingLogId = existingMessageLog.thirdPartyLogId;\n    const userInfoResponse = await axios.get('https://api.pipedrive.com/v1/users/me', {\n        headers: {\n</code></pre>"},{"location":"developers/interfaces/getLicenseStatus/","title":"getLicenseStatus","text":"<p>The App Connect framework supports license validation for CRM adapters, allowing you to implement your own licensing service and control access to your adapter based on license status. This guide covers how to implement license management in your custom adapter.</p>"},{"location":"developers/interfaces/getLicenseStatus/#implementing-your-own-license-service-and-enabling-license-in-manifest","title":"Implementing your own license service and enabling license in manifest","text":"<p>To enable license checking for your adapter, you need to:</p> <ol> <li>Implement your own license validation service</li> <li>Enable license status feature in manifest</li> <li>Implement get license status interface in adapter </li> </ol>"},{"location":"developers/interfaces/getLicenseStatus/#1-implement-license-validation-service","title":"1. Implement license validation service","text":"<p>It should be implemented in your own system which exposes public APIs for your adapter to consume.</p> <p>In below cases, the APIs will be called:</p> <ol> <li>Get license status when users manually refresh it (e.g. after purchasing) or after account authorization/unauthorization.</li> <li>Get license status so to allow/block API calls that require a valid license. </li> </ol>"},{"location":"developers/interfaces/getLicenseStatus/#2-enable-license-in-manifest","title":"2. Enable license in manifest","text":"<p>First, enable license checking by setting the <code>useLicense</code> property to <code>true</code> in your adapter's manifest file:</p> <p>manifest.json</p> <pre><code>{\n  \"platforms\": {\n    \"yourCRM\": {\n      \"name\": \"yourCRM\",\n      \"displayName\": \"Your CRM\",\n      \"useLicense\": true,\n      // ... other platform configuration\n    }\n  }\n}\n</code></pre>"},{"location":"developers/interfaces/getLicenseStatus/#3-implementing-license-interface-in-your-adapter","title":"3. Implementing license interface in your adapter","text":"<p>Your adapter must implement the <code>getLicenseStatus</code> interface to enable license checking. This function should validate the user's license status and return a standardized response.</p>"},{"location":"developers/interfaces/getLicenseStatus/#function-signature","title":"Function signature","text":"<pre><code>async function getLicenseStatus({ userId }) {\n    // Implementation here\n}\nexports.getLicenseStatus = getLicenseStatus;\n</code></pre>"},{"location":"developers/interfaces/getLicenseStatus/#response-format","title":"Response format","text":"<p>The <code>getLicenseStatus</code> function must return an object with the following properties:</p> Property Type Description <code>isLicenseValid</code> boolean Whether the user has a valid license <code>licenseStatus</code> string Human-readable license status (e.g., \"Basic\", \"Premium\", \"Expired\") <code>licenseStatusDescription</code> string Additional description or details about the license status. Include links as how Markdown does it. E.g. \"Please visit [here](https://license.myServer.com/purchase)\""},{"location":"developers/interfaces/getLicenseStatus/#license-status-response-display","title":"License status response display","text":"<p>When license checking is enabled, the App Connect extension will display the license status to users in the extension interface. This helps users understand their current license state and take appropriate action if needed.</p> <p></p> <p></p>"},{"location":"developers/interfaces/getLicenseStatus/#returning-license-related-messages-in-api-responses","title":"Returning license-related messages in API responses","text":"<p>When license validation fails, your adapter should return appropriate error messages to inform users about license issues. The App Connect framework provides a standardized way to return error messages that will be displayed to users.</p>"},{"location":"developers/interfaces/getLicenseStatus/#check-license-before-api-operations","title":"Check license before API operations","text":"<p>Before performing any CRM operations, you should verify the user's license status and return appropriate error messages if the license is invalid:</p> <pre><code>async function createCallLog({ user, contactInfo, authHeader, callLog, note, additionalSubmission }) {\n    // Check license status first\n    const licenseStatus = await getLicenseStatus({ userId: user.id });\n\n    if (!licenseStatus.isLicenseValid) {\n        return {\n            successful: false,\n            returnMessage: {\n                message: 'License validation failed',\n                messageType: 'danger',\n                details: [\n                    {\n                        title: 'License Issue',\n                        items: [\n                            {\n                                id: '1',\n                                type: 'text',\n                                text: 'Please go to user settings page and refresh license status'\n                            }\n                        ]\n                    }\n                ],\n                ttl: 5000\n            }\n        };\n    }\n\n    // Proceed with call log creation if license is valid\n    try {\n        // ... implementation\n    } catch (error) {\n        // ... error handling\n    }\n}\n</code></pre>"},{"location":"developers/interfaces/getLogFormatType/","title":"getLogFormatType","text":"<p>This method returns either plain text, html or markdown.</p>"},{"location":"developers/interfaces/getLogFormatType/#request-parameters","title":"Request parameters","text":"<p>None.</p>"},{"location":"developers/interfaces/getLogFormatType/#return-values","title":"Return value(s)","text":"<p>For specific return values, please use values in <code>@app-connect/core/lib/constants</code>.</p>"},{"location":"developers/interfaces/getLogFormatType/#reference","title":"Reference","text":"Example CRMPipedrive <pre><code>const { LOG_DETAILS_FORMAT_TYPE } = require('@app-connect/core/lib/constants');\n\nfunction getLogFormatType() {\n    return LOG_DETAILS_FORMAT_TYPE.PLAIN_TEXT;\n}\n\nexports.getLogFormatType = getLogFormatType;\n</code></pre> <pre><code>const { LOG_DETAILS_FORMAT_TYPE } = require('@app-connect/core/lib/constants');\n\nfunction getLogFormatType() {\n    return LOG_DETAILS_FORMAT_TYPE.HTML;\n}\n\nexports.getLogFormatType = getLogFormatType;\n</code></pre>"},{"location":"developers/interfaces/getOauthInfo/","title":"getOauthInfo","text":"<p>This method returns a simple object containing all necessary OAuth values. This method provides developers with a safe and secure way to present to the framework values that are typically considered private, for example a client secret. These values are often stored in environment variables or in a vault. </p>"},{"location":"developers/interfaces/getOauthInfo/#input-parameters","title":"Input parameters","text":"<p>None.</p>"},{"location":"developers/interfaces/getOauthInfo/#return-values","title":"Return value(s)","text":"<p>This method should return an associative array with the following keys and values:</p> Key Value <code>clientId</code> The client ID of the application registered with the CRM provider, used to call the CRM's API. <code>clientSecret</code> The client secret of the application registered with the CRM provider. <code>accessTokenUri</code> The API endpoint used to retrieve the access token from the CRM provider. <code>redirectUri</code> The redirect URI registered with the CRM provider. <p>Example</p> <pre><code>{\n  'clientId': 'xxx-xxxx-xxxxxxxxxx-xxxx',\n  'clientSecret': 'xxxxxxxx-xxxxxxxxxxxxxxxxxx',\n  'accessTokenUri': 'https://auth.crm.com/token',\n  'redirectUri': 'https://ringcentral.github.io/ringcentral-embeddable/redirect.html'\n}\n</code></pre>"},{"location":"developers/interfaces/getOauthInfo/#reference","title":"Reference","text":"Example CRMPipedrive <pre><code>// CHOOSE: If using OAuth\n// async function getOauthInfo() {\n//     return {\n//         clientId: process.env.TEST_CRM_CLIENT_ID,\n//         clientSecret: process.env.TEST_CRM_CLIENT_SECRET,\n//         accessTokenUri: process.env.TEST_CRM_TOKEN_URI,\n//         redirectUri: process.env.TEST_CRM_REDIRECT_URI\n//     }\n// }\n// exports.getOauthInfo = getOauthInfo;\n\n// CHOOSE: If using OAuth somehow uses query not body to pass code\n// function getOverridingOAuthOption({ code }) {\n//     return {\n//         query: {\n//             grant_type: 'authorization_code',\n//             code,\n//             client_id: process.env.TEST_OAUTH_CRM_CLIENT_ID,\n//             client_secret: process.env.TEST_OAUTH_CRM_CLIENT_SECRET,\n//             redirect_uri: process.env.TEST_OAUTH_CRM_REDIRECT_URI,\n//         },\n//         headers: {\n//             Authorization: ''\n//         }\n//     }\n// }\n// exports.getOverridingOAuthOption = getOverridingOAuthOption;\n\n\n// For params, if OAuth, then accessToken, refreshToken, tokenExpiry; If apiKey, then apiKey\n// ------------\n// - additionalInfo: contains custom additional fields on auth page (eg. username and password for redtail)\n// ------------\n// Optional input params:\n// - oauth: tokenUrl, apiUrl, hostname\n</code></pre> <pre><code>}\n\nasync function getOauthInfo() {\n    return {\n        clientId: process.env.PIPEDRIVE_CLIENT_ID,\n        clientSecret: process.env.PIPEDRIVE_CLIENT_SECRET,\n        accessTokenUri: process.env.PIPEDRIVE_ACCESS_TOKEN_URI,\n        redirectUri: process.env.PIPEDRIVE_REDIRECT_URI\n</code></pre>"},{"location":"developers/interfaces/getUserInfo/","title":"getUserInfo","text":"<p>This method results in the adapter calling the CRM to retrieve key information about the currently logged in user. This method should return an associative array containing the following keys and values.</p> Key Value <code>id</code> The account ID of the user within the CRM. This not the user's personal ID, but that of the parent account. <code>name</code> The name of the user within the CRM. This will be shown in the Chrome extension to indicate who is currentlyly logged into the CRM. <code>timezoneName</code> The three-letter timezone identifier of the user. <code>timezoneOffset</code> The timezone offset of the user, expressed as a positive or negative integer. <code>platformAdditionalInfo</code> An associative array of additional information about the user in the CRM. See below. <code>overridingHostname</code> Some CRMs provision unique URLs to each account within their service. For example, to access your account one would use a URL such as <code>https://mycompanydomain.crm.com</code>. The property tells the framework your company's unique URL if there is one. <p><code>platformAdditionalInfo</code></p> Key Value <code>companyId</code> The company or account ID of the user within the CRM. <code>companyName</code> The name of the company or account the user is associated with in the CRM. <code>companyDomain</code> The domain of the account within the CRM. Example CRMPipedrive <pre><code>        //     headers: {\n        //         'Authorization': authHeader\n        //     }\n        // });\n        const mockUserInfoResponse = {\n            data: {\n                id: 'testUserId',\n                name: 'Test User',\n                time_zone: 'America/Los_Angeles',\n                time_zone_offset: 0\n            }\n        }\n\n        const id = mockUserInfoResponse.data.id;\n        const name = mockUserInfoResponse.data.name;\n        const timezoneName = mockUserInfoResponse.data.time_zone ?? ''; // Optional. Whether or not you want to log with regards to the user's timezone\n        const timezoneOffset = mockUserInfoResponse.data.time_zone_offset ?? null; // Optional. Whether or not you want to log with regards to the user's timezone. It will need to be converted to a format that CRM platform uses,\n        return {\n            successful: true,\n            platformUserInfo: {\n                id,\n                name,\n                timezoneName,\n                timezoneOffset,\n                platformAdditionalInfo: {}  // this should save whatever extra info you want to save against the user\n            },\n            returnMessage: {\n                messageType: 'success',\n                message: 'Connected to TestCRM.',\n                ttl: 1000\n            }\n        };\n    }\n    catch (e) {\n        return {\n            successful: false,\n            returnMessage: {\n                messageType: 'warning',\n                message: 'Could not load user information',\n                details: [\n                    {\n                        title: 'Details',\n                        items: [\n                            {\n                                id: '1',\n                                type: 'text',\n                                text: `TestCRM was unable to fetch information for the currently logged in user. Please check your permissions in TestCRM and make sure you have permission to access and read user information.`\n                            }\n                        ]\n                    }\n                ],\n                ttl: 3000\n            }\n        }\n    }\n    //---------------------------------------------------------------------------------------------------\n    //---CHECK.1: Open db.sqlite (might need to install certain viewer) to check if user info is saved---\n    //---------------------------------------------------------------------------------------------------\n}\n\nasync function unAuthorize({ user }) {\n    // -----------------------------------------------------------------\n    // ---TODO.2: Implement token revocation if CRM platform requires---\n    // -----------------------------------------------------------------\n\n    // const revokeUrl = 'https://api.crm.com/oauth/unauthorize';\n</code></pre> <pre><code>}\n\nasync function getUserInfo({ authHeader, hostname }) {\n    try {\n        const userInfoResponse = await axios.get('https://api.pipedrive.com/v1/users/me', {\n            headers: {\n                'Authorization': authHeader\n            }\n        });\n        const id = `${userInfoResponse.data.data.id.toString()}-pipedrive`;\n        const name = userInfoResponse.data.data.name;\n        const timezoneName = userInfoResponse.data.data.timezone_name;\n        const timezoneOffset = userInfoResponse.data.data.timezone_offset;\n        return {\n            successful: true,\n            platformUserInfo: {\n                id,\n                name,\n                timezoneName,\n                timezoneOffset,\n                platformAdditionalInfo: {\n                    companyId: userInfoResponse.data.data.company_id,\n                    companyName: userInfoResponse.data.data.company_name,\n                    companyDomain: userInfoResponse.data.data.company_domain,\n                },\n                overridingHostname: hostname == 'temp' ? `${userInfoResponse.data.data.company_domain}.pipedrive.com` : null\n            },\n            returnMessage: {\n                messageType: 'success',\n                message: 'Connected to Pipedrive.',\n                ttl: 1000\n            }\n        };\n    }\n    catch (e) {\n        return {\n            successful: false,\n            returnMessage: {\n                messageType: 'warning',\n                message: 'Could not load user information',\n                details: [\n                    {\n                        title: 'Details',\n                        items: [\n                            {\n                                id: '1',\n                                type: 'text',\n                                text: `Pipedrive was unable to fetch information for the currently logged in user. Please check your permissions in Pipedrive and make sure you have permission to access and read user information.`\n                            }\n                        ]\n                    }\n                ],\n                ttl: 3000\n            }\n        }\n</code></pre>"},{"location":"developers/interfaces/getUserList/","title":"getUserList","text":"<p>The <code>getUserList</code> interface is used exclusively with the server-side call logging feature to assist in mapping RingCentral user identities to their corresponding identity within the connected CRM or application. This ensures that the notes created by the server-side call logging framework are assigned to the correct owner in the CRM so that attribution is accurate and that user can also edit the notes created on their behalf. </p> <p>App Connect will call this endpoint when server-side call logging is enabled, and periodically after that to keep systems in sync. It will then systematically call the <code>getUserInfo</code> interface to attempt to map it to a RingCentral user via their email address. </p> <p>Any identity that is not successfully mapped using this method can be mapped manually by admins using the user mapping feature. </p>"},{"location":"developers/interfaces/getUserList/#request-parameters","title":"Request parameters","text":"<p>None.</p>"},{"location":"developers/interfaces/getUserList/#return-values","title":"Return value(s)","text":"<p>This interface returns an array of users in the connected CRM or application. Each user record should contain the user's ID, name and email address. </p> <p>Example</p> <pre><code>[\n  { \n     'id': '123',\n     'name': 'Luke Skywalker',\n     'email': 'luke@jedicouncil.org'\n  },\n  { \n     'id': '456',\n     'name': 'Han Solo',\n     'email': 'han@rebelalliance.gov'\n  }\n]\n</code></pre>"},{"location":"developers/interfaces/getUserList/#reference","title":"Reference","text":"Bullhorn <pre><code>}\n\nasync function getUserList({ user }) {\n    const queryWhere = 'isDeleted=false';\n    const searchParams = new URLSearchParams({\n        fields: 'id,firstName,lastName,email',\n        where: queryWhere\n    });\n    let start = 0;\n    let userInfoResponse;\n    const userList = [];\n    // use max loop counter just in case while loop goes forever\n    const maxLoop = 500;\n    let loopCounter = 0;\n    do {\n        loopCounter++;\n        userInfoResponse = await axios.get(\n            `${user.platformAdditionalInfo.restUrl}query/CorporateUser?start=${start}&amp;${searchParams.toString()}`,\n            {\n                headers: {\n                    BhRestToken: user.platformAdditionalInfo.bhRestToken\n                }\n            }\n        );\n        start = userInfoResponse?.data?.start + userInfoResponse?.data?.count;\n        if (userInfoResponse?.data?.data?.length &gt; 0) {\n</code></pre>"},{"location":"developers/interfaces/unAuthorize/","title":"unAuthorize","text":"<p>It is to remove user data from our database when user chooses to log out. Some CRMs have token invalidation mechanism, if so, please implement that as well.</p>"},{"location":"developers/interfaces/unAuthorize/#request-parameters","title":"Request parameters","text":"Parameter Description <code>user</code> An object describing the Chrome extension user associated with the action that triggered this interface."},{"location":"developers/interfaces/unAuthorize/#return-values","title":"Return value(s)","text":"Parameter Description <code>returnMessage</code> <code>message</code>, <code>messageType</code> and <code>ttl</code> <p>Example</p> <pre><code>{\n  returnMessage:{\n    message: 'Successfully unauthorized',\n    messageType: 'success', // 'success', 'warning' or 'danger'\n    ttl: 30000 // in miliseconds\n  }\n}\n</code></pre>"},{"location":"developers/interfaces/unAuthorize/#reference","title":"Reference","text":"Example CRMPipedrive <pre><code>    //     token: user.accessToken\n    // }\n    // const accessTokenRevokeRes = await axios.post(\n    //     revokeUrl,\n    //     revokeBody,\n    //     {\n    //         headers: { 'Authorization': `Basic ${getBasicAuth({ apiKey: user.accessToken })}` }\n    //     });\n    await user.destroy();\n    return {\n        returnMessage: {\n            messageType: 'success',\n            message: 'Logged out of TestCRM',\n            ttl: 1000\n        }\n    }\n\n    //--------------------------------------------------------------\n    //---CHECK.2: Open db.sqlite to check if user info is removed---\n    //--------------------------------------------------------------\n}\n\n//  - phoneNumber: phone number in E.164 format\n//  - overridingFormat: optional, if you want to override the phone number format\nasync function findContact({ user, authHeader, phoneNumber, overridingFormat, isExtension }) {\n    // ----------------------------------------\n    // ---TODO.3: Implement contact matching---\n    // ----------------------------------------\n</code></pre> <pre><code>}\n\nasync function unAuthorize({ user }) {\n    const revokeUrl = 'https://oauth.pipedrive.com/oauth/revoke';\n    const basicAuthHeader = Buffer.from(`${process.env.PIPEDRIVE_CLIENT_ID}:${process.env.PIPEDRIVE_CLIENT_SECRET}`).toString('base64');\n    const refreshTokenParams = new url.URLSearchParams({\n        token: user.refreshToken\n    });\n    const refreshTokenRevokeRes = await axios.post(\n        revokeUrl,\n        refreshTokenParams,\n        {\n            headers: { 'Authorization': `Basic ${basicAuthHeader}` }\n        });\n    const accessTokenParams = new url.URLSearchParams({\n        token: user.accessToken\n    });\n    const accessTokenRevokeRes = await axios.post(\n        revokeUrl,\n        accessTokenParams,\n        {\n            headers: { 'Authorization': `Basic ${basicAuthHeader}` }\n        });\n    // remove user credentials\n    user.accessToken = '';\n    user.refreshToken = '';\n    await user.save();\n    return {\n        returnMessage: {\n            messageType: 'success',\n            message: 'Logged out of Pipedrive',\n            ttl: 1000\n        }\n</code></pre>"},{"location":"developers/interfaces/updateCallLog/","title":"updateCallLog","text":"<p>This interface is called when a call log activity record needs to be updated. This interface is invoked in response to the following user actions:</p> <ul> <li>The user of App Connect's Chrome extension updates the subject or notes associated with a call log. </li> <li>When a recording has become available for a phone call.</li> </ul>"},{"location":"developers/interfaces/updateCallLog/#adding-a-recording-to-a-call-log-entry","title":"Adding a recording to a call log entry","text":"<p>Events are triggers the moment a phone call is completed so that it can be logged properly. However, recordings take additional time to process and encode to make available to users. Therefore, for any given call you will receive an event when the call ends, and a subsequent event when a record is made available (assuming a recording of the call was made). </p> <p>It is the developer's responsibility to update the call log record contents as they see fit to make a call recording available. </p>"},{"location":"developers/interfaces/updateCallLog/#input-parameters","title":"Input parameters","text":"Parameter Description <code>user</code> An object describing the Chrome extension user associated with the action that triggered this interface. <code>existingCallLog</code> All the metadata associated with the call to be logged. Call Log schema is described in our API Reference. <code>authHeader</code> The HTTP Authorization header to be transmitted with the API request to the target CRM. <code>recordingLink</code> If the call has a recording associated with it, then this field will contain a link to the voicemail. <code>subject</code> The subject or summary of the call activity. The value may have been changes by the user. <code>note</code> The notes saved by the user. The value may change if the user has updated the notes they have taken. <code>startTime</code> Updated value of start date/time of this call. <code>duration</code> Updated value of duration of this call. <code>result</code> Updated value of result of this call. <ul> <li>Why need <code>startTime</code>, <code>duration</code> and <code>result</code>? Call info could be not as accurate right after the call. Our app uses call info from user local data until it's updated by RingCentral server. If users create call logs before RingCentral server updates the data, another API call will be triggered to call this <code>updateCallLog</code> function with true call data.</li> </ul>"},{"location":"developers/interfaces/updateCallLog/#contact-info","title":"Contact Info","text":"<pre><code>{ \n  id: \"&lt;string\"&gt;,\n  type: \"&lt;string&gt;\", \n  phoneNumber: \"&lt;E.164 Phone Number&gt;\",\n  name: \"&lt;string&gt;\"\n}\n</code></pre>"},{"location":"developers/interfaces/updateCallLog/#return-values","title":"Return value(s)","text":"<p>An object with following properties:</p> Parameter Description <code>updatedNote</code> updated note on CRM <code>returnMessage</code> <code>message</code>, <code>messageType</code> and <code>ttl</code> <p>Example <pre><code>  return {\n    updatedNote: \"Some random notes\",\n    returnMessage:{\n      message: 'Call logged',\n      messageType: 'success', // 'success', 'warning' or 'danger'\n      ttl: 30000 // in miliseconds\n    }\n  }\n</code></pre></p>"},{"location":"developers/interfaces/updateCallLog/#reference","title":"Reference","text":"Example CRMPipedrive <pre><code>            messageType: 'success',\n            ttl: 1000\n        }\n    };\n}\n\n// Used to update existing message log so to group message in the same day together\nasync function updateMessageLog({ user, contactInfo, existingMessageLog, message, authHeader }) {\n    // ---------------------------------------\n    // ---TODO.8: Implement message logging---\n    // ---------------------------------------\n\n    // const existingLogId = existingMessageLog.thirdPartyLogId;\n    // const getLogRes = await axios.get(\n    //     `https://api.crm.com/activity/${existingLogId}`,\n    //     {\n    //         headers: { 'Authorization': authHeader }\n    //     });\n    // const originalNote = getLogRes.data.body;\n    // const updateNote = orginalNote.replace();\n\n    // const patchBody = {\n    //     data: {\n    //         body: updateNote,\n    //     }\n    // }\n    // const updateLogRes = await axios.patch(\n    //     `https://api.crm.com/activity`,\n    //     patchBody,\n    //     {\n    //         headers: { 'Authorization': authHeader }\n    //     });\n    console.log(`update message log with... \\n\\n${JSON.stringify(message, null, 2)}`);\n\n    //---------------------------------------------------------------------------------------------------------------------------------------------\n    //---CHECK.8: For multiple messages or additional message during the day, open db.sqlite and CRM website to check if message logs are saved ---\n    //---------------------------------------------------------------------------------------------------------------------------------------------\n}\n\nasync function createContact({ user, authHeader, phoneNumber, newContactName, newContactType }) {\n    // ----------------------------------------\n    // ---TODO.9: Implement contact creation---\n    // ----------------------------------------\n\n    const postBody = {\n        name: newContactName,\n        type: newContactType,\n        phone_numbers: [\n            {\n                name: \"Work\",\n                number: phoneNumber,\n                default_number: true\n</code></pre> <pre><code>            try {\n                const unAuthData = jwt.decodeJwt(additionalSubmission.adminAssignedUserToken);\n                const assigneeUser = await UserModel.findByPk(unAuthData.id);\n                if (assigneeUser) {\n                    assigneeId = assigneeUser.platformAdditionalInfo.id;\n                }\n            }\n            catch (e) {\n                console.log('Error decoding admin assigned user token', e);\n            }\n        }\n\n        if (!assigneeId) {\n            const adminConfig = await AdminConfigModel.findByPk(hashedAccountId);\n            assigneeId = adminConfig.userMappings?.find(mapping =&gt; typeof (mapping.rcExtensionId) === 'string' ? mapping.rcExtensionId == additionalSubmission.adminAssignedUserRcId : mapping.rcExtensionId.includes(additionalSubmission.adminAssignedUserRcId))?.crmUserId;\n        }\n    }\n\n    const postBody = {\n        owner_id: Number(user.id.split('-')[0]),\n        subject: callLog.customSubject ?? `${callLog.direction} Call ${callLog.direction === 'Outbound' ? 'to' : 'from'} ${contactInfo.name}`,\n        duration: secondsToHoursMinutesSecondsInPipedriveFormat(callLog.duration),    // secs\n        deal_id: dealId,\n        note: composedLogDetails,\n        done: true,\n        due_date: dateUtc,\n        due_time: timeUtc,\n        participants: [\n            {\n                person_id: Number(contactInfo.id),\n                primary: true\n            }\n        ]\n    }\n    if (!dealId &amp;&amp; leadId) {\n        postBody.lead_id = leadId;\n    }\n    if (orgId) {\n        postBody.org_id = orgId;\n    }\n    if (assigneeId) {\n        postBody.owner_id = Number(assigneeId);\n    }\n    const addLogRes = await axios.post(\n        `https://${user.hostname}/api/v2/activities`,\n        postBody,\n</code></pre>"},{"location":"developers/interfaces/updateMessageLog/","title":"updateMessageLog","text":"<p>This function is to add following messages on the same day to the same contact. Use case is explained here</p>"},{"location":"developers/interfaces/updateMessageLog/#params","title":"Params","text":"<p><code>Input</code>: - <code>user</code>: user entity - <code>contactInfo</code>: has <code>id</code>, <code>phoneNumber</code>, <code>type</code>, <code>name</code> - <code>existingMessageLog</code>: existing message log entity - <code>authHeader</code>: auth header for CRM API call - <code>message</code>: message text</p>"},{"location":"developers/interfaces/updateMessageLog/#reference","title":"Reference","text":"Example CRMPipedrive <pre><code>            name: contactInfoRes.name\n        },\n        returnMessage: {\n            message: `Contact created.`,\n            messageType: 'success',\n            ttl: 2000\n        }\n    }\n}\n\nasync function getLicenseStatus({ userId }) {\n    return {\n        isLicenseValid: true,\n        licenseStatus: 'Basic',\n        licenseStatusDescription: ''\n    }\n}\n\nexports.getAuthType = getAuthType;\nexports.getUserInfo = getUserInfo;\nexports.createCallLog = createCallLog;\nexports.updateCallLog = updateCallLog;\nexports.getCallLog = getCallLog;\nexports.createMessageLog = createMessageLog;\nexports.updateMessageLog = updateMessageLog;\nexports.findContact = findContact;\nexports.createContact = createContact;\nexports.unAuthorize = unAuthorize;\nexports.getLicenseStatus = getLicenseStatus;\n</code></pre> <pre><code>    const messageType = recordingLink ? 'Voicemail' : (faxDocLink ? 'Fax' : 'SMS');\n    let subject = '';\n    let note = '';\n    switch (messageType) {\n        case 'SMS':\n            subject = `SMS conversation with ${contactInfo.name} - ${moment(message.creationTime).utcOffset(user.timezoneOffset).format('YY/MM/DD')}`;\n            note =\n                `&lt;br&gt;&lt;b&gt;${subject}&lt;/b&gt;&lt;br&gt;` +\n                '&lt;b&gt;Conversation summary&lt;/b&gt;&lt;br&gt;' +\n                `${moment(message.creationTime).utcOffset(user.timezoneOffset).format('dddd, MMMM DD, YYYY')}&lt;br&gt;` +\n                'Participants&lt;br&gt;' +\n                `&lt;ul&gt;&lt;li&gt;&lt;b&gt;${userName}&lt;/b&gt;&lt;br&gt;&lt;/li&gt;` +\n                `&lt;li&gt;&lt;b&gt;${contactInfo.name}&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;` +\n                'Conversation(1 messages)&lt;br&gt;' +\n                'BEGIN&lt;br&gt;' +\n                '------------&lt;br&gt;' +\n                '&lt;ul&gt;' +\n                `&lt;li&gt;${message.direction === 'Inbound' ? `${contactInfo.name} (${contactInfo.phoneNumber})` : userName} ${moment(message.creationTime).utcOffset(user.timezoneOffset).format('hh:mm A')}&lt;br&gt;` +\n                `&lt;b&gt;${message.subject}&lt;/b&gt;&lt;/li&gt;` +\n                '&lt;/ul&gt;' +\n                '------------&lt;br&gt;' +\n                'END&lt;br&gt;&lt;br&gt;' +\n                '--- Created via RingCentral App Connect';\n            break;\n        case 'Voicemail':\n            subject = `Voicemail left by ${contactInfo.name} - ${moment(message.creationTime).utcOffset(user.timezoneOffset).format('YY/MM/DD')}`;\n            note = `&lt;br&gt;&lt;b&gt;${subject}&lt;/b&gt;&lt;br&gt;Voicemail recording link: ${recordingLink} &lt;br&gt;&lt;br&gt;--- Created via RingCentral App Connect`;\n            break;\n        case 'Fax':\n            subject = `Fax document sent from ${contactInfo.name} - ${moment(message.creationTime).utcOffset(user.timezoneOffset).format('YY/MM/DD')}`;\n            note = `&lt;br&gt;&lt;b&gt;${subject}&lt;/b&gt;&lt;br&gt;Fax document link: ${faxDocLink} &lt;br&gt;&lt;br&gt;--- Created via RingCentral App Connect`;\n            break;\n    }\n    const postBody = {\n        owner_id: Number(user.id.split('-')[0]),\n        subject,\n        deal_id: dealId,\n        note,\n        done: true,\n        due_date: dateUtc,\n        due_time: timeUtc,\n        type: smsType ? smsType.key_string : 'call',\n        participants: [\n            {\n                person_id: Number(contactInfo.id),\n                primary: true\n            }\n        ]\n    }\n</code></pre>"},{"location":"users/access/","title":"Accessing the phone dialer to make calls","text":"<p>App Connect makes available to users a fully-functional web phone for placing and receiving calls, as well as recording notes and call dispositions related to those calls -- not to mention numerous other features. The web phone can be accessed in one of two ways.</p>"},{"location":"users/access/#click-the-quick-access-badge","title":"Click the quick access badge","text":"<p>When logged into and viewing your CRM, an orange \"R\" handle/badge will appear in the lower-righthand corner of your browser window. Click the badge to open the dialer window and/or bring it to the foreground. </p> <p> </p> App Connect's quick access badge <p>If the orange badge obscures page content, or if you wish to hide it for other reasons, you may turn this off using an advanced configuration parameter.</p>"},{"location":"users/access/#disabling-the-quick-access-badge","title":"Disabling the quick access badge","text":"<p>If you wish, you can disable the quick access badge from Settings &gt; General &gt; Enabled domains. From here you can control what web pages and URLs the badge will appear, or not appear. </p> <p> </p> Controlling where the quick access badge will appear in Settings <p>By default, quick access badge and click-to-dial only work on your CRM pages, but you are free to set your own preference from the list below:</p> <ul> <li>Disabled</li> <li>Enable for connected CRM only</li> <li>Block by default (then manage a list of sites to allow)</li> <li>Allow by default (then manage a list of sites to block)</li> </ul> <p>If either \"Block by default\" or \"Allow by default\" are selected, users can then manage a list of URLs for which the badge will appear or be blocked respectively. </p>"},{"location":"users/access/#pinning-app-connect-to-your-browser-bar","title":"Pinning App Connect to your browser bar","text":"<p>You can open App Connect's dialer by finding the extension in your list of installed extensions and clicking \"RingCentral App Connect.\" For those who prefer this method over using the quick access badge that is rendered within the CRM, you can optionally pin App Connect from the extensions menu by clicking the pin icon. </p> <p> </p> App Connect's quick access badge <p>Pin the extension to your browser bar</p> <p>If you need to access the extension often, you can \"pin\" the extension to your location bar so that it is more readily available.</p> <p></p>"},{"location":"users/admin/","title":"Managing App Connect across your company","text":"<p>Super Admins within your RingCentral account have access to an additional area of App Connect in which they can manage the end user's experience across their entire account. This feature primarily allows admins to set certain preferences, or mandate certain preferences across their entire account. This allows admins for example to mandate that all calls across an account be logged. Or that specific settings be employed for their CRM. </p> <p> </p> The admin tab in App Connect gives admins the ability to manage settings on behalf of others"},{"location":"users/admin/#gaining-access-to-the-admin-tab","title":"Gaining access to the admin tab","text":"<p>When you first load App Connect, you may not see the Admin tab. To make the Admin tab appears please check the following:</p> <ol> <li>Make sure you possess the \"Super Admin\" role in the RingCentral Admin Console.</li> <li>Connect to your CRM</li> </ol>"},{"location":"users/ai/","title":"Using the RingCentral AI Assistant","text":"<p>App Connect's AI Assistant is currently in BETA</p> <p>In App Connect, RingCentral's AI Assistant helps save you time by taking critical call notes for you, so that you can place a greater focus on the person you are speaking with. </p>"},{"location":"users/ai/#turning-on-ai-assistant","title":"Turning on AI Assistant","text":"<p>App Connect's AI features are currently in beta. During this phase, you can enable these features by navigating to Settings &gt; Advanced features and toggling \"Smart Note (Beta)\" on. </p> <p> </p> Turning on AI Assistant and Smart Notes under Settings <p>AI assistant can be enabled independently on every device</p> <p>Disabling AI Assistant in App Connect will not disable AI assistent in the RingCentral desktop application, and vice-versa.</p>"},{"location":"users/ai/#auto-enabling-ai-assistant","title":"Auto-enabling AI Assistant","text":"<p>Users can toggle the \"Auto-start AI Assistant\" feature to automatically generate smart notes and transcription for every call. </p>"},{"location":"users/ai/#live-transcription","title":"Live transcription","text":"<p>AI Assistant, when enabled for your phone call, will show you a live transcript of your call.</p> <p> </p> RingCentral's AI Assistant in App Connect providing a live transcription of a call"},{"location":"users/ai/#ai-generated-summaries-action-items-and-more","title":"AI generated summaries, action items and more","text":"<p>When your phone call is complete, AI Assistant will process the phone call to generate a number of artifacts to help you in key follow-up activities. AI Assistant will generate the following:</p> <ul> <li>Transcript</li> <li>Call summary</li> <li>Recap of key take aways</li> <li>Tasks and action items</li> <li>Decisions made</li> </ul> <p> </p> RingCentral's AI Assistant can generate key artifacts automatically for you when a call ends"},{"location":"users/ai/#logging-ai-artifacts-in-your-crm","title":"Logging AI artifacts in your CRM","text":"<p>RingSense license required for logging AI artifacts</p> <p>During the beta period of this feature, artifacts will be logged for free. When the feature becomes generally available, customers will need to purchase a RingSense license to continue logging AI artifacts. </p> <p>App Connect has the ability to log all AI-generated artifacts in your CRM, making sure your system of record has a complete record of the phone call. </p>"},{"location":"users/appearance-setting/","title":"Customizing App Connect's appearance","text":"<p>App Connect provides several appearance customization options to help you personalize your experience. These settings allow you to control the visual interface, manage notification preferences, and customize the overall look and feel of the extension. You can access these settings from the General settings section. </p>"},{"location":"users/appearance-setting/#customizing-navigation-and-tabs","title":"Customizing navigation and tabs","text":"<p>The customize tabs feature allows you to personalize which tabs and sections are visible in your App Connect interface, helping you streamline your workflow by showing only the features you use most frequently. Customizing tabs can have the following benefits:</p> <ul> <li>Simplified Interface: Hide tabs you don't frequently use to reduce clutter</li> <li>Faster Navigation: Focus on the features most important to your workflow</li> <li>Personalized Experience: Tailor the interface to match your specific role and responsibilities</li> </ul> <p>Recommended Setup</p> <p>Start with all tabs enabled and gradually disable those you rarely use. You can always re-enable tabs later if your workflow changes.</p> <p> </p> Customize tabs settings allow you to control which interface elements are visible"},{"location":"users/appearance-setting/#managing-in-app-messages-and-notifications","title":"Managing in-app messages and notifications","text":"<p>Notification level settings help you control which types of notifications App Connect displays, allowing you to stay informed about important events while minimizing distractions from less critical alerts.</p> <p> </p> Notification level controls help you manage which alerts and notifications you receive"},{"location":"users/appearance-setting/#notification-level-options","title":"Notification Level Options","text":"<ol> <li>Success: success notifications like \"Call log created\".</li> <li>Warning: warning notifications like \"Please authorize your CRM account\".</li> <li>Error: error notifications like \"Failed to create call log\".</li> </ol>"},{"location":"users/appearance-setting/#customizing-app-connects-theme","title":"Customizing App Connect's theme","text":"<p>Theme settings allow you to customize the visual appearance of App Connect, including color schemes and interface styling to match your preferences or work environment.</p> <p> </p> Theme settings let you customize the visual appearance and color scheme <p>Settings Sync</p> <p>Depending on your organization's configuration, some appearance settings may be managed by your administrator or synchronized across devices. Check with your IT team if you're unable to modify certain settings.</p>"},{"location":"users/audio/","title":"Customizing your preferred audio devices","text":"<p>To customize your preferred input and output devices, e.g. headphones, laptop speakers, etc, from the Settings screen select \"Audio.\" Then select your preferred default devices. There are also audio volume controls.</p> <p> </p> The settings screen for customizing audio devices <p>You cannot modify your microphone settings while a call is active.\"</p>"},{"location":"users/automatic-logging/","title":"Automatically logging calls","text":"<p>App Connect has the ability to automatically log calls. How exactly this feature behaves depends upon your configuration, and whether you have elected to use our basic \"client-side\" logging feature, or server-side call logging.</p>"},{"location":"users/automatic-logging/#client-side-vs-server-side-logging","title":"Client-side vs server-side logging","text":"<p>The main difference between these two options is when the call is logged. When using App Connect's basic client-side logging feature (this is the default configuration) calls are only logged when the App Connect window is open. Conversely, when server-side call logging is enbaled, calls are logged in real-time, the moment the call ends. </p> Client-side Server-side Real-time logging User required to have App Connect installed Control whose calls get logged Automatic conflict resolution"},{"location":"users/automatic-logging/#client-side-logging-limitations","title":"Client-side logging limitations","text":"<p>App Connect has the ability to automatically log calls for its users. Rest assured, App Connect will log all calls it is able to, regards of whether you have select client-side or server-side logging. However, it is important customers understand certain limitations with client-side logging. </p> <ul> <li>It CAN automatically log the calls for any user who has the extension installed, and has connected the extension to both RingCentral and their CRM.</li> <li>It CANNOT log calls for anyone who does not have the extension installed in their browser. </li> <li>It CANNOT log calls for anyone who has not connected the extension to their CRM. </li> <li>It CANNOT log calls automatically for people whose browser is closed. </li> <li>It CANNOT log calls automatically for people whose App Connect window is closed. </li> </ul>"},{"location":"users/automatic-logging/#setting-up-automatic-call-logging","title":"Setting up automatic call logging","text":"<p>App Connect can be configured to log calls automatically so that you do not need to remember to do so manually. To log calls automatically, there are two configuration parameters that are relevant to you. Both of these parameters can be found under Settings accessed from the More tab.</p> <p>If you wish to utilize server-side call logging, the setup process is a little different. </p> <p> </p> Settings screen in App Connect to enable automatic call logging"},{"location":"users/automatic-logging/#settings","title":"Settings","text":"Setting Description Log phone calls automatically This toggles the auto log feature which will always attemp to log your calls/messages unless any conflict is found. Open call logging page after call This is a sub-setting under auto log. When enabled, App Connect will open a call logging page when a call ends. If auto-logging is also enabled, then the call will be logged and then the log form will be opened giving you a chance to make edits to what was logged."},{"location":"users/automatic-logging/#retroactively-logging-calls","title":"Retroactively logging calls","text":"<p>Automatic call logging allows for calls to be logged, even if you are not actively using your CRM, or taking calls through App Connect. However, there is one key restriction everyone should be aware of: calls cannot be logged if App Connect is closed. Luckily, when you open App Connect, and if automatic call logging is enabled, then App Connect will attempt to log any calls that were not logged while it was closed. </p> <p>Retroactively logging calls may take time</p> <p>To help prevent server overload, App Connect will retroactively log calls in the background slowly over time, processing calls in groups of ten every minute for ten minutes. Therefore, it will only attempt to log 100 calls in this way. If you failed to log more than 100, then the remainder will need to be logged manually. </p> <p>You can disable retroactive call logging under \"Call and SMS logging\" settings area. </p> <p></p>"},{"location":"users/developer-options/","title":"Developer options","text":""},{"location":"users/developer-options/#loading-custom-crm-adapter","title":"Loading custom CRM adapter","text":"<p>App Connect comes bundled with a number of CRM adapters that are ready-to-use. Developers and users alike can use advanced settings to load another third-party or alternative adapter. </p> <p>To load a custom adapter, enter in the URL to the publicly accessible manifest.json file into the \"Custom CRM manifest url\" field. </p> <p> </p> A setting used to load a custom CRM adapter into the framework."},{"location":"users/extension-options/","title":"Browser options","text":""},{"location":"users/extension-options/#advanced-configuration-options","title":"Advanced configuration options","text":"<p>Most users will not need to access these advanced configuration options. However, they have been provided to assist in resolving less common, low-level challenges. These options can be accessed both in Chrome and Edge by opening the \"Manage Extensions\" area from the Window menu, or from the extension menu found adjacent to your browser's location bar. </p> <ul> <li>Open Manage extensions in Chrome</li> <li>Open Manage extensions in Microsoft Edge</li> </ul> <p>Finding advanced settings</p> <p>To access advanced settings, in your browser, navigate to \"Manage Extensions,\" or just \"Extensions.\" From there locate \"RingCentral App Connect\" and click \"Show Details.\"</p> <p> </p> An excerpt from the extension details page for App Connect <p>Then scroll down near to the bottom and click \"Extension options\" to open the dialog below.</p> <p> </p> App Connect extension options. Users may see a slightly different set of options depending upon the version they are using."},{"location":"users/extension-options/#click-to-dial-inject-delay","title":"Click-to-dial inject delay","text":"<p>App Connect's phone/dialer is injected into the CRM via a mechanism that some web servers will reject. This is circumvented by delaying the loading of the CTI by a couple of seconds. This config parameter controls this delay. </p> <p>This should only be used in rare circumstances.</p> <p>CRMs known to need this parameter set are:</p> <ul> <li>Pipedrive</li> </ul>"},{"location":"users/extension-options/#render-quick-access-button","title":"Render quick access button","text":"<p>App Connect injects a small handle in the lower right hand corner of your CRM. Some users have expressed concern that this handle obscures the page content, and therefore wish to remove it. Toggle this parameter to turn off/on the dialer handle in the lower-righthand corner. </p> <p>Disabling the quick access button does not impact the operability of the extension.</p>"},{"location":"users/logging-conflicts/","title":"Resolving logging conflicts","text":"<p>In order for a call to be logged properly, a contact record within the connected CRM must exist and be associated with the phone call. Calls are matched to a contact via the phone number associated with the call.</p> <p>When no contact can be found associated with a given phone number, or when there are multiple matches for a single phone number, we call that a logging conflict. Logging conflicts must be resolved in order for the call to be logged properly. </p>"},{"location":"users/logging-conflicts/#no-contact-found","title":"\"No contact found.\"","text":"<p>If you receive a call from someone whose phone number is not in your CRM, or whose contact record cannot be found, then the call will not be logged. There are a number of ways to resolve this conflict. </p>"},{"location":"users/logging-conflicts/#create-a-contact","title":"Create a contact","text":"<p>App Connect will give you the option of creating a new contact whenever a call is logged. Simply select \"Create new contact\" and you will be prompted to enter a name for the contact. </p> <p>We realize that you may want to enter in a lot more information about a contact. So after the call is complete, navigate to the contact record in the CRM and edit the contact to complete the contact creation process. </p> <p> </p> Creating a placeholder contact in the connected CRM <p>Tips and best practices</p> <ul> <li>App Connect only prompts you for a name. You may want to edit the contact later to augment it with more information about the contact after the call is logged. </li> <li>There is a call-pop setting that controls whether App Connect will open a browser tab to the newly created contact to aid you in editing the contact after it is created. </li> <li>Some CRMs require additional records, like a company, be created and associated with a contact. App Connect will often create placeholder objects that you can edit later.</li> <li>If the contact exists in your CRM, but App Connect cannot find it, consider editing the contact and updating its phone number to use the E.164 format favored by RingCentral and App Connect. </li> </ul> <p>What if no contact was found, when a contact is known to exist?</p> <p>Sometimes a contact is not found, even though one knows for a fact that the contact exists. This happens with some CRMs whose search mechanisms are overly strict. You can address this through advanced settings, or by searching for the contact by name (see below). </p>"},{"location":"users/logging-conflicts/#search-for-a-contact","title":"Search for a contact","text":"<p>Most App Connect adapters support the ability to search for a contact when one is not able to be found via a phone number. If you adapter supports this capability, you will see a \"Search for contact\" option in the contact pull-down menu. </p> <p> </p> Searching contacts in a CRM via App Connect <p>Enter the name of the person to search for, select the desired contact if one is found and App Connect will log the call/SMS against that contact. </p>"},{"location":"users/logging-conflicts/#multiple-possible-contacts-found","title":"Multiple possible contacts found","text":"<p>If more than one contact in a CRM shares the same phone number, then multiple contacts are likely to be found. This often happens when communicating with multiple employees from the same company, as it is not uncommon for the incoming phone number of two employees in the same building to present incoming phone numbers of their company's main company number. </p> <p>When multiple contacts are found, users are given an opportunity to disambiguate and select the correct contact record. This is done via a pull-down menu on the call logging screen. </p> <p> </p> Disambiguating between contacts when multiple matches are found in the connected CRM"},{"location":"users/logging/","title":"Logging phone calls in your CRM","text":"<p>App Connect\u2019s call logging system is designed to help users efficiently track and manage their calls. It offers the following features and capabilities:</p> <ul> <li>Manual Call Logging \u2013 Users can choose to log calls selectively by clicking the call log button in their call history.</li> <li>Automatic Call Logging \u2013 Calls can be logged automatically based on user preferences and system configuration.</li> <li>Multi-Device Support \u2013 Calls made or received on mobile devices, the RingCentral desktop app, or within App Connect itself are all logged automatically.</li> <li>Custom CRM Fields \u2013 Adapt to your CRM\u2019s specific requirements by ensuring the correct fields are completed for each logged call.</li> <li>Retroactive Call Logging \u2013 Missed or unlogged calls are automatically recorded when you install or reopen App Connect after a period of inactivity.</li> </ul>"},{"location":"users/logging/#call-logging-sequence","title":"Call logging sequence","text":"<p>It may take some time in order for a call log's record in the CRM to be complete, because many artifacts of a call take time to prepare. For this reason a call log is generated in stages. Below is the call logging sequence.</p> <ol> <li>Call is completed. Within a few seconds of the call completing, a record in the CRM is created. At this stage App Connect will log the fundamental basics of the call, including things like the start/stop time, the duration, the participants. </li> <li>Call notes (optional). If a user has manually entered notes about a call, then the call log record created in step 1 will be updated to include the user's notes. </li> <li>Call recording is prepared. It takes about as long as the call lasted to prepare a call recording file for playback and download. When this process is complete, the call log record created in step 1 will be updated to include a link to the call recording.</li> <li>AI artifacts are generated. If you are a RingSense subscriber, then when the call summary, transcript and other artifacts are generated, the final attempt to update the call log record created in step 1 will be updated with this information. </li> </ol> <p>Do not edit a call log record until it is complete</p> <p>App Connect updates your call log record multiple times before it is complete. Until it is complete, if you make any edits to the record in the CRM you run the risk of losing those edits when the call log is updated by the framework. </p> <p>Needed permissions for successful call log updates</p> <p>Some customers have a policy that states agents can only create call logs, they are NOT permitted to update call logs. Be aware, this policy will make it difficult for App Connect to successfully create a complete log entry for a call, as it requires the ability to update records. Look into server side call logging as a possible remedy. </p>"},{"location":"users/logging/#incremental-versus-all-at-once-logging","title":"Incremental versus all-at-once logging","text":"<p>App Connect can log calls in one of two ways:</p> <ul> <li> <p>Incremental logging means that App Connect will attempt to log calls in near real-time. Logging begins the moment the call is connected, and then as the call progresses, and call artifacts are made available, the call log entry is updated with newer information. </p> </li> <li> <p>All-at-once logging means that App Connect will wait until all artifacts are ready before logging the call. This means that there could be a short delay in seeing the call being logged in the CRM. Users are free to enter and notes at any time. When the call is ready to log, any notes taken will be logged to the CRM.</p> </li> </ul> <p>Why would someone choose all-at-once logging?</p> <p>Some companies have policies that restrict a user's ability to update notes once they have been created. For some companies this is a matter of compliance -- the consider the notes taken during a call to be inviolate, and thus must prevent call log entries from ever being tampered with. If a company has a policy such as this, incremental logging is not possible because the call log entry is created and updated multiple times. The remedy is simple: enable all-at-once logging, and App Connect will wait and create a complete call log entry via a single create action. </p> <p> </p> The setting to manage whether calls are logged incrementally or all-at-once."},{"location":"users/logging/#taking-notes-during-an-active-call","title":"Taking notes during an active call","text":"<p>While a call is active, click the \"Notes\" icon found in the lower right-hand corner of the dialer to open up a notes page into which you free type notes. When the call is complete, the notes will be saved locally, and when you log the call in the CRM the notes will transmitted to and saved in the CRM.</p> <p> </p> Users can take notes during a phone call that can later be logged into a CRM."},{"location":"users/logging/#controlling-what-information-gets-logged","title":"Controlling what information gets logged","text":"<p>There is a lot of potential information about a call that can be logged. Depending upon your needs you may wish to modify what information is summarized and displayed in the logged call's record. Below is a list of the data available to be logged:</p> <ul> <li>Subject - this acts as a one-line summary of the call, usually in the form of \"Inbound call from name\"</li> <li>Notes - this refers to the human-entered notes for the call</li> <li>Contact phone number - the phone number that was called or called you</li> <li>Date/time - the start and end date/time of the call</li> <li>Duration - the duration of the call</li> <li>Call result - what did RingCentral observe as the result of the call, e.g. \"call connected,\" \"voicemail,\" \"missed,\" etc. </li> <li>Recording - if there is a recording for the call, a link to the recording will be embedded </li> <li>AI notes/summary - AI-generated summary of the call (requires RingSense subscription)</li> <li>Transcript - A transcript of the call (requires RingSense subscription)</li> <li>Call journey (Server-side logging only) - Provides details on how calls are routed within the RingCentral phone system (e.g., IVR menus, call queue transfers). Manual call transfers performed by users are not included. This information is available only in Admin Settings and requires server-side logging to be enabled. If this setting is changed, the admin must re-enable server-side logging for the changes to take effect.</li> </ul> <p> </p> Settings screen to control what information to log in your CRM"},{"location":"users/logging/#logging-calls-manually","title":"Logging calls manually","text":"<p>All calls made or received can be logged manually. To manually log a call, open the \"Calls\" tab in App Connect, find the call you wish to log in the list, and click the call log icon. You will then be prompted to enter notes and other required fields in order to log the call in the connected CRM. Clicking \"save\" will result in the call being logged and associated with the proper contact. Any notes entered by the user will also be saved with the associated activity.</p> <p> </p> App Connect's call history page"},{"location":"users/logging/#filtering-call-history-for-unlogged-calls","title":"Filtering call history for unlogged calls","text":"<p>It might be helpful from time to time to quickly assess and remedy any calls that have not yet been logged. To see a list of calls that have not yet been logged, select \"Unlogged\" from the list of available filters. </p> <p> </p> App Connect's filtered list of \"Unlogged\" calls"},{"location":"users/logging/#logging-call-recordings","title":"Logging call recordings","text":"<p>If a call is recorded, a link to the call's recording is included in the contents logged to the CRM automatically. </p> <p>Call recording links are generated with certain delay</p> <p>Please be aware that it takes time for RingCentral server to process and upload your recordings, therefore recording links won't be generated immediately after calls. The delay could be seconds to minutes dpending on duration of the call and RingCentral server's current capacity.  </p> <p>App Connect does not archive the recording file</p> <p>By default, App Connect will only generate a link to the call recording stored in RingCentral. Unless call archiving is explicitly supported by the CRM's adapter, you may need to explore alternative solutions for reliable off-site storage of call recording files. </p> <p>Call logs are kept for a maximum of 90 days within RingCentral</p> <p>Please be aware that RingCentral does not retain data indefinitely. Call recordings for example are purged after 90 days. If you wish to retain those files longer, most users subscribe to a third-party service to archive call media. When call recordings are removed from RingCentral, the links in your CRM may expire. </p>"},{"location":"users/logging/#logging-past-calls","title":"Logging past calls","text":"<p>App Connect has the ability to automatically log calls in your connected CRM (see Automatic call logging). However, unless you are using server-side call logging, in order for calls to be logged, the extension must be actively running. So if you receive a call overnight for example, the call will not be logged until the next time you access App Connect. </p>"},{"location":"users/making-calls/","title":"Click-to-dial","text":"<p>When using your CRM, all phone numbers in your CRM will become clickable, allowing you to easily initiate a call with that phone number, or send an SMS message to that phone number. This helps users more quickly and easily engage with contacts, leads, candidates and people whom your CRM tracks.</p> <p> </p> Click-to-dial hovercard for easy calling"},{"location":"users/making-calls/#enabling-click-to-dial-for-internal-phone-numbers","title":"Enabling click-to-dial for internal phone numbers","text":"<p>Internal phone numbers, e.g. a plain extension, are also supported for click-to-dial so that you can easily call a co-worker -- provided that the phone number is in the following format <code>{mainNumber}#{extensionNumber}</code>. For example, <code>+12223334444#438</code>.</p>"},{"location":"users/making-calls/#turning-onoff-click-to-dial","title":"Turning on/off click-to-dial","text":"<p>Users can manage which screens, websites, and URLs that click-to-dial is enabled for under Settings &gt; General &gt; Enabled domains. Here users can select one of the following options:</p> <ul> <li>Disabled</li> <li>Enable for connected CRM only</li> <li>Block by default (then manage a list of sites to allow)</li> <li>Allow by default (then manage a list of sites to block)</li> </ul> <p>If either \"Block by default\" or \"Allow by default\" are selected, users can then manage a list of URLs for which click-to-dial will be blocked or allowed respectively. </p> <p> </p> Turn click-to-dial on and off for specific URLs"},{"location":"users/managed-settings/","title":"Managing settings on behalf of others","text":"<p>Once you have access to the Admin tab, admins can manage the following:</p> <ul> <li>Call and SMS logging settings</li> <li>Contact and call-pop settings</li> <li>CRM-specific settings</li> <li>Advanced settings</li> <li>Set the custom CRM manifest URL</li> </ul> <p> </p> Admins can set call logging policies <p>For each setting that can be managed by an admin, one can do the following:</p> <ul> <li>Mandate the setting be a specific value. This is done by disabling the user's ability to customize the value, and select the value you prefer. </li> <li>Set the default value of a setting. This is done by setting the preferred value, and by enabling the user to customize the value. </li> </ul>"},{"location":"users/managed-settings/#what-users-within-your-account-will-see","title":"What users within your account will see","text":"<p>When a setting is mandated by an admin, a lock icon will appear next to the setting and it will be disabled, thereby allowing the user to see the value, but be unable to change it. </p> <p> </p> Admins can manage CRM-specific settings"},{"location":"users/managed-settings/#managing-crm-specific-settings","title":"Managing CRM-specific settings","text":"<p>Each CRM supported by App Connect may expose custom settings. These settings can be managed under the area labeled as \"Custom options.\"</p> <p> </p> Admins can manage CRM-specific settings"},{"location":"users/phone-number-formats/","title":"Alternative phone number formats","text":"<p>In order to match a call to a contact in a CRM, App Connect needs to search the CRM for a contact using a phone number. Some CRMs have more rudimentary APIs that require phone numbers to EXACTLY match the string searched for. For these CRMs, reliably finding a contact record for a phone number can be difficult, which in turn impacts your ability to log a call and associate it with the proper entity in your CRM. Let's look at an example to help you understand. The following phone numbers are all functionally equivalent, even though they are not literally identical. </p> <ul> <li><code>(###) ###-####</code></li> <li><code>###.###.####</code></li> <li><code>###-###-####</code></li> <li><code>+1-###-###-####</code></li> <li>etc</li> </ul> <p> </p> A setting used to search for contacts using a variety of alternative formats used by the customer. <p>RingCentral phone numbers are all formatted using the E.164 standard. If you are not storing phone numbers that utilize this format, and if your particular CRM does not support a more rigorous search mechanism, App Connect may fail to associate calls with contacts properly. </p> <p>Those CRMs that exhibit this problem have additional settings found under the \"Contacts\" setting area. These phone number format parameters allows you to specify multiple formats used by your team. App Connect will then search for contacts using each of the formats provided until a record is found. This may have performance impacts.</p> <p>CRMs known to exhibit this problem are:</p> <ul> <li>Clio</li> <li>Insightly </li> <li>NetSuite</li> </ul>"},{"location":"users/phone-number-formats/#how-it-works","title":"How it works","text":"<p>The logic is simple.</p> <ol> <li>It gets all number digits without country code (e.g. if it's a US number +10123456789, then it'll get 0123456789 as +1 is the country code)</li> <li>Each of the digit will be inserted into the format one by one (e.g. <code>+1-###-###-####</code> -&gt; <code>+1-012-345-6789</code>; <code>(###) ###-####</code> -&gt; <code>(012) 345-6789</code>; <code>1##########</code> -&gt; <code>10123456789</code>)</li> </ol>"},{"location":"users/preferred-device/","title":"Setting your preferred device","text":"<p>RingCentral customers may sometimes have multiple devices or ways of initiating a phone call. To better control what device you use for placing calls, from the Settings screen select \"Calling.\" Then, select the device you prefer to use. Options include the following:</p> <p> </p> The settings screen for changing your preferred device for placing calls"},{"location":"users/preferred-device/#config-options","title":"Config options","text":"<ul> <li>Browser. Select this if you wish to place calls using App Connect itself. </li> <li>RingCentral App. If you prefer to use the main RingCentral desktop app to make calls, select this. </li> <li>RingCentral Phone. This option is not recommended as RingCentral Phone is no longer supported. However, if you still have this app installed and if you prefer to use it, select this. </li> <li>RingOut. RingOut is helpful if you prefer to make a call from your desk phone. When RingOut is selected you will be called, and your desk/hard phone will ring. Answer the phone and we will then connect you to the person you are calling. </li> </ul>"},{"location":"users/presence/","title":"Managing presence and call queue status","text":"<p>App Connect\u2019s embedded phone makes it easy to set and sync your presence and status across the network. Any changes to your status\u2014whether made directly in the dialer or through other mechanisms\u2014are automatically reflected in the embedded dialer.</p>"},{"location":"users/presence/#changing-your-presence-status","title":"Changing your presence status","text":"<p>There are two ways to change your presence:</p> <ol> <li> <p>Using the Embedded Dialer     Click the presence indicator in the upper-left corner of the embedded dialer.</p> <p></p> </li> <li> <p>Via the Settings Page     Navigate to the Settings page under the More menu and update your presence status from there.</p> <p></p> </li> </ol>"},{"location":"users/presence/#call-queue-presence-management","title":"Call queue presence management","text":"<p>If you're a member of a call queue, you can manage your call queue presence through the Status Settings section in App Connect.</p>"},{"location":"users/presence/#accept-calls-from-call-queues","title":"Accept calls from call queues","text":"<p>Toggle this setting to control whether you receive calls from any call queue. When disabled, you won't receive call queue calls.</p> <p></p>"},{"location":"users/presence/#manage-call-queue-presence","title":"Manage call queue presence","text":"<p>Use this option to opt out of specific call queues, allowing finer control over which queues you're available for.</p> <p></p> <p>To change call queue presence, you must have the necessary permissions, and the call queue must be configured to allow member presence updates in the RingCentral admin portal.</p>"},{"location":"users/prompts/","title":"Prompts to log calls and messages","text":""},{"location":"users/prompts/#automatically-prompt-to-capture-call-notes","title":"Automatically prompt to capture call notes","text":"<p>Many end users would like confidence in knowing that every call they place or receive is logged properly in the CRM they are connected to. Furthermore, users also want to be prompted to capture notes about a call immediately upon a call ending. To automatically be prompted to enter and save notes relating to a call that has just ended, enable \"Auto log call - only pop up log page\" from the Settings page. </p> <p> </p> The settings screen to enable prompting the user to enter notes after a call"},{"location":"users/prompts/#automatically-prompt-to-capture-sms-and-text-messaging-notes","title":"Automatically prompt to capture SMS and text messaging notes","text":"<p>As with phone calls, many end users would like to reliably capture the SMS messages transmitted to contacts. To be prompted automatically to enter notes upon sending an SMS, enable \"Prompt to enter notes after sending SMS\" from the Settings page. </p> <p> </p> The settings screen to enable prompting the user to enter notes after sending an SMS"},{"location":"users/region/","title":"Changing your region and default area code","text":"<p>To customize your default country and area code, from the Settings screen select \"Region.\" Then enter your preferred defaults. </p> <p> </p> The settings screen for modifying your locale"},{"location":"users/screen-pop/","title":"Screen-pop","text":"<p>Screen-pop, also known as \"call-pop,\" refers to the feature in which App Connect will automatically open a user's browser to a contact you are calling or from whom you are receiving a call. This feature helps agents know exactly who they are speaking to before or during a call.</p> <p>One will find call-pop settings under the \"Call-pop\" settings area that control under what circumstances App Connect will automatically open your CRM to the contact or person being called, or calling you. </p> <p> </p> Screen-pop options in App Connect Settings"},{"location":"users/screen-pop/#screen-pop-settings","title":"Screen-pop settings","text":"Setting Description Open contact from incoming call Determines if and when App Connect will open the matched contact in the CRM for an incoming call. Allowed values are: Disable, On first ring, and on answer. Open contact from outgoing call Determines if and when App Connect will open the matched contact in the CRM for an outgoing call. Allowed values are: Disable, On first ring, and on answer. Open contact after creating it If enabled, will cause App Connect to open the CRM to the page to edit a contact immediately upon creating the contact via App Connect. This is especially helpful when you want to augment the newly created contact with more data."},{"location":"users/server-side-logging/","title":"Server-side call logging","text":"<p>Server-side call logging is currently in beta</p> <p>This feature is currently in beta and may exhibit some issues. We encourage users to try the feature out in order to help us refine the feature. Known issues and limitations:</p> <ul> <li>Can only be enabled for entire organization (no partial enablement)</li> <li>Limited UI for determining which phone number(s) to block from logging</li> <li>May briefly result in double-logging when initially turned on</li> </ul> <p>Server-side call logging may become a premium feature</p> <p>The costs associated with operating a server-side call logging service may require us to charge for this feature in the future. </p>"},{"location":"users/server-side-logging/#seamless-call-logging-with-app-connect","title":"Seamless Call Logging with App Connect","text":"<p>Out of the box, App Connect enables users to log calls directly from the App Connect client (Chrome extension). We call this \"client-side logging.\" App Connect can even be configured to log calls automatically for added convenience. However, relying solely on client-side logging comes with certain limitations:</p> <ul> <li> <p>Delayed Logging: Not all calls may be logged in real-time.</p> </li> <li> <p>Limited Coverage: Only calls from users who have the App Connect extension installed will be logged.</p> </li> </ul>"},{"location":"users/server-side-logging/#server-side-call-logging-a-reliable-solution","title":"Server-Side Call Logging: A Reliable Solution","text":"<p>Server-side call logging eliminates these challenges. Operating at the organizational level, it logs calls for all users\u2014whether or not they have App Connect installed. Additionally, it captures call data immediately after each call ends, ensuring comprehensive, timely, and reliable logging across your entire organization.</p> <p>We still recommend all users install the App Connect client.</p> <p>Installing the App Connect client ensures that all users have the ability to quickly resolve issues preventing calls from being logged. For example, when zero, or more than one contact is matched to a phone number. </p>"},{"location":"users/server-side-logging/#enabling-server-side-call-logging","title":"Enabling server-side call logging","text":"<p>Currently the server-side call logging feature is in beta, and can be enabled from the Admin settings screen as shown below. </p> <p> </p> App Connect's server-side call logging settings as seen by an admin. Your available settings depends upon the CRM you are connected to (Bullhorn shown above). <p>Under Enable server side logging, select \"Enable for account\", and then save to enable this feature.</p> <p>To make sure server-side logging is functioning properly, it is best for the admin to maintain an active session in the CRM to keep the CRM connected and authorized in App Connect.</p>"},{"location":"users/server-side-logging/#trial-mode","title":"Trial-mode","text":"<p>If you are unsure of turning on server-side call logging across your entire account, the admin in your account can enable server-side call logging for their extension exclusively. It is the intent of this feature to allow admins to try the feature out for a period of time before enabling it for other users. </p> <p> </p> App Connect setup to enable server-side call logging in trial mode <p>Under Enable server side logging, select \"Enable for admin only (trial mode)\", and save.</p>"},{"location":"users/server-side-logging/#configuring-server-side-call-logging","title":"Configuring server-side call logging","text":"<p>From the Server side logging page, an admin can enable call logging for their entire organization. Once enabled, automatic logging from the client will be disabled across your entire organization. Users will still be able to log calls manually, or edit call log entries made by the server-side call logging service. </p>"},{"location":"users/server-side-logging/#activity-record-owner","title":"Activity record owner","text":"<p>When App Connect's server-side logging service is enabled, the service will use the RingCentral admin's credentials who initially enabled the feature to subscribe to all new call events across the entire organization, as well as to save activity records in the connected CRM. As a result, the default behavior will result in the admin being the owner of all activity records it creates.</p> <p>This is sometimes desirable, but other's may prefer for audit trail purposes to have the activity record's owner accurately reflect the person who conducted the phone call.</p> <p>To override this behavior, set Activity record owner to \"Agent/user (if possible).\" This will instruct App Connect to attempt to assign ownership of the activity record based on whether it can find a corresponding user in the CRM based on their respective email addresses in the two systems. Any user that cannot be mapped automatically, can be mapped manually by an admin using the \"User mapping\" setting.</p> <p> </p> App Connect's user mapping function used by admins to ensure activity records are attributed properly. <p>If attempts to determine the correct owner of the note fail, the activity record owner will default to the admin that setup server side logging.</p> <p>To always assign ownership of the activity record to the admin, set Activity record owner to <code>Admin</code>. </p> <p> </p> Server-side call logging setup to assign all activity records to the admin."},{"location":"users/server-side-logging/#blocking-some-phones-from-being-logged","title":"Blocking some phones from being logged","text":"<p>From the \"Server-side call logging\" page, you can specify a list of phone numbers and/or extensions for which you do not wish to log calls. Phone numbers must be represented usig the E.164 format, e.g. <code>+15105551234</code>. Multiple phone numbers and extension numbers can be specified provided they are separated by a <code>,</code> comma. </p> <p> </p> Server-side call logging can be setup to NOT log calls made to some numbers. <p>Special considerations when using server-side call logging</p> <ul> <li>Calls to the main company number that are dropped before being redirected to an extension will not be logged.</li> <li>When a call is made to the main company number and redirected to a user, the call duration recorded may appear longer than the actual time spent by the user. This is because the recorded duration includes the time taken for the call to be redirected.</li> <li>Logs created through server-side logging use admin credentials, so extension users may not be able to edit them. Normal users require the appropriate CRM permissions to update log data.</li> </ul>"},{"location":"users/server-side-logging/#use-admin-settings","title":"Use admin settings","text":"<p>Server side logging uses some admin settings to automate the logging process. Settings are cached and refreshed once every hour. If you want to change setting values and have them reflected immediately in the logging process, please go to server side logging page and save it again so that it will be re-subscribed with new setting values.  </p>"},{"location":"users/server-side-logging/#when-client-side-extension-is-in-use","title":"When client side extension is in-use","text":"<p>With Server side logging turned ON, and meanwhile using client side extension could be a tricky case.</p>"},{"location":"users/server-side-logging/#avoid-double-logging","title":"Avoid double logging","text":"<p>Server side logging has quick reactions, meaning it'd be the first to log a call if call events come to server side logging service and your Chrome extension at nearly the same time.</p> <p>To avoid double logging from server side logging and client side extension, the extension will check if call log already exists. If yes, it'll pop up log edit form instead.</p>"},{"location":"users/server-side-logging/#agent-notes","title":"Agent notes","text":"<p>Server side logging firstly creates call logs with a pending message. Then, further information e.g. call result, call recording, agent notes will be updated later. </p>"},{"location":"users/settings-sync/","title":"Synchronizing admin and user settings","text":"<p>App Connect enables seamless synchronization of user settings across multiple devices, ensuring a consistent experience between home and work computers. By integrating with administrator-managed settings, users can maintain their preferences while complying with organizational policies.</p> <ul> <li>Cross-Device Synchronization: Automatically syncs user preferences, themes, and configurations across authorized devices.</li> <li>Administrator-Managed Settings: Ensures that company policies and restrictions are maintained while allowing personal customizations.</li> <li>Secure Cloud-Based Storage: Stores settings securely in the cloud, enabling instant access when switching devices.</li> <li>Customizable User Preferences: Users can modify personal settings that do not conflict with organizational policies.</li> </ul>"},{"location":"users/settings-sync/#locked-settings","title":"Locked settings","text":"<p>Admins have the ability to set a configuration property and optionally lock it so that users cannot customize it. These settings have a lock icon next to them and cannot be modified. </p> <p> </p> Admins can manage CRM-specific settings"},{"location":"users/sms/","title":"Sending SMS","text":"<p>App Connect has the ability to send and receive SMS messages. You can access this functionality from the Messages tab and works more or less like your phone. Click on the conversation you want to view, and then send messages to that individual or group. </p>"},{"location":"users/sms/#sms-templates","title":"SMS templates","text":"<p>Engaging with communications from customers can be overwhelming, and responding to the same questions individually can be taxing. SMS templates allow you to compose responses to common inquiries ahead of time. Then when it comes time to author a message, rather than composing your response manually, select from one of your pre-written responses, populate the message into the messaging box, make any small edits you need, and then click send. </p> <p> </p> Use SMS templates to quickly compose responses to common inquiries"},{"location":"users/sms/#managing-sms-templates","title":"Managing SMS templates","text":"<p>The SMS templates used in App Connect are the same templates you create and manage inside of the RingCentral desktop application to ensure consistency between these two clients. </p> <p> </p> Use SMS templates as seen from the RingCentral desktop application"},{"location":"users/sms/#logging-sms-conversations","title":"Logging SMS conversations","text":"<p>Similar to call logging, App Connect can also log SMS messages. To help prevent a CRM from being overwhelmed by individual records for each SMS, App Connect creates a single CRM record that contains a digest of all the SMS messages sent between you and a recipient sent in a single day. </p>"},{"location":"users/sms/#sms-logging-settings","title":"SMS logging settings","text":"Setting Description Log SMS conversations automatically This toggles the auto log feature which will always attemp to log your SMS messages unless any conflict is found. Open call SMS logging page after message This is a sub-setting under auto log. When enabled, App Connect will open a logging page when an SMS message is sent. It only prompts you in this manner for the first message logged that day. <p>Logging SMS conversations follows many of the same rules as logging phone calls, especially as it relates to resolving conflicts and so forth. Please consult call logging for more information. </p>"},{"location":"users/user-report/","title":"Agent-level call statistics and reports","text":"<p>The User Report feature provides valuable insights into your calling and messaging activity, helping you track your communication patterns and productivity within App Connect.</p> <p>Metrics for the current user's calling and communication history is located in the Reports within the App Connect interface. This dedicated tab gives you easy access to your personal communication statistics and activity data.</p> <p> </p> Calling stats and metrics from the agent's perspective <p>The Reports tab currently provides basic agent-level call statistics, including the following features:</p> <ul> <li>Call Activity: View calls made and received within a selected date range</li> <li>SMS Messages: Track SMS messages sent within your chosen time period</li> <li>Date Range Selection: Customize the reporting period to analyze specific timeframes</li> </ul> <p>Stay tuned for updates</p> <p>As we continue to enhance the User Report feature with organization-level statistics, you'll gain even more powerful insights into your team's overall communication performance.</p>"}]}